
opdr_3_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000574  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800070c  08000714  00010714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800070c  0800070c  00010714  2**0
                  CONTENTS
  4 .ARM          00000000  0800070c  0800070c  00010714  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800070c  08000714  00010714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800070c  0800070c  0001070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000710  08000710  00010710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000000  08000714  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08000714  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010714  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b0a  00000000  00000000  00010744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000027a  00000000  00000000  0001124e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  000114c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  00011558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e9ca  00000000  00000000  000115d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000008d9  00000000  00000000  0001ff9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054024  00000000  00000000  00020873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074897  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000198  00000000  00000000  000748e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080006f4 	.word	0x080006f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080006f4 	.word	0x080006f4

080001d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	6039      	str	r1, [r7, #0]
 80001e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	db0a      	blt.n	8000202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	490c      	ldr	r1, [pc, #48]	; (8000224 <__NVIC_SetPriority+0x4c>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	0112      	lsls	r2, r2, #4
 80001f8:	b2d2      	uxtb	r2, r2
 80001fa:	440b      	add	r3, r1
 80001fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000200:	e00a      	b.n	8000218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	b2da      	uxtb	r2, r3
 8000206:	4908      	ldr	r1, [pc, #32]	; (8000228 <__NVIC_SetPriority+0x50>)
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f003 030f 	and.w	r3, r3, #15
 800020e:	3b04      	subs	r3, #4
 8000210:	0112      	lsls	r2, r2, #4
 8000212:	b2d2      	uxtb	r2, r2
 8000214:	440b      	add	r3, r1
 8000216:	761a      	strb	r2, [r3, #24]
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	e000e100 	.word	0xe000e100
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3b01      	subs	r3, #1
 8000238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800023c:	d301      	bcc.n	8000242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800023e:	2301      	movs	r3, #1
 8000240:	e00f      	b.n	8000262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <SysTick_Config+0x40>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3b01      	subs	r3, #1
 8000248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800024a:	210f      	movs	r1, #15
 800024c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000250:	f7ff ffc2 	bl	80001d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <SysTick_Config+0x40>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <SysTick_Config+0x40>)
 800025c:	2207      	movs	r2, #7
 800025e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000260:	2300      	movs	r3, #0
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	e000e010 	.word	0xe000e010

08000270 <initialize_task>:
struct task tasks[TASKS_AMOUNT];

// amount of half seconds have passed
int ticks = 0;

void initialize_task(int pos, int delay, int period, fnPtr functionPtr) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	603b      	str	r3, [r7, #0]
	tasks[pos].delay = delay;
 800027e:	492d      	ldr	r1, [pc, #180]	; (8000334 <initialize_task+0xc4>)
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	4613      	mov	r3, r2
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	4413      	add	r3, r2
 8000288:	00db      	lsls	r3, r3, #3
 800028a:	440b      	add	r3, r1
 800028c:	3308      	adds	r3, #8
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	601a      	str	r2, [r3, #0]
	tasks[pos].delay_counter = tasks[pos].delay;
 8000292:	4928      	ldr	r1, [pc, #160]	; (8000334 <initialize_task+0xc4>)
 8000294:	68fa      	ldr	r2, [r7, #12]
 8000296:	4613      	mov	r3, r2
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	4413      	add	r3, r2
 800029c:	00db      	lsls	r3, r3, #3
 800029e:	440b      	add	r3, r1
 80002a0:	3308      	adds	r3, #8
 80002a2:	6819      	ldr	r1, [r3, #0]
 80002a4:	4823      	ldr	r0, [pc, #140]	; (8000334 <initialize_task+0xc4>)
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	4613      	mov	r3, r2
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	4413      	add	r3, r2
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	4403      	add	r3, r0
 80002b2:	330c      	adds	r3, #12
 80002b4:	6019      	str	r1, [r3, #0]
	tasks[pos].period = period;
 80002b6:	491f      	ldr	r1, [pc, #124]	; (8000334 <initialize_task+0xc4>)
 80002b8:	68fa      	ldr	r2, [r7, #12]
 80002ba:	4613      	mov	r3, r2
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	4413      	add	r3, r2
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	440b      	add	r3, r1
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	601a      	str	r2, [r3, #0]
	tasks[pos].counter = tasks[pos].period;
 80002c8:	491a      	ldr	r1, [pc, #104]	; (8000334 <initialize_task+0xc4>)
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	4613      	mov	r3, r2
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	4413      	add	r3, r2
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	440b      	add	r3, r1
 80002d6:	6819      	ldr	r1, [r3, #0]
 80002d8:	4816      	ldr	r0, [pc, #88]	; (8000334 <initialize_task+0xc4>)
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	4613      	mov	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	4413      	add	r3, r2
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	4403      	add	r3, r0
 80002e6:	3304      	adds	r3, #4
 80002e8:	6019      	str	r1, [r3, #0]
	tasks[pos].functionPtr = functionPtr;
 80002ea:	4912      	ldr	r1, [pc, #72]	; (8000334 <initialize_task+0xc4>)
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	4613      	mov	r3, r2
 80002f0:	005b      	lsls	r3, r3, #1
 80002f2:	4413      	add	r3, r2
 80002f4:	00db      	lsls	r3, r3, #3
 80002f6:	440b      	add	r3, r1
 80002f8:	3314      	adds	r3, #20
 80002fa:	683a      	ldr	r2, [r7, #0]
 80002fc:	601a      	str	r2, [r3, #0]
	tasks[pos].state = WAITING;
 80002fe:	490d      	ldr	r1, [pc, #52]	; (8000334 <initialize_task+0xc4>)
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	4613      	mov	r3, r2
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	4413      	add	r3, r2
 8000308:	00db      	lsls	r3, r3, #3
 800030a:	440b      	add	r3, r1
 800030c:	3310      	adds	r3, #16
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
	tasks[pos].led_state = OFF;
 8000312:	4908      	ldr	r1, [pc, #32]	; (8000334 <initialize_task+0xc4>)
 8000314:	68fa      	ldr	r2, [r7, #12]
 8000316:	4613      	mov	r3, r2
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	4413      	add	r3, r2
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	440b      	add	r3, r1
 8000320:	3311      	adds	r3, #17
 8000322:	2201      	movs	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	2000001c 	.word	0x2000001c

08000338 <runReadyTasks>:

// run all ready tasks
void runReadyTasks() {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
	for (int i = 0; i < TASKS_AMOUNT; i++) {
 800033e:	2300      	movs	r3, #0
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	e045      	b.n	80003d0 <runReadyTasks+0x98>
		//check if task is ready
		if (tasks[i].state == READY) {
 8000344:	4926      	ldr	r1, [pc, #152]	; (80003e0 <runReadyTasks+0xa8>)
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	4613      	mov	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	4413      	add	r3, r2
 800034e:	00db      	lsls	r3, r3, #3
 8000350:	440b      	add	r3, r1
 8000352:	3310      	adds	r3, #16
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d137      	bne.n	80003ca <runReadyTasks+0x92>
			// check if task has a valid pointer
			if (tasks[i].functionPtr != NULL) {
 800035a:	4921      	ldr	r1, [pc, #132]	; (80003e0 <runReadyTasks+0xa8>)
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	4613      	mov	r3, r2
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	4413      	add	r3, r2
 8000364:	00db      	lsls	r3, r3, #3
 8000366:	440b      	add	r3, r1
 8000368:	3314      	adds	r3, #20
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d02c      	beq.n	80003ca <runReadyTasks+0x92>
				tasks[i].functionPtr();
 8000370:	491b      	ldr	r1, [pc, #108]	; (80003e0 <runReadyTasks+0xa8>)
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	4613      	mov	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	440b      	add	r3, r1
 800037e:	3314      	adds	r3, #20
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4798      	blx	r3
				tasks[i].led_state = !tasks[i].led_state;
 8000384:	4916      	ldr	r1, [pc, #88]	; (80003e0 <runReadyTasks+0xa8>)
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	4613      	mov	r3, r2
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	4413      	add	r3, r2
 800038e:	00db      	lsls	r3, r3, #3
 8000390:	440b      	add	r3, r1
 8000392:	3311      	adds	r3, #17
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	bf0c      	ite	eq
 800039a:	2301      	moveq	r3, #1
 800039c:	2300      	movne	r3, #0
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	4618      	mov	r0, r3
 80003a2:	490f      	ldr	r1, [pc, #60]	; (80003e0 <runReadyTasks+0xa8>)
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	4613      	mov	r3, r2
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	4413      	add	r3, r2
 80003ac:	00db      	lsls	r3, r3, #3
 80003ae:	440b      	add	r3, r1
 80003b0:	3311      	adds	r3, #17
 80003b2:	4602      	mov	r2, r0
 80003b4:	701a      	strb	r2, [r3, #0]
				tasks[i].state = WAITING;
 80003b6:	490a      	ldr	r1, [pc, #40]	; (80003e0 <runReadyTasks+0xa8>)
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	4613      	mov	r3, r2
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	4413      	add	r3, r2
 80003c0:	00db      	lsls	r3, r3, #3
 80003c2:	440b      	add	r3, r1
 80003c4:	3310      	adds	r3, #16
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < TASKS_AMOUNT; i++) {
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3301      	adds	r3, #1
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b07      	cmp	r3, #7
 80003d4:	ddb6      	ble.n	8000344 <runReadyTasks+0xc>
			}
		}
	}
}
 80003d6:	bf00      	nop
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	2000001c 	.word	0x2000001c

080003e4 <toggleRed>:

void toggleRed() {
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_ODR_ODR_14;
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <toggleRed+0x1c>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <toggleRed+0x1c>)
 80003ee:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80003f2:	6153      	str	r3, [r2, #20]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40020c00 	.word	0x40020c00

08000404 <toggleGreen>:

void toggleGreen() {
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_ODR_ODR_12;
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <toggleGreen+0x1c>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <toggleGreen+0x1c>)
 800040e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000412:	6153      	str	r3, [r2, #20]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40020c00 	.word	0x40020c00

08000424 <toggleOrange>:

void toggleOrange() {
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_ODR_ODR_13;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <toggleOrange+0x1c>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <toggleOrange+0x1c>)
 800042e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000432:	6153      	str	r3, [r2, #20]
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40020c00 	.word	0x40020c00

08000444 <toggleBlue>:

void toggleBlue() {
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= GPIO_ODR_ODR_15;
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <toggleBlue+0x1c>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <toggleBlue+0x1c>)
 800044e:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000452:	6153      	str	r3, [r2, #20]
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40020c00 	.word	0x40020c00

08000464 <SysTick_Handler>:

// interrupt handler
void SysTick_Handler() {
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
	// increase amount of half seconds bassed
	ticks++;
 800046a:	4b5b      	ldr	r3, [pc, #364]	; (80005d8 <SysTick_Handler+0x174>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	3301      	adds	r3, #1
 8000470:	4a59      	ldr	r2, [pc, #356]	; (80005d8 <SysTick_Handler+0x174>)
 8000472:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < TASKS_AMOUNT; i++) {
 8000474:	2300      	movs	r3, #0
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	e0a2      	b.n	80005c0 <SysTick_Handler+0x15c>
		if (tasks[i].state == WAITING) {
 800047a:	4958      	ldr	r1, [pc, #352]	; (80005dc <SysTick_Handler+0x178>)
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	4613      	mov	r3, r2
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	4413      	add	r3, r2
 8000484:	00db      	lsls	r3, r3, #3
 8000486:	440b      	add	r3, r1
 8000488:	3310      	adds	r3, #16
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d14f      	bne.n	8000530 <SysTick_Handler+0xcc>
			tasks[i].counter--;
 8000490:	4952      	ldr	r1, [pc, #328]	; (80005dc <SysTick_Handler+0x178>)
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	4613      	mov	r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	440b      	add	r3, r1
 800049e:	3304      	adds	r3, #4
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	1e59      	subs	r1, r3, #1
 80004a4:	484d      	ldr	r0, [pc, #308]	; (80005dc <SysTick_Handler+0x178>)
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	4613      	mov	r3, r2
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	4413      	add	r3, r2
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	4403      	add	r3, r0
 80004b2:	3304      	adds	r3, #4
 80004b4:	6019      	str	r1, [r3, #0]
			if (tasks[i].counter == 0) {
 80004b6:	4949      	ldr	r1, [pc, #292]	; (80005dc <SysTick_Handler+0x178>)
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	4613      	mov	r3, r2
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	4413      	add	r3, r2
 80004c0:	00db      	lsls	r3, r3, #3
 80004c2:	440b      	add	r3, r1
 80004c4:	3304      	adds	r3, #4
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d176      	bne.n	80005ba <SysTick_Handler+0x156>
				if (tasks[i].led_state == OFF) {
 80004cc:	4943      	ldr	r1, [pc, #268]	; (80005dc <SysTick_Handler+0x178>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	4613      	mov	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	4413      	add	r3, r2
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	440b      	add	r3, r1
 80004da:	3311      	adds	r3, #17
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d10a      	bne.n	80004f8 <SysTick_Handler+0x94>
					tasks[i].state = DELAYING;
 80004e2:	493e      	ldr	r1, [pc, #248]	; (80005dc <SysTick_Handler+0x178>)
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	4613      	mov	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	4413      	add	r3, r2
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	440b      	add	r3, r1
 80004f0:	3310      	adds	r3, #16
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
 80004f6:	e009      	b.n	800050c <SysTick_Handler+0xa8>
				} else {
					tasks[i].state = READY;
 80004f8:	4938      	ldr	r1, [pc, #224]	; (80005dc <SysTick_Handler+0x178>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	4613      	mov	r3, r2
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	4413      	add	r3, r2
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	440b      	add	r3, r1
 8000506:	3310      	adds	r3, #16
 8000508:	2202      	movs	r2, #2
 800050a:	701a      	strb	r2, [r3, #0]
				}
				tasks[i].counter = tasks[i].period;
 800050c:	4933      	ldr	r1, [pc, #204]	; (80005dc <SysTick_Handler+0x178>)
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4613      	mov	r3, r2
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	4413      	add	r3, r2
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	440b      	add	r3, r1
 800051a:	6819      	ldr	r1, [r3, #0]
 800051c:	482f      	ldr	r0, [pc, #188]	; (80005dc <SysTick_Handler+0x178>)
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	4613      	mov	r3, r2
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	4413      	add	r3, r2
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	4403      	add	r3, r0
 800052a:	3304      	adds	r3, #4
 800052c:	6019      	str	r1, [r3, #0]
 800052e:	e044      	b.n	80005ba <SysTick_Handler+0x156>
			}
		} else if (tasks[i].state == DELAYING) {
 8000530:	492a      	ldr	r1, [pc, #168]	; (80005dc <SysTick_Handler+0x178>)
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4613      	mov	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	4413      	add	r3, r2
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	440b      	add	r3, r1
 800053e:	3310      	adds	r3, #16
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d139      	bne.n	80005ba <SysTick_Handler+0x156>
			tasks[i].delay_counter--;
 8000546:	4925      	ldr	r1, [pc, #148]	; (80005dc <SysTick_Handler+0x178>)
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4613      	mov	r3, r2
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	4413      	add	r3, r2
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	440b      	add	r3, r1
 8000554:	330c      	adds	r3, #12
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	1e59      	subs	r1, r3, #1
 800055a:	4820      	ldr	r0, [pc, #128]	; (80005dc <SysTick_Handler+0x178>)
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	4613      	mov	r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4413      	add	r3, r2
 8000564:	00db      	lsls	r3, r3, #3
 8000566:	4403      	add	r3, r0
 8000568:	330c      	adds	r3, #12
 800056a:	6019      	str	r1, [r3, #0]
			if (tasks[i].delay_counter == 0) {
 800056c:	491b      	ldr	r1, [pc, #108]	; (80005dc <SysTick_Handler+0x178>)
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4613      	mov	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	440b      	add	r3, r1
 800057a:	330c      	adds	r3, #12
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d11b      	bne.n	80005ba <SysTick_Handler+0x156>
				tasks[i].state = READY;
 8000582:	4916      	ldr	r1, [pc, #88]	; (80005dc <SysTick_Handler+0x178>)
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4613      	mov	r3, r2
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	4413      	add	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	440b      	add	r3, r1
 8000590:	3310      	adds	r3, #16
 8000592:	2202      	movs	r2, #2
 8000594:	701a      	strb	r2, [r3, #0]
				tasks[i].delay_counter = tasks[i].delay;
 8000596:	4911      	ldr	r1, [pc, #68]	; (80005dc <SysTick_Handler+0x178>)
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4613      	mov	r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	4413      	add	r3, r2
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	440b      	add	r3, r1
 80005a4:	3308      	adds	r3, #8
 80005a6:	6819      	ldr	r1, [r3, #0]
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <SysTick_Handler+0x178>)
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4613      	mov	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	4413      	add	r3, r2
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	4403      	add	r3, r0
 80005b6:	330c      	adds	r3, #12
 80005b8:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < TASKS_AMOUNT; i++) {
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3301      	adds	r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b07      	cmp	r3, #7
 80005c4:	f77f af59 	ble.w	800047a <SysTick_Handler+0x16>
			}
		}
	}
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200000dc 	.word	0x200000dc
 80005dc:	2000001c 	.word	0x2000001c

080005e0 <main>:

int main(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	// enable systick and interrupts
	SysTick_Config(16000); // interrupt every 1 ms
 80005e4:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80005e8:	f7ff fe20 	bl	800022c <SysTick_Config>

	// GPIO Port D Clock Enable
	RCC->AHB1ENR = RCC_AHB1ENR_GPIODEN;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <main+0x64>)
 80005ee:	2208      	movs	r2, #8
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30
	// GPIO Port D Pin 15 down to 12 Push/Pull Output
	GPIOD->MODER = GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <main+0x68>)
 80005f4:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
 80005f8:	601a      	str	r2, [r3, #0]
			| GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0;
	// Set green and red LEDs
	GPIOD->ODR = GPIO_ODR_ODR_14 | GPIO_ODR_ODR_12;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <main+0x68>)
 80005fc:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000600:	615a      	str	r2, [r3, #20]

	// initialize tasks with periods and functions
	initialize_task(0, 100, 200, &toggleGreen);
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <main+0x6c>)
 8000604:	22c8      	movs	r2, #200	; 0xc8
 8000606:	2164      	movs	r1, #100	; 0x64
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff fe31 	bl	8000270 <initialize_task>
	initialize_task(1, 200, 500, &toggleOrange);
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <main+0x70>)
 8000610:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000614:	21c8      	movs	r1, #200	; 0xc8
 8000616:	2001      	movs	r0, #1
 8000618:	f7ff fe2a 	bl	8000270 <initialize_task>
	initialize_task(2, 300, 750, &toggleRed);
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <main+0x74>)
 800061e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000622:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000626:	2002      	movs	r0, #2
 8000628:	f7ff fe22 	bl	8000270 <initialize_task>
	initialize_task(3, 900, 300, &toggleBlue);
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <main+0x78>)
 800062e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000632:	f44f 7161 	mov.w	r1, #900	; 0x384
 8000636:	2003      	movs	r0, #3
 8000638:	f7ff fe1a 	bl	8000270 <initialize_task>

	// Do forever:
	while (1) {
		// Wait a moment
		__WFI();
 800063c:	bf30      	wfi

		// run the tasks that are ready
		runReadyTasks();
 800063e:	f7ff fe7b 	bl	8000338 <runReadyTasks>
		__WFI();
 8000642:	e7fb      	b.n	800063c <main+0x5c>
 8000644:	40023800 	.word	0x40023800
 8000648:	40020c00 	.word	0x40020c00
 800064c:	08000405 	.word	0x08000405
 8000650:	08000425 	.word	0x08000425
 8000654:	080003e5 	.word	0x080003e5
 8000658:	08000445 	.word	0x08000445

0800065c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800065c:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000690 <LoopFillZerobss+0xe>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000662:	490d      	ldr	r1, [pc, #52]	; (8000698 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000668:	e002      	b.n	8000670 <LoopCopyDataInit>

0800066a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800066c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066e:	3304      	adds	r3, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000674:	d3f9      	bcc.n	800066a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000678:	4c0a      	ldr	r4, [pc, #40]	; (80006a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800067c:	e001      	b.n	8000682 <LoopFillZerobss>

0800067e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000680:	3204      	adds	r2, #4

08000682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000684:	d3fb      	bcc.n	800067e <FillZerobss>

/* Call the clock system intitialization function.*/
//  bl  SystemInit // BroJZ: not needed for minimal configuration
/* Call static constructors */
    bl __libc_init_array
 8000686:	f000 f811 	bl	80006ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800068a:	f7ff ffa9 	bl	80005e0 <main>
  bx  lr    
 800068e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800069c:	08000714 	.word	0x08000714
  ldr r2, =_sbss
 80006a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006a4:	200000e0 	.word	0x200000e0

080006a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC_IRQHandler>
	...

080006ac <__libc_init_array>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	4d0d      	ldr	r5, [pc, #52]	; (80006e4 <__libc_init_array+0x38>)
 80006b0:	4c0d      	ldr	r4, [pc, #52]	; (80006e8 <__libc_init_array+0x3c>)
 80006b2:	1b64      	subs	r4, r4, r5
 80006b4:	10a4      	asrs	r4, r4, #2
 80006b6:	2600      	movs	r6, #0
 80006b8:	42a6      	cmp	r6, r4
 80006ba:	d109      	bne.n	80006d0 <__libc_init_array+0x24>
 80006bc:	4d0b      	ldr	r5, [pc, #44]	; (80006ec <__libc_init_array+0x40>)
 80006be:	4c0c      	ldr	r4, [pc, #48]	; (80006f0 <__libc_init_array+0x44>)
 80006c0:	f000 f818 	bl	80006f4 <_init>
 80006c4:	1b64      	subs	r4, r4, r5
 80006c6:	10a4      	asrs	r4, r4, #2
 80006c8:	2600      	movs	r6, #0
 80006ca:	42a6      	cmp	r6, r4
 80006cc:	d105      	bne.n	80006da <__libc_init_array+0x2e>
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d4:	4798      	blx	r3
 80006d6:	3601      	adds	r6, #1
 80006d8:	e7ee      	b.n	80006b8 <__libc_init_array+0xc>
 80006da:	f855 3b04 	ldr.w	r3, [r5], #4
 80006de:	4798      	blx	r3
 80006e0:	3601      	adds	r6, #1
 80006e2:	e7f2      	b.n	80006ca <__libc_init_array+0x1e>
 80006e4:	0800070c 	.word	0x0800070c
 80006e8:	0800070c 	.word	0x0800070c
 80006ec:	0800070c 	.word	0x0800070c
 80006f0:	08000710 	.word	0x08000710

080006f4 <_init>:
 80006f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f6:	bf00      	nop
 80006f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006fa:	bc08      	pop	{r3}
 80006fc:	469e      	mov	lr, r3
 80006fe:	4770      	bx	lr

08000700 <_fini>:
 8000700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000702:	bf00      	nop
 8000704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000706:	bc08      	pop	{r3}
 8000708:	469e      	mov	lr, r3
 800070a:	4770      	bx	lr
