
msgqueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009210  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  080093b0  080093b0  000193b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009da8  08009da8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009da8  08009da8  00019da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009db0  08009db0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009db0  08009db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009db4  08009db4  00019db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c00  2000007c  08009e34  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  20004c7c  08009e34  00024c7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018629  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a45  00000000  00000000  000386d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003c120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003d590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004959  00000000  00000000  0003e868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181fe  00000000  00000000  000431c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097b2d  00000000  00000000  0005b3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2eec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000659c  00000000  00000000  000f2f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009398 	.word	0x08009398

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08009398 	.word	0x08009398

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ce:	f000 b9bf 	b.w	8000650 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b974 	b.w	8000650 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468e      	mov	lr, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d14d      	bne.n	800042a <__udivmoddi4+0xaa>
 800038e:	428a      	cmp	r2, r1
 8000390:	4694      	mov	ip, r2
 8000392:	d969      	bls.n	8000468 <__udivmoddi4+0xe8>
 8000394:	fab2 f282 	clz	r2, r2
 8000398:	b152      	cbz	r2, 80003b0 <__udivmoddi4+0x30>
 800039a:	fa01 f302 	lsl.w	r3, r1, r2
 800039e:	f1c2 0120 	rsb	r1, r2, #32
 80003a2:	fa20 f101 	lsr.w	r1, r0, r1
 80003a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003aa:	ea41 0e03 	orr.w	lr, r1, r3
 80003ae:	4094      	lsls	r4, r2
 80003b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003b4:	0c21      	lsrs	r1, r4, #16
 80003b6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ba:	fa1f f78c 	uxth.w	r7, ip
 80003be:	fb08 e316 	mls	r3, r8, r6, lr
 80003c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003c6:	fb06 f107 	mul.w	r1, r6, r7
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003d6:	f080 811f 	bcs.w	8000618 <__udivmoddi4+0x298>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 811c 	bls.w	8000618 <__udivmoddi4+0x298>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x92>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	f080 810a 	bcs.w	800061c <__udivmoddi4+0x29c>
 8000408:	42a7      	cmp	r7, r4
 800040a:	f240 8107 	bls.w	800061c <__udivmoddi4+0x29c>
 800040e:	4464      	add	r4, ip
 8000410:	3802      	subs	r0, #2
 8000412:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000416:	1be4      	subs	r4, r4, r7
 8000418:	2600      	movs	r6, #0
 800041a:	b11d      	cbz	r5, 8000424 <__udivmoddi4+0xa4>
 800041c:	40d4      	lsrs	r4, r2
 800041e:	2300      	movs	r3, #0
 8000420:	e9c5 4300 	strd	r4, r3, [r5]
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0xc2>
 800042e:	2d00      	cmp	r5, #0
 8000430:	f000 80ef 	beq.w	8000612 <__udivmoddi4+0x292>
 8000434:	2600      	movs	r6, #0
 8000436:	e9c5 0100 	strd	r0, r1, [r5]
 800043a:	4630      	mov	r0, r6
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	fab3 f683 	clz	r6, r3
 8000446:	2e00      	cmp	r6, #0
 8000448:	d14a      	bne.n	80004e0 <__udivmoddi4+0x160>
 800044a:	428b      	cmp	r3, r1
 800044c:	d302      	bcc.n	8000454 <__udivmoddi4+0xd4>
 800044e:	4282      	cmp	r2, r0
 8000450:	f200 80f9 	bhi.w	8000646 <__udivmoddi4+0x2c6>
 8000454:	1a84      	subs	r4, r0, r2
 8000456:	eb61 0303 	sbc.w	r3, r1, r3
 800045a:	2001      	movs	r0, #1
 800045c:	469e      	mov	lr, r3
 800045e:	2d00      	cmp	r5, #0
 8000460:	d0e0      	beq.n	8000424 <__udivmoddi4+0xa4>
 8000462:	e9c5 4e00 	strd	r4, lr, [r5]
 8000466:	e7dd      	b.n	8000424 <__udivmoddi4+0xa4>
 8000468:	b902      	cbnz	r2, 800046c <__udivmoddi4+0xec>
 800046a:	deff      	udf	#255	; 0xff
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	2a00      	cmp	r2, #0
 8000472:	f040 8092 	bne.w	800059a <__udivmoddi4+0x21a>
 8000476:	eba1 010c 	sub.w	r1, r1, ip
 800047a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	2601      	movs	r6, #1
 8000484:	0c20      	lsrs	r0, r4, #16
 8000486:	fbb1 f3f7 	udiv	r3, r1, r7
 800048a:	fb07 1113 	mls	r1, r7, r3, r1
 800048e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000492:	fb0e f003 	mul.w	r0, lr, r3
 8000496:	4288      	cmp	r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x12c>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x12a>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f200 80cb 	bhi.w	8000640 <__udivmoddi4+0x2c0>
 80004aa:	4643      	mov	r3, r8
 80004ac:	1a09      	subs	r1, r1, r0
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b4:	fb07 1110 	mls	r1, r7, r0, r1
 80004b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004bc:	fb0e fe00 	mul.w	lr, lr, r0
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x156>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004cc:	d202      	bcs.n	80004d4 <__udivmoddi4+0x154>
 80004ce:	45a6      	cmp	lr, r4
 80004d0:	f200 80bb 	bhi.w	800064a <__udivmoddi4+0x2ca>
 80004d4:	4608      	mov	r0, r1
 80004d6:	eba4 040e 	sub.w	r4, r4, lr
 80004da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x9a>
 80004e0:	f1c6 0720 	rsb	r7, r6, #32
 80004e4:	40b3      	lsls	r3, r6
 80004e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ee:	fa20 f407 	lsr.w	r4, r0, r7
 80004f2:	fa01 f306 	lsl.w	r3, r1, r6
 80004f6:	431c      	orrs	r4, r3
 80004f8:	40f9      	lsrs	r1, r7
 80004fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000502:	fbb1 f8f9 	udiv	r8, r1, r9
 8000506:	0c20      	lsrs	r0, r4, #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fb09 1118 	mls	r1, r9, r8, r1
 8000510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000514:	fb08 f00e 	mul.w	r0, r8, lr
 8000518:	4288      	cmp	r0, r1
 800051a:	fa02 f206 	lsl.w	r2, r2, r6
 800051e:	d90b      	bls.n	8000538 <__udivmoddi4+0x1b8>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000528:	f080 8088 	bcs.w	800063c <__udivmoddi4+0x2bc>
 800052c:	4288      	cmp	r0, r1
 800052e:	f240 8085 	bls.w	800063c <__udivmoddi4+0x2bc>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	1a09      	subs	r1, r1, r0
 800053a:	b2a4      	uxth	r4, r4
 800053c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000540:	fb09 1110 	mls	r1, r9, r0, r1
 8000544:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	458e      	cmp	lr, r1
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x1e2>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000558:	d26c      	bcs.n	8000634 <__udivmoddi4+0x2b4>
 800055a:	458e      	cmp	lr, r1
 800055c:	d96a      	bls.n	8000634 <__udivmoddi4+0x2b4>
 800055e:	3802      	subs	r0, #2
 8000560:	4461      	add	r1, ip
 8000562:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000566:	fba0 9402 	umull	r9, r4, r0, r2
 800056a:	eba1 010e 	sub.w	r1, r1, lr
 800056e:	42a1      	cmp	r1, r4
 8000570:	46c8      	mov	r8, r9
 8000572:	46a6      	mov	lr, r4
 8000574:	d356      	bcc.n	8000624 <__udivmoddi4+0x2a4>
 8000576:	d053      	beq.n	8000620 <__udivmoddi4+0x2a0>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x212>
 800057a:	ebb3 0208 	subs.w	r2, r3, r8
 800057e:	eb61 010e 	sbc.w	r1, r1, lr
 8000582:	fa01 f707 	lsl.w	r7, r1, r7
 8000586:	fa22 f306 	lsr.w	r3, r2, r6
 800058a:	40f1      	lsrs	r1, r6
 800058c:	431f      	orrs	r7, r3
 800058e:	e9c5 7100 	strd	r7, r1, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	40d8      	lsrs	r0, r3
 80005a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
 80005a8:	4091      	lsls	r1, r2
 80005aa:	4301      	orrs	r1, r0
 80005ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b0:	fa1f fe8c 	uxth.w	lr, ip
 80005b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005b8:	fb07 3610 	mls	r6, r7, r0, r3
 80005bc:	0c0b      	lsrs	r3, r1, #16
 80005be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005c2:	fb00 f60e 	mul.w	r6, r0, lr
 80005c6:	429e      	cmp	r6, r3
 80005c8:	fa04 f402 	lsl.w	r4, r4, r2
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x260>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005d6:	d22f      	bcs.n	8000638 <__udivmoddi4+0x2b8>
 80005d8:	429e      	cmp	r6, r3
 80005da:	d92d      	bls.n	8000638 <__udivmoddi4+0x2b8>
 80005dc:	3802      	subs	r0, #2
 80005de:	4463      	add	r3, ip
 80005e0:	1b9b      	subs	r3, r3, r6
 80005e2:	b289      	uxth	r1, r1
 80005e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005e8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f0:	fb06 f30e 	mul.w	r3, r6, lr
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d908      	bls.n	800060a <__udivmoddi4+0x28a>
 80005f8:	eb1c 0101 	adds.w	r1, ip, r1
 80005fc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000600:	d216      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 8000602:	428b      	cmp	r3, r1
 8000604:	d914      	bls.n	8000630 <__udivmoddi4+0x2b0>
 8000606:	3e02      	subs	r6, #2
 8000608:	4461      	add	r1, ip
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000610:	e738      	b.n	8000484 <__udivmoddi4+0x104>
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e705      	b.n	8000424 <__udivmoddi4+0xa4>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e3      	b.n	80003e4 <__udivmoddi4+0x64>
 800061c:	4618      	mov	r0, r3
 800061e:	e6f8      	b.n	8000412 <__udivmoddi4+0x92>
 8000620:	454b      	cmp	r3, r9
 8000622:	d2a9      	bcs.n	8000578 <__udivmoddi4+0x1f8>
 8000624:	ebb9 0802 	subs.w	r8, r9, r2
 8000628:	eb64 0e0c 	sbc.w	lr, r4, ip
 800062c:	3801      	subs	r0, #1
 800062e:	e7a3      	b.n	8000578 <__udivmoddi4+0x1f8>
 8000630:	4646      	mov	r6, r8
 8000632:	e7ea      	b.n	800060a <__udivmoddi4+0x28a>
 8000634:	4620      	mov	r0, r4
 8000636:	e794      	b.n	8000562 <__udivmoddi4+0x1e2>
 8000638:	4640      	mov	r0, r8
 800063a:	e7d1      	b.n	80005e0 <__udivmoddi4+0x260>
 800063c:	46d0      	mov	r8, sl
 800063e:	e77b      	b.n	8000538 <__udivmoddi4+0x1b8>
 8000640:	3b02      	subs	r3, #2
 8000642:	4461      	add	r1, ip
 8000644:	e732      	b.n	80004ac <__udivmoddi4+0x12c>
 8000646:	4630      	mov	r0, r6
 8000648:	e709      	b.n	800045e <__udivmoddi4+0xde>
 800064a:	4464      	add	r4, ip
 800064c:	3802      	subs	r0, #2
 800064e:	e742      	b.n	80004d6 <__udivmoddi4+0x156>

08000650 <__aeabi_idiv0>:
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <check_errno>:
struct character_mq {
	mqd_t *mgdesPtr;
	char c;
};

void check_errno(int error) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	if (error < 0) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	da03      	bge.n	800066a <check_errno+0x16>
		perror("Error");
 8000662:	4804      	ldr	r0, [pc, #16]	; (8000674 <check_errno+0x20>)
 8000664:	f007 f88a 	bl	800777c <perror>
		while (1)
 8000668:	e7fe      	b.n	8000668 <check_errno+0x14>
			;
	}
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	080093b0 	.word	0x080093b0

08000678 <check>:

void check(int error) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if (error != 0) {
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d008      	beq.n	8000698 <check+0x20>
		printf("Error: %s\n", strerror(error));
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f007 fb6a 	bl	8007d60 <strerror>
 800068c:	4603      	mov	r3, r0
 800068e:	4619      	mov	r1, r3
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <check+0x28>)
 8000692:	f007 f87b 	bl	800778c <iprintf>
		while (1)
 8000696:	e7fe      	b.n	8000696 <check+0x1e>
			;
	}
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	080093b8 	.word	0x080093b8

080006a4 <put>:
//sem_t semEmpty; // counting semaphore: counts the number of empty places
//sem_t semFilled; // counting semaphore: count the number of filled places
//sem_t semPrintf; // binary semaphore: used for mutual exclusive use of printf
pthread_mutex_t m;

void put(char c, mqd_t *mqd) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
//    check_errno( sem_wait(&semEmpty) ); // lower the number of empty places, WAIT if there are no free places left!
//    check_errno( sem_wait(&semMutualExclusive) ); // enter critical region
//    buffer[indexPut] = c;
	check_errno(mq_send(*mqd, &c, sizeof(c), 0));
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	1df9      	adds	r1, r7, #7
 80006b6:	2300      	movs	r3, #0
 80006b8:	2201      	movs	r2, #1
 80006ba:	f005 fb61 	bl	8005d80 <mq_send>
 80006be:	4603      	mov	r3, r0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffc7 	bl	8000654 <check_errno>
//	if (indexPut == SIZE) {
//		indexPut = 0;
//	}
//    check_errno( sem_post(&semMutualExclusive) ); // leave critical region
//    check_errno( sem_post(&semFilled) ); // increase the number of filled places
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <get>:

char get(mqd_t *mq) {
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
//    check_errno( sem_wait(&semFilled) ); // lower the number of filled places, WAIT if there are no filled places left!
//    check_errno( sem_wait(&semMutualExclusive) ); // enter critical region
//    char c = buffer[indexGet];
	char msg;
	check_errno(mq_receive(*mq, (char*) &msg, sizeof(msg), NULL));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6818      	ldr	r0, [r3, #0]
 80006da:	f107 010f 	add.w	r1, r7, #15
 80006de:	2300      	movs	r3, #0
 80006e0:	2201      	movs	r2, #1
 80006e2:	f005 fb39 	bl	8005d58 <mq_receive>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffb3 	bl	8000654 <check_errno>
//	if (indexGet == SIZE) {
//		indexGet = 0;
//	}
//    check_errno( sem_post(&semMutualExclusive) ); // leave critical region
//    check_errno( sem_post(&semEmpty) ); // increase the number of empty places
	return msg;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <producer>:

void* producer(void *arg) // function for producer thread
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	struct character_mq cmq = *(struct character_mq*) arg;
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	e892 0003 	ldmia.w	r2, {r0, r1}
 800070a:	e883 0003 	stmia.w	r3, {r0, r1}
	pthread_mutex_lock(&m);
 800070e:	481b      	ldr	r0, [pc, #108]	; (800077c <producer+0x84>)
 8000710:	f005 fec6 	bl	80064a0 <pthread_mutex_lock>
	check_errno(
 8000714:	f005 fe42 	bl	800639c <pthread_self>
 8000718:	4603      	mov	r3, r0
			printf("Thread: %p with argument: %c starts\n", pthread_self(),
					cmq.c));
 800071a:	7c3a      	ldrb	r2, [r7, #16]
	check_errno(
 800071c:	4619      	mov	r1, r3
 800071e:	4818      	ldr	r0, [pc, #96]	; (8000780 <producer+0x88>)
 8000720:	f007 f834 	bl	800778c <iprintf>
 8000724:	4603      	mov	r3, r0
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff94 	bl	8000654 <check_errno>
	pthread_mutex_unlock(&m);
 800072c:	4813      	ldr	r0, [pc, #76]	; (800077c <producer+0x84>)
 800072e:	f005 ff42 	bl	80065b6 <pthread_mutex_unlock>
	for (int i = 0; i < 100; ++i) {
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e008      	b.n	800074a <producer+0x52>
		put(cmq.c, cmq.mgdesPtr);
 8000738:	7c3b      	ldrb	r3, [r7, #16]
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4611      	mov	r1, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ffb0 	bl	80006a4 <put>
	for (int i = 0; i < 100; ++i) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	2b63      	cmp	r3, #99	; 0x63
 800074e:	ddf3      	ble.n	8000738 <producer+0x40>
	}
	pthread_mutex_lock(&m);
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <producer+0x84>)
 8000752:	f005 fea5 	bl	80064a0 <pthread_mutex_lock>
	check_errno(printf("Thread: %p stops\n", pthread_self()));
 8000756:	f005 fe21 	bl	800639c <pthread_self>
 800075a:	4603      	mov	r3, r0
 800075c:	4619      	mov	r1, r3
 800075e:	4809      	ldr	r0, [pc, #36]	; (8000784 <producer+0x8c>)
 8000760:	f007 f814 	bl	800778c <iprintf>
 8000764:	4603      	mov	r3, r0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff74 	bl	8000654 <check_errno>
	pthread_mutex_unlock(&m);
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <producer+0x84>)
 800076e:	f005 ff22 	bl	80065b6 <pthread_mutex_unlock>
	return NULL;
 8000772:	2300      	movs	r3, #0
}
 8000774:	4618      	mov	r0, r3
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000098 	.word	0x20000098
 8000780:	080093c4 	.word	0x080093c4
 8000784:	080093ec 	.word	0x080093ec

08000788 <consumer>:

void* consumer(void *arg) // function for consumer thread
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	mqd_t mq = *(mqd_t*) arg;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60fb      	str	r3, [r7, #12]
	pthread_mutex_lock(&m);
 8000796:	4828      	ldr	r0, [pc, #160]	; (8000838 <consumer+0xb0>)
 8000798:	f005 fe82 	bl	80064a0 <pthread_mutex_lock>
	check_errno(printf("Thread: %p starts\n", pthread_self()));
 800079c:	f005 fdfe 	bl	800639c <pthread_self>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4619      	mov	r1, r3
 80007a4:	4825      	ldr	r0, [pc, #148]	; (800083c <consumer+0xb4>)
 80007a6:	f006 fff1 	bl	800778c <iprintf>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff51 	bl	8000654 <check_errno>
	pthread_mutex_unlock(&m);
 80007b2:	4821      	ldr	r0, [pc, #132]	; (8000838 <consumer+0xb0>)
 80007b4:	f005 feff 	bl	80065b6 <pthread_mutex_unlock>
	for (int i = 0; i < 200; ++i) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	e022      	b.n	8000804 <consumer+0x7c>
		char c = get(&mq);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff83 	bl	80006ce <get>
 80007c8:	4603      	mov	r3, r0
 80007ca:	74fb      	strb	r3, [r7, #19]
		pthread_mutex_lock(&m);
 80007cc:	481a      	ldr	r0, [pc, #104]	; (8000838 <consumer+0xb0>)
 80007ce:	f005 fe67 	bl	80064a0 <pthread_mutex_lock>
		check_errno(printf("%c", c));
 80007d2:	7cfb      	ldrb	r3, [r7, #19]
 80007d4:	4619      	mov	r1, r3
 80007d6:	481a      	ldr	r0, [pc, #104]	; (8000840 <consumer+0xb8>)
 80007d8:	f006 ffd8 	bl	800778c <iprintf>
 80007dc:	4603      	mov	r3, r0
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff38 	bl	8000654 <check_errno>
		check_errno(fflush(stdout));
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <consumer+0xbc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 fcea 	bl	80071c4 <fflush>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff2e 	bl	8000654 <check_errno>
		pthread_mutex_unlock(&m);
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <consumer+0xb0>)
 80007fa:	f005 fedc 	bl	80065b6 <pthread_mutex_unlock>
	for (int i = 0; i < 200; ++i) {
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	2bc7      	cmp	r3, #199	; 0xc7
 8000808:	ddd9      	ble.n	80007be <consumer+0x36>
	}
	pthread_mutex_lock(&m);
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <consumer+0xb0>)
 800080c:	f005 fe48 	bl	80064a0 <pthread_mutex_lock>
	check_errno(printf("Thread: %p stops\n", pthread_self()));
 8000810:	f005 fdc4 	bl	800639c <pthread_self>
 8000814:	4603      	mov	r3, r0
 8000816:	4619      	mov	r1, r3
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <consumer+0xc0>)
 800081a:	f006 ffb7 	bl	800778c <iprintf>
 800081e:	4603      	mov	r3, r0
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff17 	bl	8000654 <check_errno>
	pthread_mutex_unlock(&m);
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <consumer+0xb0>)
 8000828:	f005 fec5 	bl	80065b6 <pthread_mutex_unlock>
	return NULL;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000098 	.word	0x20000098
 800083c:	08009400 	.word	0x08009400
 8000840:	08009414 	.word	0x08009414
 8000844:	20000018 	.word	0x20000018
 8000848:	080093ec 	.word	0x080093ec

0800084c <read_prio>:

int read_prio(char *process_name) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	int prio;
	do {
		check_errno(
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <read_prio+0x54>)
 8000858:	f006 ff98 	bl	800778c <iprintf>
 800085c:	4603      	mov	r3, r0
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fef8 	bl	8000654 <check_errno>
				printf("Enter priority for process %s [1..15]: ",
						process_name));
		check_errno(fflush(stdout));
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <read_prio+0x58>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	4618      	mov	r0, r3
 800086c:	f006 fcaa 	bl	80071c4 <fflush>
 8000870:	4603      	mov	r3, r0
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff feee 	bl	8000654 <check_errno>
	} while (scanf("%d", &prio) != 1 || prio < 1 || prio > 15);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	480a      	ldr	r0, [pc, #40]	; (80008a8 <read_prio+0x5c>)
 8000880:	f007 f82c 	bl	80078dc <iscanf>
 8000884:	4603      	mov	r3, r0
 8000886:	2b01      	cmp	r3, #1
 8000888:	d1e4      	bne.n	8000854 <read_prio+0x8>
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	dde1      	ble.n	8000854 <read_prio+0x8>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b0f      	cmp	r3, #15
 8000894:	dcde      	bgt.n	8000854 <read_prio+0x8>
	return prio;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	08009418 	.word	0x08009418
 80008a4:	20000018 	.word	0x20000018
 80008a8:	08009440 	.word	0x08009440

080008ac <main_thread>:

void* main_thread(void *arg) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b098      	sub	sp, #96	; 0x60
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	mqd_t mqdes;
	struct mq_attr mqAttrs;
	mqAttrs.mq_maxmsg = 8;
 80008b4:	2308      	movs	r3, #8
 80008b6:	647b      	str	r3, [r7, #68]	; 0x44
	mqAttrs.mq_msgsize = sizeof(char);
 80008b8:	2301      	movs	r3, #1
 80008ba:	64bb      	str	r3, [r7, #72]	; 0x48
	mqAttrs.mq_flags = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	643b      	str	r3, [r7, #64]	; 0x40
	check_errno(
			(int) (mqdes = mq_open("/snacks", O_RDWR | O_CREAT, 0666, &mqAttrs)));
 80008c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008c4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80008c8:	f24a 0102 	movw	r1, #40962	; 0xa002
 80008cc:	48a2      	ldr	r0, [pc, #648]	; (8000b58 <main_thread+0x2ac>)
 80008ce:	f005 f99b 	bl	8005c08 <mq_open>
 80008d2:	4603      	mov	r3, r0
 80008d4:	653b      	str	r3, [r7, #80]	; 0x50
 80008d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	check_errno(
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff febb 	bl	8000654 <check_errno>

	pthread_mutexattr_t ma;
	check(pthread_mutexattr_init(&ma));
 80008de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008e2:	4618      	mov	r0, r3
 80008e4:	f005 feb3 	bl	800664e <pthread_mutexattr_init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fec4 	bl	8000678 <check>
	check(pthread_mutex_init(&m, &ma));
 80008f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008f4:	4619      	mov	r1, r3
 80008f6:	4899      	ldr	r0, [pc, #612]	; (8000b5c <main_thread+0x2b0>)
 80008f8:	f005 fd8c 	bl	8006414 <pthread_mutex_init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff feba 	bl	8000678 <check>

	int prioc = read_prio("Consumer");
 8000904:	4896      	ldr	r0, [pc, #600]	; (8000b60 <main_thread+0x2b4>)
 8000906:	f7ff ffa1 	bl	800084c <read_prio>
 800090a:	65f8      	str	r0, [r7, #92]	; 0x5c
	int priop1 = read_prio("Frikandel Producer");
 800090c:	4895      	ldr	r0, [pc, #596]	; (8000b64 <main_thread+0x2b8>)
 800090e:	f7ff ff9d 	bl	800084c <read_prio>
 8000912:	65b8      	str	r0, [r7, #88]	; 0x58
	int priop2 = read_prio("Kroket Producer");
 8000914:	4894      	ldr	r0, [pc, #592]	; (8000b68 <main_thread+0x2bc>)
 8000916:	f7ff ff99 	bl	800084c <read_prio>
 800091a:	6578      	str	r0, [r7, #84]	; 0x54

	check_errno(printf("Output for Consumer priority = %d ", prioc));
 800091c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800091e:	4893      	ldr	r0, [pc, #588]	; (8000b6c <main_thread+0x2c0>)
 8000920:	f006 ff34 	bl	800778c <iprintf>
 8000924:	4603      	mov	r3, r0
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe94 	bl	8000654 <check_errno>
	check_errno(printf("frikandel Producer priority = %d ", priop1));
 800092c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800092e:	4890      	ldr	r0, [pc, #576]	; (8000b70 <main_thread+0x2c4>)
 8000930:	f006 ff2c 	bl	800778c <iprintf>
 8000934:	4603      	mov	r3, r0
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fe8c 	bl	8000654 <check_errno>
	check_errno(printf("Kroket Producer priority = %d\n", priop2));
 800093c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800093e:	488d      	ldr	r0, [pc, #564]	; (8000b74 <main_thread+0x2c8>)
 8000940:	f006 ff24 	bl	800778c <iprintf>
 8000944:	4603      	mov	r3, r0
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe84 	bl	8000654 <check_errno>

	pthread_attr_t ptac, ptap1, ptap2;
	check(pthread_attr_init(&ptac));
 800094c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000950:	4618      	mov	r0, r3
 8000952:	f005 fb9d 	bl	8006090 <pthread_attr_init>
 8000956:	4603      	mov	r3, r0
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe8d 	bl	8000678 <check>
	check(pthread_attr_init(&ptap1));
 800095e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000962:	4618      	mov	r0, r3
 8000964:	f005 fb94 	bl	8006090 <pthread_attr_init>
 8000968:	4603      	mov	r3, r0
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fe84 	bl	8000678 <check>
	check(pthread_attr_init(&ptap2));
 8000970:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000974:	4618      	mov	r0, r3
 8000976:	f005 fb8b 	bl	8006090 <pthread_attr_init>
 800097a:	4603      	mov	r3, r0
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fe7b 	bl	8000678 <check>

	check(pthread_attr_setstacksize(&ptac, 1024));
 8000982:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098a:	4618      	mov	r0, r3
 800098c:	f005 fbf7 	bl	800617e <pthread_attr_setstacksize>
 8000990:	4603      	mov	r3, r0
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fe70 	bl	8000678 <check>
	check(pthread_attr_setstacksize(&ptap1, 1024));
 8000998:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800099c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a0:	4618      	mov	r0, r3
 80009a2:	f005 fbec 	bl	800617e <pthread_attr_setstacksize>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fe65 	bl	8000678 <check>
	check(pthread_attr_setstacksize(&ptap2, 1024));
 80009ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b6:	4618      	mov	r0, r3
 80009b8:	f005 fbe1 	bl	800617e <pthread_attr_setstacksize>
 80009bc:	4603      	mov	r3, r0
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe5a 	bl	8000678 <check>

	struct sched_param spc, spp1, spp2;
	check(pthread_attr_getschedparam(&ptac, &spc));
 80009c4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80009c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f005 fb4a 	bl	8006068 <pthread_attr_getschedparam>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fe4e 	bl	8000678 <check>
	check(pthread_attr_getschedparam(&ptap1, &spp1));
 80009dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f005 fb3e 	bl	8006068 <pthread_attr_getschedparam>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fe42 	bl	8000678 <check>
	check(pthread_attr_getschedparam(&ptap2, &spp2));
 80009f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f005 fb32 	bl	8006068 <pthread_attr_getschedparam>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe36 	bl	8000678 <check>

	spc.sched_priority = prioc;
 8000a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	spp1.sched_priority = priop1;
 8000a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
	spp2.sched_priority = priop2;
 8000a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24

	check(pthread_attr_setschedparam(&ptac, &spc));
 8000a18:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000a1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f005 fb72 	bl	800610c <pthread_attr_setschedparam>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fe24 	bl	8000678 <check>
	check(pthread_attr_setschedparam(&ptap1, &spp1));
 8000a30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f005 fb66 	bl	800610c <pthread_attr_setschedparam>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fe18 	bl	8000678 <check>
	check(pthread_attr_setschedparam(&ptap2, &spp2));
 8000a48:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f005 fb5a 	bl	800610c <pthread_attr_setschedparam>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fe0c 	bl	8000678 <check>

	pthread_t ptc, ptp1, ptp2;
	struct character_mq frikandelMq = { &mqdes, 'F' };
 8000a60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	2346      	movs	r3, #70	; 0x46
 8000a68:	753b      	strb	r3, [r7, #20]
	struct character_mq kroketMq = { &mqdes, 'K' };
 8000a6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	234b      	movs	r3, #75	; 0x4b
 8000a72:	733b      	strb	r3, [r7, #12]
	check(pthread_create(&ptc, &ptac, consumer, &mqdes));
 8000a74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a78:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000a7c:	f107 0020 	add.w	r0, r7, #32
 8000a80:	4a3d      	ldr	r2, [pc, #244]	; (8000b78 <main_thread+0x2cc>)
 8000a82:	f005 fb97 	bl	80061b4 <pthread_create>
 8000a86:	4603      	mov	r3, r0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fdf5 	bl	8000678 <check>
	check(pthread_create(&ptp1, &ptap1, producer, &frikandelMq));
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000a96:	f107 001c 	add.w	r0, r7, #28
 8000a9a:	4a38      	ldr	r2, [pc, #224]	; (8000b7c <main_thread+0x2d0>)
 8000a9c:	f005 fb8a 	bl	80061b4 <pthread_create>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fde8 	bl	8000678 <check>
	check(pthread_create(&ptp2, &ptap2, producer, &kroketMq));
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ab0:	f107 0018 	add.w	r0, r7, #24
 8000ab4:	4a31      	ldr	r2, [pc, #196]	; (8000b7c <main_thread+0x2d0>)
 8000ab6:	f005 fb7d 	bl	80061b4 <pthread_create>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fddb 	bl	8000678 <check>

	check(pthread_join(ptc, NULL));
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f005 fbfe 	bl	80062c8 <pthread_join>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fdd2 	bl	8000678 <check>
	check(pthread_join(ptp1, NULL));
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f005 fbf5 	bl	80062c8 <pthread_join>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fdc9 	bl	8000678 <check>
	check(pthread_join(ptp2, NULL));
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f005 fbec 	bl	80062c8 <pthread_join>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fdc0 	bl	8000678 <check>

	check(pthread_attr_destroy(&ptac));
 8000af8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 faa8 	bl	8006052 <pthread_attr_destroy>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fdb7 	bl	8000678 <check>
	check(pthread_attr_destroy(&ptap1));
 8000b0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f005 fa9f 	bl	8006052 <pthread_attr_destroy>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fdae 	bl	8000678 <check>
	check(pthread_attr_destroy(&ptap2));
 8000b1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 fa96 	bl	8006052 <pthread_attr_destroy>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fda5 	bl	8000678 <check>

	check(pthread_mutexattr_destroy(&ma));
 8000b2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 fd80 	bl	8006638 <pthread_mutexattr_destroy>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fd9c 	bl	8000678 <check>
	check(pthread_mutex_destroy(&m));
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <main_thread+0x2b0>)
 8000b42:	f005 fc53 	bl	80063ec <pthread_mutex_destroy>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fd95 	bl	8000678 <check>

	return NULL;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3760      	adds	r7, #96	; 0x60
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	08009444 	.word	0x08009444
 8000b5c:	20000098 	.word	0x20000098
 8000b60:	0800944c 	.word	0x0800944c
 8000b64:	08009458 	.word	0x08009458
 8000b68:	0800946c 	.word	0x0800946c
 8000b6c:	0800947c 	.word	0x0800947c
 8000b70:	080094a0 	.word	0x080094a0
 8000b74:	080094c4 	.word	0x080094c4
 8000b78:	08000789 	.word	0x08000789
 8000b7c:	080006f9 	.word	0x080006f9

08000b80 <main>:

int main(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
	Board_Init();
 8000b86:	f000 f8ff 	bl	8000d88 <Board_Init>

	pthread_attr_t pta;
	check(pthread_attr_init(&pta));
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f005 fa7e 	bl	8006090 <pthread_attr_init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fd6e 	bl	8000678 <check>
	check(pthread_attr_setdetachstate(&pta, PTHREAD_CREATE_DETACHED));
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f005 fa86 	bl	80060b4 <pthread_attr_setdetachstate>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd64 	bl	8000678 <check>
	check(pthread_attr_setstacksize(&pta, 1024));
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f005 fae0 	bl	800617e <pthread_attr_setstacksize>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fd59 	bl	8000678 <check>

	struct sched_param sp;
	check(pthread_attr_getschedparam(&pta, &sp));
 8000bc6:	f107 0208 	add.w	r2, r7, #8
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f005 fa49 	bl	8006068 <pthread_attr_getschedparam>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fd4d 	bl	8000678 <check>
	// The main thread must have the highest priority because this thread will start
	// the other threads and we want to study the interaction between those other threads
	sp.sched_priority = 15;
 8000bde:	230f      	movs	r3, #15
 8000be0:	60bb      	str	r3, [r7, #8]
	check(pthread_attr_setschedparam(&pta, &sp));
 8000be2:	f107 0208 	add.w	r2, r7, #8
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f005 fa8d 	bl	800610c <pthread_attr_setschedparam>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fd3f 	bl	8000678 <check>

	pthread_t pt;
	check(pthread_create(&pt, &pta, main_thread, NULL));
 8000bfa:	f107 010c 	add.w	r1, r7, #12
 8000bfe:	1d38      	adds	r0, r7, #4
 8000c00:	2300      	movs	r3, #0
 8000c02:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <main+0xb8>)
 8000c04:	f005 fad6 	bl	80061b4 <pthread_create>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fd34 	bl	8000678 <check>

	printf("\n");
 8000c10:	200a      	movs	r0, #10
 8000c12:	f006 fdd3 	bl	80077bc <putchar>
	vTaskStartScheduler();
 8000c16:	f002 ffe3 	bl	8003be0 <vTaskStartScheduler>
	/* We should never get here as control is now taken by the scheduler */

	check(pthread_attr_destroy(&pta));
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f005 fa17 	bl	8006052 <pthread_attr_destroy>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fd26 	bl	8000678 <check>

	return EXIT_SUCCESS;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	080008ad 	.word	0x080008ad

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_MspInit+0x54>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <HAL_MspInit+0x54>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_MspInit+0x54>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_MspInit+0x54>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_MspInit+0x54>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_MspInit+0x54>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	210f      	movs	r1, #15
 8000c7e:	f06f 0001 	mvn.w	r0, #1
 8000c82:	f000 fbc3 	bl	800140c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	; 0x30
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	2019      	movs	r0, #25
 8000caa:	f000 fbaf 	bl	800140c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cae:	2019      	movs	r0, #25
 8000cb0:	f000 fbc8 	bl	8001444 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <HAL_InitTick+0xa4>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <HAL_InitTick+0xa4>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <HAL_InitTick+0xa4>)
 8000cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd0:	f107 0210 	add.w	r2, r7, #16
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 f9e2 	bl	80020a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ce0:	f001 f9cc 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cec:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <HAL_InitTick+0xa8>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	0c9b      	lsrs	r3, r3, #18
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_InitTick+0xac>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <HAL_InitTick+0xb0>)
 8000cfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <HAL_InitTick+0xac>)
 8000d00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_InitTick+0xac>)
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_InitTick+0xac>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_InitTick+0xac>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <HAL_InitTick+0xac>)
 8000d1a:	f001 f9f5 	bl	8002108 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d104      	bne.n	8000d2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <HAL_InitTick+0xac>)
 8000d26:	f001 fa49 	bl	80021bc <HAL_TIM_Base_Start_IT>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3730      	adds	r7, #48	; 0x30
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	431bde83 	.word	0x431bde83
 8000d40:	200000f4 	.word	0x200000f4
 8000d44:	40010000 	.word	0x40010000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d7a:	f001 fa81 	bl	8002280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000f4 	.word	0x200000f4

08000d88 <Board_Init>:

extern void initialise_monitor_handles(void);
static void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void Board_Init(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000d8c:	f006 f8d6 	bl	8006f3c <initialise_monitor_handles>
	HAL_Init();
 8000d90:	f000 fa42 	bl	8001218 <HAL_Init>
	SystemClock_Config();
 8000d94:	f000 f824 	bl	8000de0 <SystemClock_Config>
	MX_GPIO_Init();
 8000d98:	f000 f88c 	bl	8000eb4 <MX_GPIO_Init>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_sbrk>:

// Own implementation of_sbrk is needed to prevent error when printf is used from within a thread
// https://mcuoneclipse.com/2015/07/26/using-kinetis-design-studio-v3-0-0-with-the-launchad-4-9-2015-q2-release/
void *_sbrk ( uint32_t delta )
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	extern char _end; /* Defined by the linker */
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <_sbrk+0x38>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x16>
		heap_end = &_end;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <_sbrk+0x38>)
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <_sbrk+0x3c>)
 8000db4:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x38>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	60fb      	str	r3, [r7, #12]
	heap_end += delta;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <_sbrk+0x38>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <_sbrk+0x38>)
 8000dc6:	6013      	str	r3, [r2, #0]
	return (void *) prev_heap_end;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000013c 	.word	0x2000013c
 8000ddc:	20004c80 	.word	0x20004c80

08000de0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
static void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	; 0x50
 8000de4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	2230      	movs	r2, #48	; 0x30
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f006 fb41 	bl	8007476 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <SystemClock_Config+0xcc>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	4a27      	ldr	r2, [pc, #156]	; (8000eac <SystemClock_Config+0xcc>)
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e12:	6413      	str	r3, [r2, #64]	; 0x40
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <SystemClock_Config+0xcc>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <SystemClock_Config+0xd0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a21      	ldr	r2, [pc, #132]	; (8000eb0 <SystemClock_Config+0xd0>)
 8000e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <SystemClock_Config+0xd0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e44:	2310      	movs	r3, #16
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e50:	2308      	movs	r3, #8
 8000e52:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000e54:	23c0      	movs	r3, #192	; 0xc0
 8000e56:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e60:	f107 0320 	add.w	r3, r7, #32
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fc99 	bl	800179c <HAL_RCC_OscConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000e70:	f000 f990 	bl	8001194 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
 8000e76:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e84:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2103      	movs	r1, #3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fefa 	bl	8001c8c <HAL_RCC_ClockConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000e9e:	f000 f979 	bl	8001194 <Error_Handler>
	}
}
 8000ea2:	bf00      	nop
 8000ea4:	3750      	adds	r7, #80	; 0x50
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40007000 	.word	0x40007000

08000eb4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08c      	sub	sp, #48	; 0x30
 8000eb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
 8000ece:	4ba2      	ldr	r3, [pc, #648]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4aa1      	ldr	r2, [pc, #644]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b9f      	ldr	r3, [pc, #636]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	4b9b      	ldr	r3, [pc, #620]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a9a      	ldr	r2, [pc, #616]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b98      	ldr	r3, [pc, #608]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b94      	ldr	r3, [pc, #592]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a93      	ldr	r2, [pc, #588]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b91      	ldr	r3, [pc, #580]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b8d      	ldr	r3, [pc, #564]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a8c      	ldr	r2, [pc, #560]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b8a      	ldr	r3, [pc, #552]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b86      	ldr	r3, [pc, #536]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a85      	ldr	r2, [pc, #532]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b83      	ldr	r3, [pc, #524]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b7f      	ldr	r3, [pc, #508]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a7e      	ldr	r2, [pc, #504]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b7c      	ldr	r3, [pc, #496]	; (8001158 <MX_GPIO_Init+0x2a4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2108      	movs	r1, #8
 8000f76:	4879      	ldr	r0, [pc, #484]	; (800115c <MX_GPIO_Init+0x2a8>)
 8000f78:	f000 fbf6 	bl	8001768 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4877      	ldr	r0, [pc, #476]	; (8001160 <MX_GPIO_Init+0x2ac>)
 8000f82:	f000 fbf1 	bl	8001768 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f86:	2200      	movs	r2, #0
 8000f88:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000f8c:	4875      	ldr	r0, [pc, #468]	; (8001164 <MX_GPIO_Init+0x2b0>)
 8000f8e:	f000 fbeb 	bl	8001768 <HAL_GPIO_WritePin>
			|Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : PE2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f92:	2304      	movs	r3, #4
 8000f94:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	486d      	ldr	r0, [pc, #436]	; (800115c <MX_GPIO_Init+0x2a8>)
 8000fa6:	f000 fa5b 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000faa:	2308      	movs	r3, #8
 8000fac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4866      	ldr	r0, [pc, #408]	; (800115c <MX_GPIO_Init+0x2a8>)
 8000fc2:	f000 fa4d 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000fc6:	2332      	movs	r3, #50	; 0x32
 8000fc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4860      	ldr	r0, [pc, #384]	; (800115c <MX_GPIO_Init+0x2a8>)
 8000fdc:	f000 fa40 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	485a      	ldr	r0, [pc, #360]	; (8001160 <MX_GPIO_Init+0x2ac>)
 8000ff8:	f000 fa32 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800100c:	2305      	movs	r3, #5
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4852      	ldr	r0, [pc, #328]	; (8001160 <MX_GPIO_Init+0x2ac>)
 8001018:	f000 fa22 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001020:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001024:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	484d      	ldr	r0, [pc, #308]	; (8001168 <MX_GPIO_Init+0x2b4>)
 8001032:	f000 fa15 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001036:	2310      	movs	r3, #16
 8001038:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001046:	2306      	movs	r3, #6
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4845      	ldr	r0, [pc, #276]	; (8001168 <MX_GPIO_Init+0x2b4>)
 8001052:	f000 fa05 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001056:	23e0      	movs	r3, #224	; 0xe0
 8001058:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001066:	2305      	movs	r3, #5
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	483d      	ldr	r0, [pc, #244]	; (8001168 <MX_GPIO_Init+0x2b4>)
 8001072:	f000 f9f5 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pins : CLK_IN_Pin PB12 */
	GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001076:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800107a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001088:	2305      	movs	r3, #5
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4836      	ldr	r0, [pc, #216]	; (800116c <MX_GPIO_Init+0x2b8>)
 8001094:	f000 f9e4 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001098:	f24f 0310 	movw	r3, #61456	; 0xf010
 800109c:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	482c      	ldr	r0, [pc, #176]	; (8001164 <MX_GPIO_Init+0x2b0>)
 80010b2:	f000 f9d5 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010b6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010c8:	2306      	movs	r3, #6
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4823      	ldr	r0, [pc, #140]	; (8001160 <MX_GPIO_Init+0x2ac>)
 80010d4:	f000 f9c4 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80010d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_GPIO_Init+0x2b4>)
 80010ee:	f000 f9b7 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80010f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001104:	230a      	movs	r3, #10
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4816      	ldr	r0, [pc, #88]	; (8001168 <MX_GPIO_Init+0x2b4>)
 8001110:	f000 f9a6 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001114:	2320      	movs	r3, #32
 8001116:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	480f      	ldr	r0, [pc, #60]	; (8001164 <MX_GPIO_Init+0x2b0>)
 8001128:	f000 f99a 	bl	8001460 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800112c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001130:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001132:	2312      	movs	r3, #18
 8001134:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800113e:	2304      	movs	r3, #4
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4808      	ldr	r0, [pc, #32]	; (800116c <MX_GPIO_Init+0x2b8>)
 800114a:	f000 f989 	bl	8001460 <HAL_GPIO_Init>

}
 800114e:	bf00      	nop
 8001150:	3730      	adds	r7, #48	; 0x30
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40021000 	.word	0x40021000
 8001160:	40020800 	.word	0x40020800
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40020000 	.word	0x40020000
 800116c:	40020400 	.word	0x40020400

08001170 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d101      	bne.n	8001186 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001182:	f000 f86b 	bl	800125c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40010000 	.word	0x40010000

08001194 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800119c:	e7fe      	b.n	800119c <Error_Handler+0x8>
	...

080011a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <SystemInit+0x20>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <SystemInit+0x20>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e0:	4c0b      	ldr	r4, [pc, #44]	; (8001210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ee:	f7ff ffd7 	bl	80011a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f2:	f006 f90b 	bl	800740c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff fcc3 	bl	8000b80 <main>
  bx  lr    
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001208:	08009db8 	.word	0x08009db8
  ldr r2, =_sbss
 800120c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001210:	20004c7c 	.word	0x20004c7c

08001214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <HAL_Init+0x40>)
 8001222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_Init+0x40>)
 800122e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_Init+0x40>)
 800123a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f8d8 	bl	80013f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	200f      	movs	r0, #15
 8001248:	f7ff fd24 	bl	8000c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f7ff fcf6 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023c00 	.word	0x40023c00

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	20000140 	.word	0x20000140

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000140 	.word	0x20000140

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <__NVIC_EnableIRQ+0x38>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff4c 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800141e:	f7ff ff61 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001422:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	6978      	ldr	r0, [r7, #20]
 800142a:	f7ff ffb1 	bl	8001390 <NVIC_EncodePriority>
 800142e:	4602      	mov	r2, r0
 8001430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff80 	bl	800133c <__NVIC_SetPriority>
}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff54 	bl	8001300 <__NVIC_EnableIRQ>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	e159      	b.n	8001730 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	f040 8148 	bne.w	800172a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d005      	beq.n	80014b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d130      	bne.n	8001514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e8:	2201      	movs	r2, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 0201 	and.w	r2, r3, #1
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b03      	cmp	r3, #3
 800151e:	d017      	beq.n	8001550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d123      	bne.n	80015a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	08da      	lsrs	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3208      	adds	r2, #8
 8001564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	08da      	lsrs	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3208      	adds	r2, #8
 800159e:	69b9      	ldr	r1, [r7, #24]
 80015a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0203 	and.w	r2, r3, #3
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80a2 	beq.w	800172a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b57      	ldr	r3, [pc, #348]	; (8001748 <HAL_GPIO_Init+0x2e8>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a56      	ldr	r2, [pc, #344]	; (8001748 <HAL_GPIO_Init+0x2e8>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b54      	ldr	r3, [pc, #336]	; (8001748 <HAL_GPIO_Init+0x2e8>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001602:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_GPIO_Init+0x2ec>)
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	220f      	movs	r2, #15
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a49      	ldr	r2, [pc, #292]	; (8001750 <HAL_GPIO_Init+0x2f0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d019      	beq.n	8001662 <HAL_GPIO_Init+0x202>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a48      	ldr	r2, [pc, #288]	; (8001754 <HAL_GPIO_Init+0x2f4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d013      	beq.n	800165e <HAL_GPIO_Init+0x1fe>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a47      	ldr	r2, [pc, #284]	; (8001758 <HAL_GPIO_Init+0x2f8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00d      	beq.n	800165a <HAL_GPIO_Init+0x1fa>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a46      	ldr	r2, [pc, #280]	; (800175c <HAL_GPIO_Init+0x2fc>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d007      	beq.n	8001656 <HAL_GPIO_Init+0x1f6>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a45      	ldr	r2, [pc, #276]	; (8001760 <HAL_GPIO_Init+0x300>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_GPIO_Init+0x1f2>
 800164e:	2304      	movs	r3, #4
 8001650:	e008      	b.n	8001664 <HAL_GPIO_Init+0x204>
 8001652:	2307      	movs	r3, #7
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x204>
 8001656:	2303      	movs	r3, #3
 8001658:	e004      	b.n	8001664 <HAL_GPIO_Init+0x204>
 800165a:	2302      	movs	r3, #2
 800165c:	e002      	b.n	8001664 <HAL_GPIO_Init+0x204>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x204>
 8001662:	2300      	movs	r3, #0
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	f002 0203 	and.w	r2, r2, #3
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	4093      	lsls	r3, r2
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001674:	4935      	ldr	r1, [pc, #212]	; (800174c <HAL_GPIO_Init+0x2ec>)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001682:	4b38      	ldr	r3, [pc, #224]	; (8001764 <HAL_GPIO_Init+0x304>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a6:	4a2f      	ldr	r2, [pc, #188]	; (8001764 <HAL_GPIO_Init+0x304>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_GPIO_Init+0x304>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d0:	4a24      	ldr	r2, [pc, #144]	; (8001764 <HAL_GPIO_Init+0x304>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <HAL_GPIO_Init+0x304>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fa:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <HAL_GPIO_Init+0x304>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_GPIO_Init+0x304>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001724:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <HAL_GPIO_Init+0x304>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3301      	adds	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	f67f aea2 	bls.w	800147c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40013800 	.word	0x40013800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400
 8001758:	40020800 	.word	0x40020800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40013c00 	.word	0x40013c00

08001768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
 8001774:	4613      	mov	r3, r2
 8001776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001778:	787b      	ldrb	r3, [r7, #1]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001784:	e003      	b.n	800178e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	041a      	lsls	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	619a      	str	r2, [r3, #24]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e267      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d075      	beq.n	80018a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ba:	4b88      	ldr	r3, [pc, #544]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d00c      	beq.n	80017e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c6:	4b85      	ldr	r3, [pc, #532]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d112      	bne.n	80017f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d2:	4b82      	ldr	r3, [pc, #520]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017de:	d10b      	bne.n	80017f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	4b7e      	ldr	r3, [pc, #504]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d05b      	beq.n	80018a4 <HAL_RCC_OscConfig+0x108>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d157      	bne.n	80018a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e242      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001800:	d106      	bne.n	8001810 <HAL_RCC_OscConfig+0x74>
 8001802:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a75      	ldr	r2, [pc, #468]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e01d      	b.n	800184c <HAL_RCC_OscConfig+0xb0>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x98>
 800181a:	4b70      	ldr	r3, [pc, #448]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a6f      	ldr	r2, [pc, #444]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b6d      	ldr	r3, [pc, #436]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6c      	ldr	r2, [pc, #432]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e00b      	b.n	800184c <HAL_RCC_OscConfig+0xb0>
 8001834:	4b69      	ldr	r3, [pc, #420]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a68      	ldr	r2, [pc, #416]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 800183a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b66      	ldr	r3, [pc, #408]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a65      	ldr	r2, [pc, #404]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 8001846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d013      	beq.n	800187c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fd16 	bl	8001284 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fd12 	bl	8001284 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e207      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	4b5b      	ldr	r3, [pc, #364]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0xc0>
 800187a:	e014      	b.n	80018a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fd02 	bl	8001284 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fcfe 	bl	8001284 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1f3      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001896:	4b51      	ldr	r3, [pc, #324]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0xe8>
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d063      	beq.n	800197a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b2:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018be:	4b47      	ldr	r3, [pc, #284]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d11c      	bne.n	8001904 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ca:	4b44      	ldr	r3, [pc, #272]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d116      	bne.n	8001904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	4b41      	ldr	r3, [pc, #260]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_RCC_OscConfig+0x152>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e1c7      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ee:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4937      	ldr	r1, [pc, #220]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	e03a      	b.n	800197a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d020      	beq.n	800194e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800190c:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <HAL_RCC_OscConfig+0x244>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7ff fcb7 	bl	8001284 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191a:	f7ff fcb3 	bl	8001284 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e1a8      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4925      	ldr	r1, [pc, #148]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_RCC_OscConfig+0x244>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fc96 	bl	8001284 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195c:	f7ff fc92 	bl	8001284 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e187      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d036      	beq.n	80019f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d016      	beq.n	80019bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_RCC_OscConfig+0x248>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff fc76 	bl	8001284 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fc72 	bl	8001284 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e167      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_RCC_OscConfig+0x240>)
 80019b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x200>
 80019ba:	e01b      	b.n	80019f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_OscConfig+0x248>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c2:	f7ff fc5f 	bl	8001284 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c8:	e00e      	b.n	80019e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ca:	f7ff fc5b 	bl	8001284 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d907      	bls.n	80019e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e150      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
 80019dc:	40023800 	.word	0x40023800
 80019e0:	42470000 	.word	0x42470000
 80019e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e8:	4b88      	ldr	r3, [pc, #544]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 80019ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1ea      	bne.n	80019ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 8097 	beq.w	8001b30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a06:	4b81      	ldr	r3, [pc, #516]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10f      	bne.n	8001a32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	4b7d      	ldr	r3, [pc, #500]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a7c      	ldr	r2, [pc, #496]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b7a      	ldr	r3, [pc, #488]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4b77      	ldr	r3, [pc, #476]	; (8001c10 <HAL_RCC_OscConfig+0x474>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	4b74      	ldr	r3, [pc, #464]	; (8001c10 <HAL_RCC_OscConfig+0x474>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a73      	ldr	r2, [pc, #460]	; (8001c10 <HAL_RCC_OscConfig+0x474>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fc1b 	bl	8001284 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7ff fc17 	bl	8001284 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e10c      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x474>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x2ea>
 8001a78:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	4a63      	ldr	r2, [pc, #396]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6713      	str	r3, [r2, #112]	; 0x70
 8001a84:	e01c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x324>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x30c>
 8001a8e:	4b5f      	ldr	r3, [pc, #380]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	4a5e      	ldr	r2, [pc, #376]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9a:	4b5c      	ldr	r3, [pc, #368]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	4a5b      	ldr	r2, [pc, #364]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa6:	e00b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x324>
 8001aa8:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	4a57      	ldr	r2, [pc, #348]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab4:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab8:	4a54      	ldr	r2, [pc, #336]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001aba:	f023 0304 	bic.w	r3, r3, #4
 8001abe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d015      	beq.n	8001af4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fbdc 	bl	8001284 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fbd8 	bl	8001284 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e0cb      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae6:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0ee      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x334>
 8001af2:	e014      	b.n	8001b1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7ff fbc6 	bl	8001284 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7ff fbc2 	bl	8001284 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e0b5      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b12:	4b3e      	ldr	r3, [pc, #248]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1ee      	bne.n	8001afc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b24:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a38      	ldr	r2, [pc, #224]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80a1 	beq.w	8001c7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b3a:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d05c      	beq.n	8001c00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d141      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4e:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <HAL_RCC_OscConfig+0x478>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff fb96 	bl	8001284 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff fb92 	bl	8001284 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e087      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69da      	ldr	r2, [r3, #28]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	019b      	lsls	r3, r3, #6
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	085b      	lsrs	r3, r3, #1
 8001b92:	3b01      	subs	r3, #1
 8001b94:	041b      	lsls	r3, r3, #16
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	061b      	lsls	r3, r3, #24
 8001b9e:	491b      	ldr	r1, [pc, #108]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_RCC_OscConfig+0x478>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff fb6b 	bl	8001284 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7ff fb67 	bl	8001284 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e05c      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x416>
 8001bd0:	e054      	b.n	8001c7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_RCC_OscConfig+0x478>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fb54 	bl	8001284 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff fb50 	bl	8001284 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e045      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_RCC_OscConfig+0x470>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x444>
 8001bfe:	e03d      	b.n	8001c7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e038      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40007000 	.word	0x40007000
 8001c14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_RCC_OscConfig+0x4ec>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d028      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d121      	bne.n	8001c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d11a      	bne.n	8001c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c48:	4013      	ands	r3, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d111      	bne.n	8001c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	085b      	lsrs	r3, r3, #1
 8001c60:	3b01      	subs	r3, #1
 8001c62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800

08001c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0cc      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d90c      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b63      	ldr	r3, [pc, #396]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0b8      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d020      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce0:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf8:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d04:	4b50      	ldr	r3, [pc, #320]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	494d      	ldr	r1, [pc, #308]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d044      	beq.n	8001dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d119      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e07f      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4a:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d109      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e06f      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e067      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f023 0203 	bic.w	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4934      	ldr	r1, [pc, #208]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d7c:	f7ff fa82 	bl	8001284 <HAL_GetTick>
 8001d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d84:	f7ff fa7e 	bl	8001284 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e04f      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 020c 	and.w	r2, r3, #12
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d1eb      	bne.n	8001d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d20c      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e032      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4916      	ldr	r1, [pc, #88]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	490e      	ldr	r1, [pc, #56]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e12:	f000 f821 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	490a      	ldr	r1, [pc, #40]	; (8001e4c <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	5ccb      	ldrb	r3, [r1, r3]
 8001e26:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2a:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1c8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe ff2e 	bl	8000c94 <HAL_InitTick>

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	08009520 	.word	0x08009520
 8001e50:	20000000 	.word	0x20000000
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e5c:	b094      	sub	sp, #80	; 0x50
 8001e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	647b      	str	r3, [r7, #68]	; 0x44
 8001e64:	2300      	movs	r3, #0
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e68:	2300      	movs	r3, #0
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e70:	4b79      	ldr	r3, [pc, #484]	; (8002058 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d00d      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x40>
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	f200 80e1 	bhi.w	8002044 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x34>
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e8a:	e0db      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e8c:	4b73      	ldr	r3, [pc, #460]	; (800205c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e90:	e0db      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e92:	4b73      	ldr	r3, [pc, #460]	; (8002060 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e96:	e0d8      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e98:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ea0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea2:	4b6d      	ldr	r3, [pc, #436]	; (8002058 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d063      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eae:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	099b      	lsrs	r3, r3, #6
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001eca:	4622      	mov	r2, r4
 8001ecc:	462b      	mov	r3, r5
 8001ece:	f04f 0000 	mov.w	r0, #0
 8001ed2:	f04f 0100 	mov.w	r1, #0
 8001ed6:	0159      	lsls	r1, r3, #5
 8001ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001edc:	0150      	lsls	r0, r2, #5
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	1a51      	subs	r1, r2, r1
 8001ee6:	6139      	str	r1, [r7, #16]
 8001ee8:	4629      	mov	r1, r5
 8001eea:	eb63 0301 	sbc.w	r3, r3, r1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001efc:	4659      	mov	r1, fp
 8001efe:	018b      	lsls	r3, r1, #6
 8001f00:	4651      	mov	r1, sl
 8001f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f06:	4651      	mov	r1, sl
 8001f08:	018a      	lsls	r2, r1, #6
 8001f0a:	4651      	mov	r1, sl
 8001f0c:	ebb2 0801 	subs.w	r8, r2, r1
 8001f10:	4659      	mov	r1, fp
 8001f12:	eb63 0901 	sbc.w	r9, r3, r1
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f2a:	4690      	mov	r8, r2
 8001f2c:	4699      	mov	r9, r3
 8001f2e:	4623      	mov	r3, r4
 8001f30:	eb18 0303 	adds.w	r3, r8, r3
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	462b      	mov	r3, r5
 8001f38:	eb49 0303 	adc.w	r3, r9, r3
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	024b      	lsls	r3, r1, #9
 8001f4e:	4621      	mov	r1, r4
 8001f50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f54:	4621      	mov	r1, r4
 8001f56:	024a      	lsls	r2, r1, #9
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f5e:	2200      	movs	r2, #0
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f68:	f7fe f9f2 	bl	8000350 <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4613      	mov	r3, r2
 8001f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f74:	e058      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f76:	4b38      	ldr	r3, [pc, #224]	; (8002058 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	099b      	lsrs	r3, r3, #6
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	4611      	mov	r1, r2
 8001f82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f86:	623b      	str	r3, [r7, #32]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f90:	4642      	mov	r2, r8
 8001f92:	464b      	mov	r3, r9
 8001f94:	f04f 0000 	mov.w	r0, #0
 8001f98:	f04f 0100 	mov.w	r1, #0
 8001f9c:	0159      	lsls	r1, r3, #5
 8001f9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa2:	0150      	lsls	r0, r2, #5
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4641      	mov	r1, r8
 8001faa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fae:	4649      	mov	r1, r9
 8001fb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fc8:	ebb2 040a 	subs.w	r4, r2, sl
 8001fcc:	eb63 050b 	sbc.w	r5, r3, fp
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	00eb      	lsls	r3, r5, #3
 8001fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fde:	00e2      	lsls	r2, r4, #3
 8001fe0:	4614      	mov	r4, r2
 8001fe2:	461d      	mov	r5, r3
 8001fe4:	4643      	mov	r3, r8
 8001fe6:	18e3      	adds	r3, r4, r3
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	464b      	mov	r3, r9
 8001fec:	eb45 0303 	adc.w	r3, r5, r3
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ffe:	4629      	mov	r1, r5
 8002000:	028b      	lsls	r3, r1, #10
 8002002:	4621      	mov	r1, r4
 8002004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002008:	4621      	mov	r1, r4
 800200a:	028a      	lsls	r2, r1, #10
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002012:	2200      	movs	r2, #0
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	61fa      	str	r2, [r7, #28]
 8002018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800201c:	f7fe f998 	bl	8000350 <__aeabi_uldivmod>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4613      	mov	r3, r2
 8002026:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_GetSysClockFreq+0x200>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	3301      	adds	r3, #1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800203a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002042:	e002      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetSysClockFreq+0x204>)
 8002046:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800204a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800204c:	4618      	mov	r0, r3
 800204e:	3750      	adds	r7, #80	; 0x50
 8002050:	46bd      	mov	sp, r7
 8002052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	00f42400 	.word	0x00f42400
 8002060:	007a1200 	.word	0x007a1200

08002064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_RCC_GetHCLKFreq+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000

0800207c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002080:	f7ff fff0 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0b5b      	lsrs	r3, r3, #13
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4903      	ldr	r1, [pc, #12]	; (80020a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	08009530 	.word	0x08009530

080020a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	220f      	movs	r2, #15
 80020b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_GetClockConfig+0x5c>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0203 	and.w	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_RCC_GetClockConfig+0x5c>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_RCC_GetClockConfig+0x5c>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_GetClockConfig+0x5c>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_RCC_GetClockConfig+0x60>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0207 	and.w	r2, r3, #7
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	601a      	str	r2, [r3, #0]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40023c00 	.word	0x40023c00

08002108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e041      	b.n	800219e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f839 	bl	80021a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f000 f9ca 	bl	80024e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d001      	beq.n	80021d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e044      	b.n	800225e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <HAL_TIM_Base_Start_IT+0xb0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d018      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fe:	d013      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_TIM_Base_Start_IT+0xb4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00e      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a19      	ldr	r2, [pc, #100]	; (8002274 <HAL_TIM_Base_Start_IT+0xb8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a17      	ldr	r2, [pc, #92]	; (8002278 <HAL_TIM_Base_Start_IT+0xbc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d004      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x6c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a16      	ldr	r2, [pc, #88]	; (800227c <HAL_TIM_Base_Start_IT+0xc0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d111      	bne.n	800224c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b06      	cmp	r3, #6
 8002238:	d010      	beq.n	800225c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224a:	e007      	b.n	800225c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40010000 	.word	0x40010000
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800
 8002278:	40000c00 	.word	0x40000c00
 800227c:	40014000 	.word	0x40014000

08002280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b02      	cmp	r3, #2
 8002294:	d122      	bne.n	80022dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d11b      	bne.n	80022dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0202 	mvn.w	r2, #2
 80022ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8ee 	bl	80024a4 <HAL_TIM_IC_CaptureCallback>
 80022c8:	e005      	b.n	80022d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8e0 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f8f1 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d122      	bne.n	8002330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d11b      	bne.n	8002330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0204 	mvn.w	r2, #4
 8002300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2202      	movs	r2, #2
 8002306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f8c4 	bl	80024a4 <HAL_TIM_IC_CaptureCallback>
 800231c:	e005      	b.n	800232a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8b6 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f8c7 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b08      	cmp	r3, #8
 800233c:	d122      	bne.n	8002384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b08      	cmp	r3, #8
 800234a:	d11b      	bne.n	8002384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0208 	mvn.w	r2, #8
 8002354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2204      	movs	r2, #4
 800235a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f89a 	bl	80024a4 <HAL_TIM_IC_CaptureCallback>
 8002370:	e005      	b.n	800237e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f88c 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f89d 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b10      	cmp	r3, #16
 8002390:	d122      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2b10      	cmp	r3, #16
 800239e:	d11b      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0210 	mvn.w	r2, #16
 80023a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2208      	movs	r2, #8
 80023ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f870 	bl	80024a4 <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f862 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f873 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10e      	bne.n	8002404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d107      	bne.n	8002404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0201 	mvn.w	r2, #1
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe feb6 	bl	8001170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	2b80      	cmp	r3, #128	; 0x80
 8002410:	d10e      	bne.n	8002430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241c:	2b80      	cmp	r3, #128	; 0x80
 800241e:	d107      	bne.n	8002430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8e2 	bl	80025f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d10e      	bne.n	800245c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d107      	bne.n	800245c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f838 	bl	80024cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b20      	cmp	r3, #32
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b20      	cmp	r3, #32
 8002476:	d107      	bne.n	8002488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0220 	mvn.w	r2, #32
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f8ac 	bl	80025e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a34      	ldr	r2, [pc, #208]	; (80025c4 <TIM_Base_SetConfig+0xe4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00f      	beq.n	8002518 <TIM_Base_SetConfig+0x38>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fe:	d00b      	beq.n	8002518 <TIM_Base_SetConfig+0x38>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a31      	ldr	r2, [pc, #196]	; (80025c8 <TIM_Base_SetConfig+0xe8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d007      	beq.n	8002518 <TIM_Base_SetConfig+0x38>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a30      	ldr	r2, [pc, #192]	; (80025cc <TIM_Base_SetConfig+0xec>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_Base_SetConfig+0x38>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a2f      	ldr	r2, [pc, #188]	; (80025d0 <TIM_Base_SetConfig+0xf0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d108      	bne.n	800252a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a25      	ldr	r2, [pc, #148]	; (80025c4 <TIM_Base_SetConfig+0xe4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01b      	beq.n	800256a <TIM_Base_SetConfig+0x8a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002538:	d017      	beq.n	800256a <TIM_Base_SetConfig+0x8a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <TIM_Base_SetConfig+0xe8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <TIM_Base_SetConfig+0x8a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a21      	ldr	r2, [pc, #132]	; (80025cc <TIM_Base_SetConfig+0xec>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00f      	beq.n	800256a <TIM_Base_SetConfig+0x8a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a20      	ldr	r2, [pc, #128]	; (80025d0 <TIM_Base_SetConfig+0xf0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00b      	beq.n	800256a <TIM_Base_SetConfig+0x8a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <TIM_Base_SetConfig+0xf4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <TIM_Base_SetConfig+0x8a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a1e      	ldr	r2, [pc, #120]	; (80025d8 <TIM_Base_SetConfig+0xf8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d003      	beq.n	800256a <TIM_Base_SetConfig+0x8a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <TIM_Base_SetConfig+0xfc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d108      	bne.n	800257c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <TIM_Base_SetConfig+0xe4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d103      	bne.n	80025b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	615a      	str	r2, [r3, #20]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40000c00 	.word	0x40000c00
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40014400 	.word	0x40014400
 80025dc:	40014800 	.word	0x40014800

080025e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Handler+0x1c>)
 800260e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002610:	f001 ffbc 	bl	800458c <xTaskGetSchedulerState>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d001      	beq.n	800261e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800261a:	f002 fea5 	bl	8005368 <xPortSysTickHandler>
  }
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a07      	ldr	r2, [pc, #28]	; (8002654 <vApplicationGetIdleTaskMemory+0x2c>)
 8002638:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <vApplicationGetIdleTaskMemory+0x30>)
 800263e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	601a      	str	r2, [r3, #0]
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000144 	.word	0x20000144
 8002658:	20000208 	.word	0x20000208

0800265c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4a07      	ldr	r2, [pc, #28]	; (8002688 <vApplicationGetTimerTaskMemory+0x2c>)
 800266c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4a06      	ldr	r2, [pc, #24]	; (800268c <vApplicationGetTimerTaskMemory+0x30>)
 8002672:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267a:	601a      	str	r2, [r3, #0]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	20000408 	.word	0x20000408
 800268c:	200004cc 	.word	0x200004cc

08002690 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f103 0208 	add.w	r2, r3, #8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f103 0208 	add.w	r2, r3, #8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f103 0208 	add.w	r2, r3, #8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	601a      	str	r2, [r3, #0]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002748:	d103      	bne.n	8002752 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e00c      	b.n	800276c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3308      	adds	r3, #8
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e002      	b.n	8002760 <vListInsert+0x2e>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	429a      	cmp	r2, r3
 800276a:	d2f6      	bcs.n	800275a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6892      	ldr	r2, [r2, #8]
 80027ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6852      	ldr	r2, [r2, #4]
 80027c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d103      	bne.n	80027d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1e5a      	subs	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002822:	f002 fd0f 	bl	8005244 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	68f9      	ldr	r1, [r7, #12]
 8002830:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	441a      	add	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	3b01      	subs	r3, #1
 8002854:	68f9      	ldr	r1, [r7, #12]
 8002856:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	441a      	add	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	22ff      	movs	r2, #255	; 0xff
 8002866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	22ff      	movs	r2, #255	; 0xff
 800286e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d114      	bne.n	80028a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01a      	beq.n	80028b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3310      	adds	r3, #16
 8002884:	4618      	mov	r0, r3
 8002886:	f001 fc89 	bl	800419c <xTaskRemoveFromEventList>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <xQueueGenericReset+0xcc>)
 8002892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	e009      	b.n	80028b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3310      	adds	r3, #16
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fef2 	bl	8002690 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3324      	adds	r3, #36	; 0x24
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff feed 	bl	8002690 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028b6:	f002 fcf5 	bl	80052a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028ba:	2301      	movs	r3, #1
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	e000ed04 	.word	0xe000ed04

080028c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08e      	sub	sp, #56	; 0x38
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
}
 800290a:	bf00      	nop
 800290c:	e7fe      	b.n	800290c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <xQueueGenericCreateStatic+0x52>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <xQueueGenericCreateStatic+0x56>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <xQueueGenericCreateStatic+0x58>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	623b      	str	r3, [r7, #32]
}
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <xQueueGenericCreateStatic+0x7e>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <xQueueGenericCreateStatic+0x82>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <xQueueGenericCreateStatic+0x84>
 800294a:	2300      	movs	r3, #0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	61fb      	str	r3, [r7, #28]
}
 8002962:	bf00      	nop
 8002964:	e7fe      	b.n	8002964 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002966:	2350      	movs	r3, #80	; 0x50
 8002968:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b50      	cmp	r3, #80	; 0x50
 800296e:	d00a      	beq.n	8002986 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	61bb      	str	r3, [r7, #24]
}
 8002982:	bf00      	nop
 8002984:	e7fe      	b.n	8002984 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002986:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800299a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	4613      	mov	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f83f 	bl	8002a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3730      	adds	r7, #48	; 0x30
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80029cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	613b      	str	r3, [r7, #16]
}
 80029de:	bf00      	nop
 80029e0:	e7fe      	b.n	80029e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	3350      	adds	r3, #80	; 0x50
 80029f0:	4618      	mov	r0, r3
 80029f2:	f002 fd49 	bl	8005488 <pvPortMalloc>
 80029f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d011      	beq.n	8002a22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3350      	adds	r3, #80	; 0x50
 8002a06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a10:	79fa      	ldrb	r2, [r7, #7]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f805 	bl	8002a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a22:	69bb      	ldr	r3, [r7, #24]
	}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d103      	bne.n	8002a48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e002      	b.n	8002a4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	69b8      	ldr	r0, [r7, #24]
 8002a5e:	f7ff fecb 	bl	80027f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00e      	beq.n	8002a9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002a92:	2300      	movs	r3, #0
 8002a94:	2200      	movs	r2, #0
 8002a96:	2100      	movs	r1, #0
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f8a3 	bl	8002be4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b088      	sub	sp, #32
 8002aaa:	af02      	add	r7, sp, #8
 8002aac:	4603      	mov	r3, r0
 8002aae:	6039      	str	r1, [r7, #0]
 8002ab0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6939      	ldr	r1, [r7, #16]
 8002ac4:	6978      	ldr	r0, [r7, #20]
 8002ac6:	f7ff feff 	bl	80028c8 <xQueueGenericCreateStatic>
 8002aca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7ff ffd0 	bl	8002a72 <prvInitialiseMutex>

		return xNewQueue;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
	}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	TaskHandle_t pxReturn;
	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	60bb      	str	r3, [r7, #8]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
 8002ae8:	f002 fbac 	bl	8005244 <vPortEnterCritical>
		{
			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <xQueueGetMutexHolder+0x20>
			{
				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	e001      	b.n	8002b00 <xQueueGetMutexHolder+0x24>
			}
			else
			{
				pxReturn = NULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8002b00:	f002 fbd0 	bl	80052a4 <vPortExitCritical>

		return pxReturn;
 8002b04:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002b0e:	b590      	push	{r4, r7, lr}
 8002b10:	b087      	sub	sp, #28
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	60fb      	str	r3, [r7, #12]
}
 8002b32:	bf00      	nop
 8002b34:	e7fe      	b.n	8002b34 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	689c      	ldr	r4, [r3, #8]
 8002b3a:	f001 fd17 	bl	800456c <xTaskGetCurrentTaskHandle>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	429c      	cmp	r4, r3
 8002b42:	d111      	bne.n	8002b68 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	1e5a      	subs	r2, r3, #1
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002b56:	2300      	movs	r3, #0
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	6938      	ldr	r0, [r7, #16]
 8002b5e:	f000 f841 	bl	8002be4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002b62:	2301      	movs	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e001      	b.n	8002b6c <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002b6c:	697b      	ldr	r3, [r7, #20]
	}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd90      	pop	{r4, r7, pc}

08002b76 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002b76:	b590      	push	{r4, r7, lr}
 8002b78:	b087      	sub	sp, #28
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	60fb      	str	r3, [r7, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	e7fe      	b.n	8002b9e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	689c      	ldr	r4, [r3, #8]
 8002ba4:	f001 fce2 	bl	800456c <xTaskGetCurrentTaskHandle>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	429c      	cmp	r4, r3
 8002bac:	d107      	bne.n	8002bbe <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e00c      	b.n	8002bd8 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	6938      	ldr	r0, [r7, #16]
 8002bc2:	f000 fa89 	bl	80030d8 <xQueueSemaphoreTake>
 8002bc6:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002bd8:	697b      	ldr	r3, [r7, #20]
	}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}
	...

08002be4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08e      	sub	sp, #56	; 0x38
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10a      	bne.n	8002c16 <xQueueGenericSend+0x32>
	__asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c12:	bf00      	nop
 8002c14:	e7fe      	b.n	8002c14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d103      	bne.n	8002c24 <xQueueGenericSend+0x40>
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <xQueueGenericSend+0x44>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <xQueueGenericSend+0x46>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10a      	bne.n	8002c44 <xQueueGenericSend+0x60>
	__asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c40:	bf00      	nop
 8002c42:	e7fe      	b.n	8002c42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d103      	bne.n	8002c52 <xQueueGenericSend+0x6e>
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <xQueueGenericSend+0x72>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <xQueueGenericSend+0x74>
 8002c56:	2300      	movs	r3, #0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	623b      	str	r3, [r7, #32]
}
 8002c6e:	bf00      	nop
 8002c70:	e7fe      	b.n	8002c70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c72:	f001 fc8b 	bl	800458c <xTaskGetSchedulerState>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <xQueueGenericSend+0x9e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <xQueueGenericSend+0xa2>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <xQueueGenericSend+0xa4>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	61fb      	str	r3, [r7, #28]
}
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ca2:	f002 facf 	bl	8005244 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d302      	bcc.n	8002cb8 <xQueueGenericSend+0xd4>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d129      	bne.n	8002d0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cbe:	f000 fb52 	bl	8003366 <prvCopyDataToQueue>
 8002cc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	3324      	adds	r3, #36	; 0x24
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 fa63 	bl	800419c <xTaskRemoveFromEventList>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cdc:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <xQueueGenericSend+0x1f8>)
 8002cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	e00a      	b.n	8002d04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cf4:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <xQueueGenericSend+0x1f8>)
 8002cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d04:	f002 face 	bl	80052a4 <vPortExitCritical>
				return pdPASS;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e063      	b.n	8002dd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d12:	f002 fac7 	bl	80052a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e05c      	b.n	8002dd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d106      	bne.n	8002d2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 fac3 	bl	80042b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d2e:	f002 fab9 	bl	80052a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d32:	f000 ffc5 	bl	8003cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d36:	f002 fa85 	bl	8005244 <vPortEnterCritical>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d46:	d103      	bne.n	8002d50 <xQueueGenericSend+0x16c>
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d5c:	d103      	bne.n	8002d66 <xQueueGenericSend+0x182>
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d66:	f002 fa9d 	bl	80052a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d6a:	1d3a      	adds	r2, r7, #4
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 fab2 	bl	80042dc <xTaskCheckForTimeOut>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d124      	bne.n	8002dc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d80:	f000 fbe9 	bl	8003556 <prvIsQueueFull>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d018      	beq.n	8002dbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	3310      	adds	r3, #16
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 f9b2 	bl	80040fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d9a:	f000 fb74 	bl	8003486 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d9e:	f000 ff9d 	bl	8003cdc <xTaskResumeAll>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f47f af7c 	bne.w	8002ca2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <xQueueGenericSend+0x1f8>)
 8002dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	e772      	b.n	8002ca2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dbe:	f000 fb62 	bl	8003486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dc2:	f000 ff8b 	bl	8003cdc <xTaskResumeAll>
 8002dc6:	e76c      	b.n	8002ca2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dca:	f000 fb5c 	bl	8003486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dce:	f000 ff85 	bl	8003cdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002dd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3738      	adds	r7, #56	; 0x38
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	e000ed04 	.word	0xe000ed04

08002de0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b090      	sub	sp, #64	; 0x40
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <xQueueGenericSendFromISR+0x3c>
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <xQueueGenericSendFromISR+0x40>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <xQueueGenericSendFromISR+0x42>
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e38:	bf00      	nop
 8002e3a:	e7fe      	b.n	8002e3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d103      	bne.n	8002e4a <xQueueGenericSendFromISR+0x6a>
 8002e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <xQueueGenericSendFromISR+0x6e>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <xQueueGenericSendFromISR+0x70>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	623b      	str	r3, [r7, #32]
}
 8002e66:	bf00      	nop
 8002e68:	e7fe      	b.n	8002e68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e6a:	f002 facd 	bl	8005408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e6e:	f3ef 8211 	mrs	r2, BASEPRI
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	61fa      	str	r2, [r7, #28]
 8002e84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d302      	bcc.n	8002e9c <xQueueGenericSendFromISR+0xbc>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d12f      	bne.n	8002efc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002eb2:	f000 fa58 	bl	8003366 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002eb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ebe:	d112      	bne.n	8002ee6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d016      	beq.n	8002ef6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eca:	3324      	adds	r3, #36	; 0x24
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 f965 	bl	800419c <xTaskRemoveFromEventList>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00e      	beq.n	8002ef6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e007      	b.n	8002ef6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ee6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002eea:	3301      	adds	r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	b25a      	sxtb	r2, r3
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002efa:	e001      	b.n	8002f00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3740      	adds	r7, #64	; 0x40
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08c      	sub	sp, #48	; 0x30
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <xQueueReceive+0x30>
	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	623b      	str	r3, [r7, #32]
}
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <xQueueReceive+0x3e>
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <xQueueReceive+0x42>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <xQueueReceive+0x44>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <xQueueReceive+0x5e>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	61fb      	str	r3, [r7, #28]
}
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f76:	f001 fb09 	bl	800458c <xTaskGetSchedulerState>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <xQueueReceive+0x6e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <xQueueReceive+0x72>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <xQueueReceive+0x74>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <xQueueReceive+0x8e>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	61bb      	str	r3, [r7, #24]
}
 8002fa2:	bf00      	nop
 8002fa4:	e7fe      	b.n	8002fa4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fa6:	f002 f94d 	bl	8005244 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01f      	beq.n	8002ff6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fba:	f000 fa3e 	bl	800343a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	1e5a      	subs	r2, r3, #1
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00f      	beq.n	8002fee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	3310      	adds	r3, #16
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 f8e2 	bl	800419c <xTaskRemoveFromEventList>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fde:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <xQueueReceive+0x1bc>)
 8002fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fee:	f002 f959 	bl	80052a4 <vPortExitCritical>
				return pdPASS;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e069      	b.n	80030ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ffc:	f002 f952 	bl	80052a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003000:	2300      	movs	r3, #0
 8003002:	e062      	b.n	80030ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800300a:	f107 0310 	add.w	r3, r7, #16
 800300e:	4618      	mov	r0, r3
 8003010:	f001 f94e 	bl	80042b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003014:	2301      	movs	r3, #1
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003018:	f002 f944 	bl	80052a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800301c:	f000 fe50 	bl	8003cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003020:	f002 f910 	bl	8005244 <vPortEnterCritical>
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800302a:	b25b      	sxtb	r3, r3
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003030:	d103      	bne.n	800303a <xQueueReceive+0x122>
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003040:	b25b      	sxtb	r3, r3
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003046:	d103      	bne.n	8003050 <xQueueReceive+0x138>
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003050:	f002 f928 	bl	80052a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003054:	1d3a      	adds	r2, r7, #4
 8003056:	f107 0310 	add.w	r3, r7, #16
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f001 f93d 	bl	80042dc <xTaskCheckForTimeOut>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d123      	bne.n	80030b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800306a:	f000 fa5e 	bl	800352a <prvIsQueueEmpty>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d017      	beq.n	80030a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	3324      	adds	r3, #36	; 0x24
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f001 f83d 	bl	80040fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003084:	f000 f9ff 	bl	8003486 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003088:	f000 fe28 	bl	8003cdc <xTaskResumeAll>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d189      	bne.n	8002fa6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <xQueueReceive+0x1bc>)
 8003094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	e780      	b.n	8002fa6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030a6:	f000 f9ee 	bl	8003486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030aa:	f000 fe17 	bl	8003cdc <xTaskResumeAll>
 80030ae:	e77a      	b.n	8002fa6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030b2:	f000 f9e8 	bl	8003486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030b6:	f000 fe11 	bl	8003cdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030bc:	f000 fa35 	bl	800352a <prvIsQueueEmpty>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f43f af6f 	beq.w	8002fa6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3730      	adds	r7, #48	; 0x30
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	e000ed04 	.word	0xe000ed04

080030d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08e      	sub	sp, #56	; 0x38
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <xQueueSemaphoreTake+0x32>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	623b      	str	r3, [r7, #32]
}
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	61fb      	str	r3, [r7, #28]
}
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003128:	f001 fa30 	bl	800458c <xTaskGetSchedulerState>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <xQueueSemaphoreTake+0x60>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <xQueueSemaphoreTake+0x64>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <xQueueSemaphoreTake+0x66>
 800313c:	2300      	movs	r3, #0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	61bb      	str	r3, [r7, #24]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003158:	f002 f874 	bl	8005244 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	2b00      	cmp	r3, #0
 8003166:	d024      	beq.n	80031b2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003178:	f001 fb7e 	bl	8004878 <pvTaskIncrementMutexHeldCount>
 800317c:	4602      	mov	r2, r0
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00f      	beq.n	80031aa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	3310      	adds	r3, #16
 800318e:	4618      	mov	r0, r3
 8003190:	f001 f804 	bl	800419c <xTaskRemoveFromEventList>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800319a:	4b54      	ldr	r3, [pc, #336]	; (80032ec <xQueueSemaphoreTake+0x214>)
 800319c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031aa:	f002 f87b 	bl	80052a4 <vPortExitCritical>
				return pdPASS;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e097      	b.n	80032e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d111      	bne.n	80031dc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	617b      	str	r3, [r7, #20]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80031d4:	f002 f866 	bl	80052a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031d8:	2300      	movs	r3, #0
 80031da:	e082      	b.n	80032e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	4618      	mov	r0, r3
 80031e8:	f001 f862 	bl	80042b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031f0:	f002 f858 	bl	80052a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031f4:	f000 fd64 	bl	8003cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031f8:	f002 f824 	bl	8005244 <vPortEnterCritical>
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003202:	b25b      	sxtb	r3, r3
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003208:	d103      	bne.n	8003212 <xQueueSemaphoreTake+0x13a>
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003218:	b25b      	sxtb	r3, r3
 800321a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800321e:	d103      	bne.n	8003228 <xQueueSemaphoreTake+0x150>
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003228:	f002 f83c 	bl	80052a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800322c:	463a      	mov	r2, r7
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f001 f851 	bl	80042dc <xTaskCheckForTimeOut>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d132      	bne.n	80032a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003242:	f000 f972 	bl	800352a <prvIsQueueEmpty>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d026      	beq.n	800329a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003254:	f001 fff6 	bl	8005244 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	f001 f9b3 	bl	80045c8 <xTaskPriorityInherit>
 8003262:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003264:	f002 f81e 	bl	80052a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326a:	3324      	adds	r3, #36	; 0x24
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f000 ff43 	bl	80040fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003278:	f000 f905 	bl	8003486 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800327c:	f000 fd2e 	bl	8003cdc <xTaskResumeAll>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	f47f af68 	bne.w	8003158 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <xQueueSemaphoreTake+0x214>)
 800328a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	e75e      	b.n	8003158 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800329a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800329c:	f000 f8f3 	bl	8003486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032a0:	f000 fd1c 	bl	8003cdc <xTaskResumeAll>
 80032a4:	e758      	b.n	8003158 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80032a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032a8:	f000 f8ed 	bl	8003486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032ac:	f000 fd16 	bl	8003cdc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032b2:	f000 f93a 	bl	800352a <prvIsQueueEmpty>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f43f af4d 	beq.w	8003158 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80032c4:	f001 ffbe 	bl	8005244 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80032c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032ca:	f000 f834 	bl	8003336 <prvGetDisinheritPriorityAfterTimeout>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 fa4c 	bl	8004774 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80032dc:	f001 ffe2 	bl	80052a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3738      	adds	r7, #56	; 0x38
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	e000ed04 	.word	0xe000ed04

080032f0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <vQueueDelete+0x28>
	__asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	60bb      	str	r3, [r7, #8]
}
 8003314:	bf00      	nop
 8003316:	e7fe      	b.n	8003316 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f95f 	bl	80035dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f002 f979 	bl	8005620 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e001      	b.n	8003358 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003358:	68fb      	ldr	r3, [r7, #12]
	}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10d      	bne.n	80033a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d14d      	bne.n	8003428 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f001 f981 	bl	8004698 <xTaskPriorityDisinherit>
 8003396:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	e043      	b.n	8003428 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d119      	bne.n	80033da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6858      	ldr	r0, [r3, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	461a      	mov	r2, r3
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	f004 f852 	bl	800745a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	441a      	add	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d32b      	bcc.n	8003428 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	e026      	b.n	8003428 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	68d8      	ldr	r0, [r3, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	461a      	mov	r2, r3
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	f004 f838 	bl	800745a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	425b      	negs	r3, r3
 80033f4:	441a      	add	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d207      	bcs.n	8003416 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	425b      	negs	r3, r3
 8003410:	441a      	add	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d105      	bne.n	8003428 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	3b01      	subs	r3, #1
 8003426:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003430:	697b      	ldr	r3, [r7, #20]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d018      	beq.n	800347e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	441a      	add	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	429a      	cmp	r2, r3
 8003464:	d303      	bcc.n	800346e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68d9      	ldr	r1, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	461a      	mov	r2, r3
 8003478:	6838      	ldr	r0, [r7, #0]
 800347a:	f003 ffee 	bl	800745a <memcpy>
	}
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800348e:	f001 fed9 	bl	8005244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003498:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800349a:	e011      	b.n	80034c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3324      	adds	r3, #36	; 0x24
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fe77 	bl	800419c <xTaskRemoveFromEventList>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034b4:	f000 ff74 	bl	80043a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	dce9      	bgt.n	800349c <prvUnlockQueue+0x16>
 80034c8:	e000      	b.n	80034cc <prvUnlockQueue+0x46>
					break;
 80034ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	22ff      	movs	r2, #255	; 0xff
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034d4:	f001 fee6 	bl	80052a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034d8:	f001 feb4 	bl	8005244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034e4:	e011      	b.n	800350a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d012      	beq.n	8003514 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3310      	adds	r3, #16
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fe52 	bl	800419c <xTaskRemoveFromEventList>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034fe:	f000 ff4f 	bl	80043a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003502:	7bbb      	ldrb	r3, [r7, #14]
 8003504:	3b01      	subs	r3, #1
 8003506:	b2db      	uxtb	r3, r3
 8003508:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800350a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800350e:	2b00      	cmp	r3, #0
 8003510:	dce9      	bgt.n	80034e6 <prvUnlockQueue+0x60>
 8003512:	e000      	b.n	8003516 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003514:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	22ff      	movs	r2, #255	; 0xff
 800351a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800351e:	f001 fec1 	bl	80052a4 <vPortExitCritical>
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003532:	f001 fe87 	bl	8005244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800353e:	2301      	movs	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e001      	b.n	8003548 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003548:	f001 feac 	bl	80052a4 <vPortExitCritical>

	return xReturn;
 800354c:	68fb      	ldr	r3, [r7, #12]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800355e:	f001 fe71 	bl	8005244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	429a      	cmp	r2, r3
 800356c:	d102      	bne.n	8003574 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800356e:	2301      	movs	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	e001      	b.n	8003578 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003578:	f001 fe94 	bl	80052a4 <vPortExitCritical>

	return xReturn;
 800357c:	68fb      	ldr	r3, [r7, #12]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	e014      	b.n	80035c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003598:	4a0f      	ldr	r2, [pc, #60]	; (80035d8 <vQueueAddToRegistry+0x50>)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80035a4:	490c      	ldr	r1, [pc, #48]	; (80035d8 <vQueueAddToRegistry+0x50>)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <vQueueAddToRegistry+0x50>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035ba:	e006      	b.n	80035ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3301      	adds	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b07      	cmp	r3, #7
 80035c6:	d9e7      	bls.n	8003598 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	200008cc 	.word	0x200008cc

080035dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e016      	b.n	8003618 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80035ea:	4a10      	ldr	r2, [pc, #64]	; (800362c <vQueueUnregisterQueue+0x50>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d10b      	bne.n	8003612 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80035fa:	4a0c      	ldr	r2, [pc, #48]	; (800362c <vQueueUnregisterQueue+0x50>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2100      	movs	r1, #0
 8003600:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003604:	4a09      	ldr	r2, [pc, #36]	; (800362c <vQueueUnregisterQueue+0x50>)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	2200      	movs	r2, #0
 800360e:	605a      	str	r2, [r3, #4]
				break;
 8003610:	e006      	b.n	8003620 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3301      	adds	r3, #1
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b07      	cmp	r3, #7
 800361c:	d9e5      	bls.n	80035ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	200008cc 	.word	0x200008cc

08003630 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003640:	f001 fe00 	bl	8005244 <vPortEnterCritical>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800364a:	b25b      	sxtb	r3, r3
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003650:	d103      	bne.n	800365a <vQueueWaitForMessageRestricted+0x2a>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003660:	b25b      	sxtb	r3, r3
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003666:	d103      	bne.n	8003670 <vQueueWaitForMessageRestricted+0x40>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003670:	f001 fe18 	bl	80052a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fd5d 	bl	8004144 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff fefb 	bl	8003486 <prvUnlockQueue>
	}
 8003690:	bf00      	nop
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af04      	add	r7, sp, #16
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	623b      	str	r3, [r7, #32]
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <xTaskCreateStatic+0x46>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	61fb      	str	r3, [r7, #28]
}
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036de:	23c4      	movs	r3, #196	; 0xc4
 80036e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2bc4      	cmp	r3, #196	; 0xc4
 80036e6:	d00a      	beq.n	80036fe <xTaskCreateStatic+0x66>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	61bb      	str	r3, [r7, #24]
}
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01e      	beq.n	8003744 <xTaskCreateStatic+0xac>
 8003706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01b      	beq.n	8003744 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003714:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	2202      	movs	r2, #2
 800371a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800371e:	2300      	movs	r3, #0
 8003720:	9303      	str	r3, [sp, #12]
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	9302      	str	r3, [sp, #8]
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f850 	bl	80037dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800373c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800373e:	f000 f8f7 	bl	8003930 <prvAddNewTaskToReadyList>
 8003742:	e001      	b.n	8003748 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003748:	697b      	ldr	r3, [r7, #20]
	}
 800374a:	4618      	mov	r0, r3
 800374c:	3728      	adds	r7, #40	; 0x28
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003752:	b580      	push	{r7, lr}
 8003754:	b08c      	sub	sp, #48	; 0x30
 8003756:	af04      	add	r7, sp, #16
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f001 fe8e 	bl	8005488 <pvPortMalloc>
 800376c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00e      	beq.n	8003792 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003774:	20c4      	movs	r0, #196	; 0xc4
 8003776:	f001 fe87 	bl	8005488 <pvPortMalloc>
 800377a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
 8003788:	e005      	b.n	8003796 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800378a:	6978      	ldr	r0, [r7, #20]
 800378c:	f001 ff48 	bl	8005620 <vPortFree>
 8003790:	e001      	b.n	8003796 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d017      	beq.n	80037cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9303      	str	r3, [sp, #12]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	9302      	str	r3, [sp, #8]
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f80e 	bl	80037dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037c0:	69f8      	ldr	r0, [r7, #28]
 80037c2:	f000 f8b5 	bl	8003930 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e002      	b.n	80037d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037d2:	69bb      	ldr	r3, [r7, #24]
	}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	461a      	mov	r2, r3
 80037f4:	21a5      	movs	r1, #165	; 0xa5
 80037f6:	f003 fe3e 	bl	8007476 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003804:	3b01      	subs	r3, #1
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f023 0307 	bic.w	r3, r3, #7
 8003812:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <prvInitialiseNewTask+0x58>
	__asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	617b      	str	r3, [r7, #20]
}
 8003830:	bf00      	nop
 8003832:	e7fe      	b.n	8003832 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01f      	beq.n	800387a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	e012      	b.n	8003866 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	7819      	ldrb	r1, [r3, #0]
 8003848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	3334      	adds	r3, #52	; 0x34
 8003850:	460a      	mov	r2, r1
 8003852:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d006      	beq.n	800386e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3301      	adds	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	2b0f      	cmp	r3, #15
 800386a:	d9e9      	bls.n	8003840 <prvInitialiseNewTask+0x64>
 800386c:	e000      	b.n	8003870 <prvInitialiseNewTask+0x94>
			{
				break;
 800386e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003878:	e003      	b.n	8003882 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	2b37      	cmp	r3, #55	; 0x37
 8003886:	d901      	bls.n	800388c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003888:	2337      	movs	r3, #55	; 0x37
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003896:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	2200      	movs	r2, #0
 800389c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	3304      	adds	r3, #4
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe ff14 	bl	80026d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	3318      	adds	r3, #24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fe ff0f 	bl	80026d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	2200      	movs	r2, #0
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	3358      	adds	r3, #88	; 0x58
 80038e2:	2260      	movs	r2, #96	; 0x60
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f003 fdc5 	bl	8007476 <memset>
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <prvInitialiseNewTask+0x148>)
 80038f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <prvInitialiseNewTask+0x14c>)
 80038f6:	661a      	str	r2, [r3, #96]	; 0x60
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	4a0c      	ldr	r2, [pc, #48]	; (800392c <prvInitialiseNewTask+0x150>)
 80038fc:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	69b8      	ldr	r0, [r7, #24]
 8003904:	f001 fb6e 	bl	8004fe4 <pxPortInitialiseStack>
 8003908:	4602      	mov	r2, r0
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800391a:	bf00      	nop
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	08009578 	.word	0x08009578
 8003928:	08009598 	.word	0x08009598
 800392c:	08009558 	.word	0x08009558

08003930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003938:	f001 fc84 	bl	8005244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800393c:	4b2d      	ldr	r3, [pc, #180]	; (80039f4 <prvAddNewTaskToReadyList+0xc4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3301      	adds	r3, #1
 8003942:	4a2c      	ldr	r2, [pc, #176]	; (80039f4 <prvAddNewTaskToReadyList+0xc4>)
 8003944:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003946:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <prvAddNewTaskToReadyList+0xc8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800394e:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <prvAddNewTaskToReadyList+0xc8>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <prvAddNewTaskToReadyList+0xc4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d110      	bne.n	800397e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800395c:	f000 fd44 	bl	80043e8 <prvInitialiseTaskLists>
 8003960:	e00d      	b.n	800397e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003962:	4b26      	ldr	r3, [pc, #152]	; (80039fc <prvAddNewTaskToReadyList+0xcc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <prvAddNewTaskToReadyList+0xc8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	429a      	cmp	r2, r3
 8003976:	d802      	bhi.n	800397e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003978:	4a1f      	ldr	r2, [pc, #124]	; (80039f8 <prvAddNewTaskToReadyList+0xc8>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800397e:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <prvAddNewTaskToReadyList+0xd0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	4a1e      	ldr	r2, [pc, #120]	; (8003a00 <prvAddNewTaskToReadyList+0xd0>)
 8003986:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003988:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <prvAddNewTaskToReadyList+0xd0>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <prvAddNewTaskToReadyList+0xd4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d903      	bls.n	80039a4 <prvAddNewTaskToReadyList+0x74>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	4a18      	ldr	r2, [pc, #96]	; (8003a04 <prvAddNewTaskToReadyList+0xd4>)
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <prvAddNewTaskToReadyList+0xd8>)
 80039b2:	441a      	add	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f7fe fe95 	bl	80026ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039c0:	f001 fc70 	bl	80052a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039c4:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <prvAddNewTaskToReadyList+0xcc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00e      	beq.n	80039ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <prvAddNewTaskToReadyList+0xc8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d207      	bcs.n	80039ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <prvAddNewTaskToReadyList+0xdc>)
 80039dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000de4 	.word	0x20000de4
 80039f8:	2000090c 	.word	0x2000090c
 80039fc:	20000df0 	.word	0x20000df0
 8003a00:	20000e00 	.word	0x20000e00
 8003a04:	20000dec 	.word	0x20000dec
 8003a08:	20000910 	.word	0x20000910
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003a18:	f001 fc14 	bl	8005244 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <vTaskDelete+0x18>
 8003a22:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <vTaskDelete+0xc4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	e000      	b.n	8003a2a <vTaskDelete+0x1a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe feb7 	bl	80027a4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3318      	adds	r3, #24
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe feae 	bl	80027a4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003a48:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <vTaskDelete+0xc8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a22      	ldr	r2, [pc, #136]	; (8003ad8 <vTaskDelete+0xc8>)
 8003a50:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <vTaskDelete+0xc4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d10b      	bne.n	8003a74 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	481e      	ldr	r0, [pc, #120]	; (8003adc <vTaskDelete+0xcc>)
 8003a64:	f7fe fe41 	bl	80026ea <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003a68:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <vTaskDelete+0xd0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <vTaskDelete+0xd0>)
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e009      	b.n	8003a88 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <vTaskDelete+0xd4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <vTaskDelete+0xd4>)
 8003a7c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fd20 	bl	80044c4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003a84:	f000 fd52 	bl	800452c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003a88:	f001 fc0c 	bl	80052a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003a8c:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <vTaskDelete+0xd8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01b      	beq.n	8003acc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8003a94:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <vTaskDelete+0xc4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d116      	bne.n	8003acc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003a9e:	4b13      	ldr	r3, [pc, #76]	; (8003aec <vTaskDelete+0xdc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <vTaskDelete+0xac>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	60bb      	str	r3, [r7, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <vTaskDelete+0xe0>)
 8003abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	2000090c 	.word	0x2000090c
 8003ad8:	20000e00 	.word	0x20000e00
 8003adc:	20000db4 	.word	0x20000db4
 8003ae0:	20000dc8 	.word	0x20000dc8
 8003ae4:	20000de4 	.word	0x20000de4
 8003ae8:	20000df0 	.word	0x20000df0
 8003aec:	20000e0c 	.word	0x20000e0c
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003afc:	f001 fba2 	bl	8005244 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <vTaskSuspend+0x18>
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <vTaskSuspend+0xd4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	e000      	b.n	8003b0e <vTaskSuspend+0x1a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe fe45 	bl	80027a4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3318      	adds	r3, #24
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fe3c 	bl	80027a4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4826      	ldr	r0, [pc, #152]	; (8003bcc <vTaskSuspend+0xd8>)
 8003b34:	f7fe fdd9 	bl	80026ea <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d103      	bne.n	8003b4c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003b4c:	f001 fbaa 	bl	80052a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003b50:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <vTaskSuspend+0xdc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003b58:	f001 fb74 	bl	8005244 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003b5c:	f000 fce6 	bl	800452c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003b60:	f001 fba0 	bl	80052a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003b64:	4b18      	ldr	r3, [pc, #96]	; (8003bc8 <vTaskSuspend+0xd4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d127      	bne.n	8003bbe <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8003b6e:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <vTaskSuspend+0xdc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d017      	beq.n	8003ba6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <vTaskSuspend+0xe0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <vTaskSuspend+0xa0>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	60bb      	str	r3, [r7, #8]
}
 8003b90:	bf00      	nop
 8003b92:	e7fe      	b.n	8003b92 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8003b94:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <vTaskSuspend+0xe4>)
 8003b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ba4:	e00b      	b.n	8003bbe <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <vTaskSuspend+0xd8>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <vTaskSuspend+0xe8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d103      	bne.n	8003bba <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <vTaskSuspend+0xd4>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
	}
 8003bb8:	e001      	b.n	8003bbe <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8003bba:	f000 fa2d 	bl	8004018 <vTaskSwitchContext>
	}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	2000090c 	.word	0x2000090c
 8003bcc:	20000dcc 	.word	0x20000dcc
 8003bd0:	20000df0 	.word	0x20000df0
 8003bd4:	20000e0c 	.word	0x20000e0c
 8003bd8:	e000ed04 	.word	0xe000ed04
 8003bdc:	20000de4 	.word	0x20000de4

08003be0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bee:	463a      	mov	r2, r7
 8003bf0:	1d39      	adds	r1, r7, #4
 8003bf2:	f107 0308 	add.w	r3, r7, #8
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fd16 	bl	8002628 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bfc:	6839      	ldr	r1, [r7, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	9202      	str	r2, [sp, #8]
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	2300      	movs	r3, #0
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	460a      	mov	r2, r1
 8003c0e:	4924      	ldr	r1, [pc, #144]	; (8003ca0 <vTaskStartScheduler+0xc0>)
 8003c10:	4824      	ldr	r0, [pc, #144]	; (8003ca4 <vTaskStartScheduler+0xc4>)
 8003c12:	f7ff fd41 	bl	8003698 <xTaskCreateStatic>
 8003c16:	4603      	mov	r3, r0
 8003c18:	4a23      	ldr	r2, [pc, #140]	; (8003ca8 <vTaskStartScheduler+0xc8>)
 8003c1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c1c:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <vTaskStartScheduler+0xc8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c24:	2301      	movs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e001      	b.n	8003c2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d102      	bne.n	8003c3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c34:	f000 fe88 	bl	8004948 <xTimerCreateTimerTask>
 8003c38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d11b      	bne.n	8003c78 <vTaskStartScheduler+0x98>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	613b      	str	r3, [r7, #16]
}
 8003c52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c54:	4b15      	ldr	r3, [pc, #84]	; (8003cac <vTaskStartScheduler+0xcc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3358      	adds	r3, #88	; 0x58
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <vTaskStartScheduler+0xd0>)
 8003c5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <vTaskStartScheduler+0xd4>)
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c66:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <vTaskStartScheduler+0xd8>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c6c:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <vTaskStartScheduler+0xdc>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c72:	f001 fa45 	bl	8005100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c76:	e00e      	b.n	8003c96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c7e:	d10a      	bne.n	8003c96 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <vTaskStartScheduler+0xb4>
}
 8003c96:	bf00      	nop
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	080094e4 	.word	0x080094e4
 8003ca4:	080043b9 	.word	0x080043b9
 8003ca8:	20000e08 	.word	0x20000e08
 8003cac:	2000090c 	.word	0x2000090c
 8003cb0:	20000018 	.word	0x20000018
 8003cb4:	20000e04 	.word	0x20000e04
 8003cb8:	20000df0 	.word	0x20000df0
 8003cbc:	20000de8 	.word	0x20000de8

08003cc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <vTaskSuspendAll+0x18>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	4a03      	ldr	r2, [pc, #12]	; (8003cd8 <vTaskSuspendAll+0x18>)
 8003ccc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	20000e0c 	.word	0x20000e0c

08003cdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cea:	4b42      	ldr	r3, [pc, #264]	; (8003df4 <xTaskResumeAll+0x118>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	603b      	str	r3, [r7, #0]
}
 8003d04:	bf00      	nop
 8003d06:	e7fe      	b.n	8003d06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d08:	f001 fa9c 	bl	8005244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d0c:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <xTaskResumeAll+0x118>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	4a38      	ldr	r2, [pc, #224]	; (8003df4 <xTaskResumeAll+0x118>)
 8003d14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d16:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <xTaskResumeAll+0x118>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d162      	bne.n	8003de4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d1e:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <xTaskResumeAll+0x11c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d05e      	beq.n	8003de4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d26:	e02f      	b.n	8003d88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d28:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <xTaskResumeAll+0x120>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3318      	adds	r3, #24
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe fd35 	bl	80027a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fd30 	bl	80027a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d48:	4b2d      	ldr	r3, [pc, #180]	; (8003e00 <xTaskResumeAll+0x124>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d903      	bls.n	8003d58 <xTaskResumeAll+0x7c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	4a2a      	ldr	r2, [pc, #168]	; (8003e00 <xTaskResumeAll+0x124>)
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4a27      	ldr	r2, [pc, #156]	; (8003e04 <xTaskResumeAll+0x128>)
 8003d66:	441a      	add	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f7fe fcbb 	bl	80026ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <xTaskResumeAll+0x12c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d302      	bcc.n	8003d88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d82:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <xTaskResumeAll+0x130>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d88:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <xTaskResumeAll+0x120>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1cb      	bne.n	8003d28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d96:	f000 fbc9 	bl	800452c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <xTaskResumeAll+0x134>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d010      	beq.n	8003dc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003da6:	f000 f847 	bl	8003e38 <xTaskIncrementTick>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003db0:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <xTaskResumeAll+0x130>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f1      	bne.n	8003da6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003dc2:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <xTaskResumeAll+0x134>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <xTaskResumeAll+0x130>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d009      	beq.n	8003de4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <xTaskResumeAll+0x138>)
 8003dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003de4:	f001 fa5e 	bl	80052a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003de8:	68bb      	ldr	r3, [r7, #8]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000e0c 	.word	0x20000e0c
 8003df8:	20000de4 	.word	0x20000de4
 8003dfc:	20000da0 	.word	0x20000da0
 8003e00:	20000dec 	.word	0x20000dec
 8003e04:	20000910 	.word	0x20000910
 8003e08:	2000090c 	.word	0x2000090c
 8003e0c:	20000df8 	.word	0x20000df8
 8003e10:	20000df4 	.word	0x20000df4
 8003e14:	e000ed04 	.word	0xe000ed04

08003e18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <xTaskGetTickCount+0x1c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e24:	687b      	ldr	r3, [r7, #4]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000de8 	.word	0x20000de8

08003e38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e42:	4b4f      	ldr	r3, [pc, #316]	; (8003f80 <xTaskIncrementTick+0x148>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 808f 	bne.w	8003f6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e4c:	4b4d      	ldr	r3, [pc, #308]	; (8003f84 <xTaskIncrementTick+0x14c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3301      	adds	r3, #1
 8003e52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e54:	4a4b      	ldr	r2, [pc, #300]	; (8003f84 <xTaskIncrementTick+0x14c>)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d120      	bne.n	8003ea2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e60:	4b49      	ldr	r3, [pc, #292]	; (8003f88 <xTaskIncrementTick+0x150>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	603b      	str	r3, [r7, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	e7fe      	b.n	8003e7e <xTaskIncrementTick+0x46>
 8003e80:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <xTaskIncrementTick+0x150>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <xTaskIncrementTick+0x154>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a3f      	ldr	r2, [pc, #252]	; (8003f88 <xTaskIncrementTick+0x150>)
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4a3f      	ldr	r2, [pc, #252]	; (8003f8c <xTaskIncrementTick+0x154>)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <xTaskIncrementTick+0x158>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	4a3d      	ldr	r2, [pc, #244]	; (8003f90 <xTaskIncrementTick+0x158>)
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	f000 fb45 	bl	800452c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ea2:	4b3c      	ldr	r3, [pc, #240]	; (8003f94 <xTaskIncrementTick+0x15c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d349      	bcc.n	8003f40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <xTaskIncrementTick+0x150>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eb6:	4b37      	ldr	r3, [pc, #220]	; (8003f94 <xTaskIncrementTick+0x15c>)
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ebc:	601a      	str	r2, [r3, #0]
					break;
 8003ebe:	e03f      	b.n	8003f40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec0:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <xTaskIncrementTick+0x150>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d203      	bcs.n	8003ee0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ed8:	4a2e      	ldr	r2, [pc, #184]	; (8003f94 <xTaskIncrementTick+0x15c>)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ede:	e02f      	b.n	8003f40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fc5d 	bl	80027a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	3318      	adds	r3, #24
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fc54 	bl	80027a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <xTaskIncrementTick+0x160>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d903      	bls.n	8003f10 <xTaskIncrementTick+0xd8>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	4a22      	ldr	r2, [pc, #136]	; (8003f98 <xTaskIncrementTick+0x160>)
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4a1f      	ldr	r2, [pc, #124]	; (8003f9c <xTaskIncrementTick+0x164>)
 8003f1e:	441a      	add	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f7fe fbdf 	bl	80026ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <xTaskIncrementTick+0x168>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d3b8      	bcc.n	8003eac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f3e:	e7b5      	b.n	8003eac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f40:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <xTaskIncrementTick+0x168>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f46:	4915      	ldr	r1, [pc, #84]	; (8003f9c <xTaskIncrementTick+0x164>)
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d901      	bls.n	8003f5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <xTaskIncrementTick+0x16c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e004      	b.n	8003f74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <xTaskIncrementTick+0x170>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	4a0d      	ldr	r2, [pc, #52]	; (8003fa8 <xTaskIncrementTick+0x170>)
 8003f72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f74:	697b      	ldr	r3, [r7, #20]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000e0c 	.word	0x20000e0c
 8003f84:	20000de8 	.word	0x20000de8
 8003f88:	20000d98 	.word	0x20000d98
 8003f8c:	20000d9c 	.word	0x20000d9c
 8003f90:	20000dfc 	.word	0x20000dfc
 8003f94:	20000e04 	.word	0x20000e04
 8003f98:	20000dec 	.word	0x20000dec
 8003f9c:	20000910 	.word	0x20000910
 8003fa0:	2000090c 	.word	0x2000090c
 8003fa4:	20000df8 	.word	0x20000df8
 8003fa8:	20000df4 	.word	0x20000df4

08003fac <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d103      	bne.n	8003fc4 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8003fbc:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <vTaskSetApplicationTaskTag+0x34>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e001      	b.n	8003fc8 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8003fc8:	f001 f93c 	bl	8005244 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8003fd2:	f001 f967 	bl	80052a4 <vPortExitCritical>
	}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	2000090c 	.word	0x2000090c

08003fe4 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
	{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	TaskHookFunction_t xReturn;

		/* If xTask is NULL then set the calling task's hook. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <xTaskGetApplicationTaskTag+0x14>
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <xTaskGetApplicationTaskTag+0x30>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	e000      	b.n	8003ffa <xTaskGetApplicationTaskTag+0x16>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8003ffc:	f001 f922 	bl	8005244 <vPortEnterCritical>
		{
			xReturn = pxTCB->pxTaskTag;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8004006:	f001 f94d 	bl	80052a4 <vPortExitCritical>

		return xReturn;
 800400a:	68bb      	ldr	r3, [r7, #8]
	}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	2000090c 	.word	0x2000090c

08004018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800401e:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <vTaskSwitchContext+0xc8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004026:	4b2f      	ldr	r3, [pc, #188]	; (80040e4 <vTaskSwitchContext+0xcc>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800402c:	e052      	b.n	80040d4 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 800402e:	4b2d      	ldr	r3, [pc, #180]	; (80040e4 <vTaskSwitchContext+0xcc>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8004034:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <vTaskSwitchContext+0xd0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a2c      	ldr	r2, [pc, #176]	; (80040ec <vTaskSwitchContext+0xd4>)
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004040:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <vTaskSwitchContext+0xd8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	e010      	b.n	800406a <vTaskSwitchContext+0x52>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <vTaskSwitchContext+0x4c>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	607b      	str	r3, [r7, #4]
}
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <vTaskSwitchContext+0x4a>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3b01      	subs	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	4922      	ldr	r1, [pc, #136]	; (80040f4 <vTaskSwitchContext+0xdc>)
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0e4      	beq.n	8004048 <vTaskSwitchContext+0x30>
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4a1a      	ldr	r2, [pc, #104]	; (80040f4 <vTaskSwitchContext+0xdc>)
 800408a:	4413      	add	r3, r2
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	3308      	adds	r3, #8
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d104      	bne.n	80040ae <vTaskSwitchContext+0x96>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <vTaskSwitchContext+0xd0>)
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	4a0d      	ldr	r2, [pc, #52]	; (80040f0 <vTaskSwitchContext+0xd8>)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <vTaskSwitchContext+0xd0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040c6:	4a09      	ldr	r2, [pc, #36]	; (80040ec <vTaskSwitchContext+0xd4>)
 80040c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <vTaskSwitchContext+0xd0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3358      	adds	r3, #88	; 0x58
 80040d0:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <vTaskSwitchContext+0xe0>)
 80040d2:	6013      	str	r3, [r2, #0]
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	20000e0c 	.word	0x20000e0c
 80040e4:	20000df8 	.word	0x20000df8
 80040e8:	2000090c 	.word	0x2000090c
 80040ec:	20000de0 	.word	0x20000de0
 80040f0:	20000dec 	.word	0x20000dec
 80040f4:	20000910 	.word	0x20000910
 80040f8:	20000018 	.word	0x20000018

080040fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	60fb      	str	r3, [r7, #12]
}
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <vTaskPlaceOnEventList+0x44>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3318      	adds	r3, #24
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fe fb01 	bl	8002732 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004130:	2101      	movs	r1, #1
 8004132:	6838      	ldr	r0, [r7, #0]
 8004134:	f000 fbb4 	bl	80048a0 <prvAddCurrentTaskToDelayedList>
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	2000090c 	.word	0x2000090c

08004144 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	617b      	str	r3, [r7, #20]
}
 8004168:	bf00      	nop
 800416a:	e7fe      	b.n	800416a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <vTaskPlaceOnEventListRestricted+0x54>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3318      	adds	r3, #24
 8004172:	4619      	mov	r1, r3
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7fe fab8 	bl	80026ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004184:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	68b8      	ldr	r0, [r7, #8]
 800418a:	f000 fb89 	bl	80048a0 <prvAddCurrentTaskToDelayedList>
	}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000090c 	.word	0x2000090c

0800419c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60fb      	str	r3, [r7, #12]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	3318      	adds	r3, #24
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe fae9 	bl	80027a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041d2:	4b1e      	ldr	r3, [pc, #120]	; (800424c <xTaskRemoveFromEventList+0xb0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11d      	bne.n	8004216 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	3304      	adds	r3, #4
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe fae0 	bl	80027a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <xTaskRemoveFromEventList+0xb4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d903      	bls.n	80041f8 <xTaskRemoveFromEventList+0x5c>
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4a16      	ldr	r2, [pc, #88]	; (8004250 <xTaskRemoveFromEventList+0xb4>)
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4a13      	ldr	r2, [pc, #76]	; (8004254 <xTaskRemoveFromEventList+0xb8>)
 8004206:	441a      	add	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f7fe fa6b 	bl	80026ea <vListInsertEnd>
 8004214:	e005      	b.n	8004222 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	3318      	adds	r3, #24
 800421a:	4619      	mov	r1, r3
 800421c:	480e      	ldr	r0, [pc, #56]	; (8004258 <xTaskRemoveFromEventList+0xbc>)
 800421e:	f7fe fa64 	bl	80026ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004226:	4b0d      	ldr	r3, [pc, #52]	; (800425c <xTaskRemoveFromEventList+0xc0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	429a      	cmp	r2, r3
 800422e:	d905      	bls.n	800423c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004230:	2301      	movs	r3, #1
 8004232:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004234:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <xTaskRemoveFromEventList+0xc4>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e001      	b.n	8004240 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004240:	697b      	ldr	r3, [r7, #20]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000e0c 	.word	0x20000e0c
 8004250:	20000dec 	.word	0x20000dec
 8004254:	20000910 	.word	0x20000910
 8004258:	20000da0 	.word	0x20000da0
 800425c:	2000090c 	.word	0x2000090c
 8004260:	20000df8 	.word	0x20000df8

08004264 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	60fb      	str	r3, [r7, #12]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8004288:	f000 ffdc 	bl	8005244 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <vTaskSetTimeOutState+0x44>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <vTaskSetTimeOutState+0x48>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800429c:	f001 f802 	bl	80052a4 <vPortExitCritical>
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000dfc 	.word	0x20000dfc
 80042ac:	20000de8 	.word	0x20000de8

080042b0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <vTaskInternalSetTimeOutState+0x24>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <vTaskInternalSetTimeOutState+0x28>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	605a      	str	r2, [r3, #4]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	20000dfc 	.word	0x20000dfc
 80042d8:	20000de8 	.word	0x20000de8

080042dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	613b      	str	r3, [r7, #16]
}
 80042fe:	bf00      	nop
 8004300:	e7fe      	b.n	8004300 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	60fb      	str	r3, [r7, #12]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800431e:	f000 ff91 	bl	8005244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <xTaskCheckForTimeOut+0xbc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800433a:	d102      	bne.n	8004342 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	e023      	b.n	800438a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <xTaskCheckForTimeOut+0xc0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d007      	beq.n	800435e <xTaskCheckForTimeOut+0x82>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004358:	2301      	movs	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	e015      	b.n	800438a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	429a      	cmp	r2, r3
 8004366:	d20b      	bcs.n	8004380 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad2      	subs	r2, r2, r3
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff9b 	bl	80042b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	e004      	b.n	800438a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800438a:	f000 ff8b 	bl	80052a4 <vPortExitCritical>

	return xReturn;
 800438e:	69fb      	ldr	r3, [r7, #28]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000de8 	.word	0x20000de8
 800439c:	20000dfc 	.word	0x20000dfc

080043a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <vTaskMissedYield+0x14>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	20000df8 	.word	0x20000df8

080043b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043c0:	f000 f852 	bl	8004468 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <prvIdleTask+0x28>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d9f9      	bls.n	80043c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <prvIdleTask+0x2c>)
 80043ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043dc:	e7f0      	b.n	80043c0 <prvIdleTask+0x8>
 80043de:	bf00      	nop
 80043e0:	20000910 	.word	0x20000910
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ee:	2300      	movs	r3, #0
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	e00c      	b.n	800440e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4a12      	ldr	r2, [pc, #72]	; (8004448 <prvInitialiseTaskLists+0x60>)
 8004400:	4413      	add	r3, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe f944 	bl	8002690 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3301      	adds	r3, #1
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b37      	cmp	r3, #55	; 0x37
 8004412:	d9ef      	bls.n	80043f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004414:	480d      	ldr	r0, [pc, #52]	; (800444c <prvInitialiseTaskLists+0x64>)
 8004416:	f7fe f93b 	bl	8002690 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800441a:	480d      	ldr	r0, [pc, #52]	; (8004450 <prvInitialiseTaskLists+0x68>)
 800441c:	f7fe f938 	bl	8002690 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004420:	480c      	ldr	r0, [pc, #48]	; (8004454 <prvInitialiseTaskLists+0x6c>)
 8004422:	f7fe f935 	bl	8002690 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004426:	480c      	ldr	r0, [pc, #48]	; (8004458 <prvInitialiseTaskLists+0x70>)
 8004428:	f7fe f932 	bl	8002690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800442c:	480b      	ldr	r0, [pc, #44]	; (800445c <prvInitialiseTaskLists+0x74>)
 800442e:	f7fe f92f 	bl	8002690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <prvInitialiseTaskLists+0x78>)
 8004434:	4a05      	ldr	r2, [pc, #20]	; (800444c <prvInitialiseTaskLists+0x64>)
 8004436:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <prvInitialiseTaskLists+0x7c>)
 800443a:	4a05      	ldr	r2, [pc, #20]	; (8004450 <prvInitialiseTaskLists+0x68>)
 800443c:	601a      	str	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000910 	.word	0x20000910
 800444c:	20000d70 	.word	0x20000d70
 8004450:	20000d84 	.word	0x20000d84
 8004454:	20000da0 	.word	0x20000da0
 8004458:	20000db4 	.word	0x20000db4
 800445c:	20000dcc 	.word	0x20000dcc
 8004460:	20000d98 	.word	0x20000d98
 8004464:	20000d9c 	.word	0x20000d9c

08004468 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800446e:	e019      	b.n	80044a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004470:	f000 fee8 	bl	8005244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004474:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <prvCheckTasksWaitingTermination+0x50>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe f98f 	bl	80027a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <prvCheckTasksWaitingTermination+0x54>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3b01      	subs	r3, #1
 800448c:	4a0b      	ldr	r2, [pc, #44]	; (80044bc <prvCheckTasksWaitingTermination+0x54>)
 800448e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <prvCheckTasksWaitingTermination+0x58>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3b01      	subs	r3, #1
 8004496:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <prvCheckTasksWaitingTermination+0x58>)
 8004498:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800449a:	f000 ff03 	bl	80052a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f810 	bl	80044c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <prvCheckTasksWaitingTermination+0x58>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e1      	bne.n	8004470 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000db4 	.word	0x20000db4
 80044bc:	20000de4 	.word	0x20000de4
 80044c0:	20000dc8 	.word	0x20000dc8

080044c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3358      	adds	r3, #88	; 0x58
 80044d0:	4618      	mov	r0, r3
 80044d2:	f003 f997 	bl	8007804 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d108      	bne.n	80044f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 f89b 	bl	8005620 <vPortFree>
				vPortFree( pxTCB );
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f001 f898 	bl	8005620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044f0:	e018      	b.n	8004524 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d103      	bne.n	8004504 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f001 f88f 	bl	8005620 <vPortFree>
	}
 8004502:	e00f      	b.n	8004524 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800450a:	2b02      	cmp	r3, #2
 800450c:	d00a      	beq.n	8004524 <prvDeleteTCB+0x60>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	60fb      	str	r3, [r7, #12]
}
 8004520:	bf00      	nop
 8004522:	e7fe      	b.n	8004522 <prvDeleteTCB+0x5e>
	}
 8004524:	bf00      	nop
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004532:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <prvResetNextTaskUnblockTime+0x38>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <prvResetNextTaskUnblockTime+0x3c>)
 800453e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004544:	e008      	b.n	8004558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <prvResetNextTaskUnblockTime+0x38>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a04      	ldr	r2, [pc, #16]	; (8004568 <prvResetNextTaskUnblockTime+0x3c>)
 8004556:	6013      	str	r3, [r2, #0]
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	20000d98 	.word	0x20000d98
 8004568:	20000e04 	.word	0x20000e04

0800456c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <xTaskGetCurrentTaskHandle+0x1c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004578:	687b      	ldr	r3, [r7, #4]
	}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	2000090c 	.word	0x2000090c

0800458c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004592:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <xTaskGetSchedulerState+0x34>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800459a:	2301      	movs	r3, #1
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	e008      	b.n	80045b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a0:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <xTaskGetSchedulerState+0x38>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045a8:	2302      	movs	r3, #2
 80045aa:	607b      	str	r3, [r7, #4]
 80045ac:	e001      	b.n	80045b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045b2:	687b      	ldr	r3, [r7, #4]
	}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	20000df0 	.word	0x20000df0
 80045c4:	20000e0c 	.word	0x20000e0c

080045c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d051      	beq.n	8004682 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e2:	4b2a      	ldr	r3, [pc, #168]	; (800468c <xTaskPriorityInherit+0xc4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d241      	bcs.n	8004670 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db06      	blt.n	8004602 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f4:	4b25      	ldr	r3, [pc, #148]	; (800468c <xTaskPriorityInherit+0xc4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6959      	ldr	r1, [r3, #20]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <xTaskPriorityInherit+0xc8>)
 8004614:	4413      	add	r3, r2
 8004616:	4299      	cmp	r1, r3
 8004618:	d122      	bne.n	8004660 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3304      	adds	r3, #4
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe f8c0 	bl	80027a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <xTaskPriorityInherit+0xc4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004632:	4b18      	ldr	r3, [pc, #96]	; (8004694 <xTaskPriorityInherit+0xcc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d903      	bls.n	8004642 <xTaskPriorityInherit+0x7a>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	4a15      	ldr	r2, [pc, #84]	; (8004694 <xTaskPriorityInherit+0xcc>)
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4a10      	ldr	r2, [pc, #64]	; (8004690 <xTaskPriorityInherit+0xc8>)
 8004650:	441a      	add	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f7fe f846 	bl	80026ea <vListInsertEnd>
 800465e:	e004      	b.n	800466a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <xTaskPriorityInherit+0xc4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800466a:	2301      	movs	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	e008      	b.n	8004682 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <xTaskPriorityInherit+0xc4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	429a      	cmp	r2, r3
 800467c:	d201      	bcs.n	8004682 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800467e:	2301      	movs	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004682:	68fb      	ldr	r3, [r7, #12]
	}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	2000090c 	.word	0x2000090c
 8004690:	20000910 	.word	0x20000910
 8004694:	20000dec 	.word	0x20000dec

08004698 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d056      	beq.n	800475c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046ae:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <xTaskPriorityDisinherit+0xd0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d00a      	beq.n	80046ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60fb      	str	r3, [r7, #12]
}
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	60bb      	str	r3, [r7, #8]
}
 80046e8:	bf00      	nop
 80046ea:	e7fe      	b.n	80046ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f0:	1e5a      	subs	r2, r3, #1
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	429a      	cmp	r2, r3
 8004700:	d02c      	beq.n	800475c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004706:	2b00      	cmp	r3, #0
 8004708:	d128      	bne.n	800475c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	3304      	adds	r3, #4
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe f848 	bl	80027a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <xTaskPriorityDisinherit+0xd4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d903      	bls.n	800473c <xTaskPriorityDisinherit+0xa4>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	4a0c      	ldr	r2, [pc, #48]	; (800476c <xTaskPriorityDisinherit+0xd4>)
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <xTaskPriorityDisinherit+0xd8>)
 800474a:	441a      	add	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	3304      	adds	r3, #4
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f7fd ffc9 	bl	80026ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004758:	2301      	movs	r3, #1
 800475a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800475c:	697b      	ldr	r3, [r7, #20]
	}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	2000090c 	.word	0x2000090c
 800476c:	20000dec 	.word	0x20000dec
 8004770:	20000910 	.word	0x20000910

08004774 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004782:	2301      	movs	r3, #1
 8004784:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d06a      	beq.n	8004862 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60fb      	str	r3, [r7, #12]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d902      	bls.n	80047ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	61fb      	str	r3, [r7, #28]
 80047b8:	e002      	b.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d04b      	beq.n	8004862 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d146      	bne.n	8004862 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80047d4:	4b25      	ldr	r3, [pc, #148]	; (800486c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d10a      	bne.n	80047f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60bb      	str	r3, [r7, #8]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	db04      	blt.n	8004812 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	6959      	ldr	r1, [r3, #20]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4a13      	ldr	r2, [pc, #76]	; (8004870 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004822:	4413      	add	r3, r2
 8004824:	4299      	cmp	r1, r3
 8004826:	d11c      	bne.n	8004862 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	3304      	adds	r3, #4
 800482c:	4618      	mov	r0, r3
 800482e:	f7fd ffb9 	bl	80027a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d903      	bls.n	8004846 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4a07      	ldr	r2, [pc, #28]	; (8004870 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004854:	441a      	add	r2, r3
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7fd ff44 	bl	80026ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004862:	bf00      	nop
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	2000090c 	.word	0x2000090c
 8004870:	20000910 	.word	0x20000910
 8004874:	20000dec 	.word	0x20000dec

08004878 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800487c:	4b07      	ldr	r3, [pc, #28]	; (800489c <pvTaskIncrementMutexHeldCount+0x24>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d004      	beq.n	800488e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <pvTaskIncrementMutexHeldCount+0x24>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800488a:	3201      	adds	r2, #1
 800488c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800488e:	4b03      	ldr	r3, [pc, #12]	; (800489c <pvTaskIncrementMutexHeldCount+0x24>)
 8004890:	681b      	ldr	r3, [r3, #0]
	}
 8004892:	4618      	mov	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	2000090c 	.word	0x2000090c

080048a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048aa:	4b21      	ldr	r3, [pc, #132]	; (8004930 <prvAddCurrentTaskToDelayedList+0x90>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048b0:	4b20      	ldr	r3, [pc, #128]	; (8004934 <prvAddCurrentTaskToDelayedList+0x94>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3304      	adds	r3, #4
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fd ff74 	bl	80027a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c2:	d10a      	bne.n	80048da <prvAddCurrentTaskToDelayedList+0x3a>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048ca:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <prvAddCurrentTaskToDelayedList+0x94>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4819      	ldr	r0, [pc, #100]	; (8004938 <prvAddCurrentTaskToDelayedList+0x98>)
 80048d4:	f7fd ff09 	bl	80026ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048d8:	e026      	b.n	8004928 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4413      	add	r3, r2
 80048e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048e2:	4b14      	ldr	r3, [pc, #80]	; (8004934 <prvAddCurrentTaskToDelayedList+0x94>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d209      	bcs.n	8004906 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f2:	4b12      	ldr	r3, [pc, #72]	; (800493c <prvAddCurrentTaskToDelayedList+0x9c>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <prvAddCurrentTaskToDelayedList+0x94>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f7fd ff17 	bl	8002732 <vListInsert>
}
 8004904:	e010      	b.n	8004928 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004906:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <prvAddCurrentTaskToDelayedList+0x94>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f7fd ff0d 	bl	8002732 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <prvAddCurrentTaskToDelayedList+0xa4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	d202      	bcs.n	8004928 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004922:	4a08      	ldr	r2, [pc, #32]	; (8004944 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6013      	str	r3, [r2, #0]
}
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20000de8 	.word	0x20000de8
 8004934:	2000090c 	.word	0x2000090c
 8004938:	20000dcc 	.word	0x20000dcc
 800493c:	20000d9c 	.word	0x20000d9c
 8004940:	20000d98 	.word	0x20000d98
 8004944:	20000e04 	.word	0x20000e04

08004948 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004952:	f000 fb07 	bl	8004f64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004956:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <xTimerCreateTimerTask+0x80>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d021      	beq.n	80049a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004966:	1d3a      	adds	r2, r7, #4
 8004968:	f107 0108 	add.w	r1, r7, #8
 800496c:	f107 030c 	add.w	r3, r7, #12
 8004970:	4618      	mov	r0, r3
 8004972:	f7fd fe73 	bl	800265c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	9202      	str	r2, [sp, #8]
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	2302      	movs	r3, #2
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	2300      	movs	r3, #0
 8004986:	460a      	mov	r2, r1
 8004988:	4910      	ldr	r1, [pc, #64]	; (80049cc <xTimerCreateTimerTask+0x84>)
 800498a:	4811      	ldr	r0, [pc, #68]	; (80049d0 <xTimerCreateTimerTask+0x88>)
 800498c:	f7fe fe84 	bl	8003698 <xTaskCreateStatic>
 8004990:	4603      	mov	r3, r0
 8004992:	4a10      	ldr	r2, [pc, #64]	; (80049d4 <xTimerCreateTimerTask+0x8c>)
 8004994:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <xTimerCreateTimerTask+0x8c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800499e:	2301      	movs	r3, #1
 80049a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	613b      	str	r3, [r7, #16]
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80049be:	697b      	ldr	r3, [r7, #20]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000e40 	.word	0x20000e40
 80049cc:	080094ec 	.word	0x080094ec
 80049d0:	08004b0d 	.word	0x08004b0d
 80049d4:	20000e44 	.word	0x20000e44

080049d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <xTimerGenericCommand+0x2e>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	623b      	str	r3, [r7, #32]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a06:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <xTimerGenericCommand+0x98>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d02a      	beq.n	8004a64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b05      	cmp	r3, #5
 8004a1e:	dc18      	bgt.n	8004a52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a20:	f7ff fdb4 	bl	800458c <xTaskGetSchedulerState>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d109      	bne.n	8004a3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a2a:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <xTimerGenericCommand+0x98>)
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	f107 0110 	add.w	r1, r7, #16
 8004a32:	2300      	movs	r3, #0
 8004a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a36:	f7fe f8d5 	bl	8002be4 <xQueueGenericSend>
 8004a3a:	6278      	str	r0, [r7, #36]	; 0x24
 8004a3c:	e012      	b.n	8004a64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <xTimerGenericCommand+0x98>)
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	f107 0110 	add.w	r1, r7, #16
 8004a46:	2300      	movs	r3, #0
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f7fe f8cb 	bl	8002be4 <xQueueGenericSend>
 8004a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8004a50:	e008      	b.n	8004a64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <xTimerGenericCommand+0x98>)
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	f107 0110 	add.w	r1, r7, #16
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	f7fe f9bf 	bl	8002de0 <xQueueGenericSendFromISR>
 8004a62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3728      	adds	r7, #40	; 0x28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000e40 	.word	0x20000e40

08004a74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a7e:	4b22      	ldr	r3, [pc, #136]	; (8004b08 <prvProcessExpiredTimer+0x94>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fd fe89 	bl	80027a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d022      	beq.n	8004ae6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	18d1      	adds	r1, r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	6978      	ldr	r0, [r7, #20]
 8004aae:	f000 f8d1 	bl	8004c54 <prvInsertTimerInActiveList>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01f      	beq.n	8004af8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f7ff ff88 	bl	80049d8 <xTimerGenericCommand>
 8004ac8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d113      	bne.n	8004af8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	60fb      	str	r3, [r7, #12]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	6978      	ldr	r0, [r7, #20]
 8004afe:	4798      	blx	r3
}
 8004b00:	bf00      	nop
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000e38 	.word	0x20000e38

08004b0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b14:	f107 0308 	add.w	r3, r7, #8
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f857 	bl	8004bcc <prvGetNextExpireTime>
 8004b1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4619      	mov	r1, r3
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f803 	bl	8004b30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b2a:	f000 f8d5 	bl	8004cd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b2e:	e7f1      	b.n	8004b14 <prvTimerTask+0x8>

08004b30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b3a:	f7ff f8c1 	bl	8003cc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b3e:	f107 0308 	add.w	r3, r7, #8
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f866 	bl	8004c14 <prvSampleTimeNow>
 8004b48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d130      	bne.n	8004bb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <prvProcessTimerOrBlockTask+0x3c>
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d806      	bhi.n	8004b6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b5e:	f7ff f8bd 	bl	8003cdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff ff85 	bl	8004a74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b6a:	e024      	b.n	8004bb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b72:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <prvProcessTimerOrBlockTask+0x90>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <prvProcessTimerOrBlockTask+0x50>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <prvProcessTimerOrBlockTask+0x52>
 8004b80:	2300      	movs	r3, #0
 8004b82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <prvProcessTimerOrBlockTask+0x94>)
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	4619      	mov	r1, r3
 8004b92:	f7fe fd4d 	bl	8003630 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b96:	f7ff f8a1 	bl	8003cdc <xTaskResumeAll>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <prvProcessTimerOrBlockTask+0x98>)
 8004ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	f3bf 8f6f 	isb	sy
}
 8004bb0:	e001      	b.n	8004bb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bb2:	f7ff f893 	bl	8003cdc <xTaskResumeAll>
}
 8004bb6:	bf00      	nop
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000e3c 	.word	0x20000e3c
 8004bc4:	20000e40 	.word	0x20000e40
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <prvGetNextExpireTime+0x44>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <prvGetNextExpireTime+0x16>
 8004bde:	2201      	movs	r2, #1
 8004be0:	e000      	b.n	8004be4 <prvGetNextExpireTime+0x18>
 8004be2:	2200      	movs	r2, #0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bf0:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <prvGetNextExpireTime+0x44>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	e001      	b.n	8004c00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c00:	68fb      	ldr	r3, [r7, #12]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	20000e38 	.word	0x20000e38

08004c14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c1c:	f7ff f8fc 	bl	8003e18 <xTaskGetTickCount>
 8004c20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <prvSampleTimeNow+0x3c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d205      	bcs.n	8004c38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c2c:	f000 f936 	bl	8004e9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	e002      	b.n	8004c3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c3e:	4a04      	ldr	r2, [pc, #16]	; (8004c50 <prvSampleTimeNow+0x3c>)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c44:	68fb      	ldr	r3, [r7, #12]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000e48 	.word	0x20000e48

08004c54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d812      	bhi.n	8004ca0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	1ad2      	subs	r2, r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d302      	bcc.n	8004c8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e01b      	b.n	8004cc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c8e:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <prvInsertTimerInActiveList+0x7c>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7fd fd4a 	bl	8002732 <vListInsert>
 8004c9e:	e012      	b.n	8004cc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d206      	bcs.n	8004cb6 <prvInsertTimerInActiveList+0x62>
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d302      	bcc.n	8004cb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	e007      	b.n	8004cc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <prvInsertTimerInActiveList+0x80>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f7fd fd36 	bl	8002732 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004cc6:	697b      	ldr	r3, [r7, #20]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000e3c 	.word	0x20000e3c
 8004cd4:	20000e38 	.word	0x20000e38

08004cd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08e      	sub	sp, #56	; 0x38
 8004cdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cde:	e0ca      	b.n	8004e76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	da18      	bge.n	8004d18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	3304      	adds	r3, #4
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	61fb      	str	r3, [r7, #28]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d0e:	6850      	ldr	r0, [r2, #4]
 8004d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d12:	6892      	ldr	r2, [r2, #8]
 8004d14:	4611      	mov	r1, r2
 8004d16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f2c0 80aa 	blt.w	8004e74 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fd fd37 	bl	80027a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d36:	463b      	mov	r3, r7
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ff6b 	bl	8004c14 <prvSampleTimeNow>
 8004d3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b09      	cmp	r3, #9
 8004d44:	f200 8097 	bhi.w	8004e76 <prvProcessReceivedCommands+0x19e>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <prvProcessReceivedCommands+0x78>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d79 	.word	0x08004d79
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004d79 	.word	0x08004d79
 8004d5c:	08004ded 	.word	0x08004ded
 8004d60:	08004e01 	.word	0x08004e01
 8004d64:	08004e4b 	.word	0x08004e4b
 8004d68:	08004d79 	.word	0x08004d79
 8004d6c:	08004d79 	.word	0x08004d79
 8004d70:	08004ded 	.word	0x08004ded
 8004d74:	08004e01 	.word	0x08004e01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	18d1      	adds	r1, r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d98:	f7ff ff5c 	bl	8004c54 <prvInsertTimerInActiveList>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d069      	beq.n	8004e76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004da8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d05e      	beq.n	8004e76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	441a      	add	r2, r3
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dca:	f7ff fe05 	bl	80049d8 <xTimerGenericCommand>
 8004dce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d14f      	bne.n	8004e76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	61bb      	str	r3, [r7, #24]
}
 8004de8:	bf00      	nop
 8004dea:	e7fe      	b.n	8004dea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004dfe:	e03a      	b.n	8004e76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	617b      	str	r3, [r7, #20]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	18d1      	adds	r1, r2, r3
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e44:	f7ff ff06 	bl	8004c54 <prvInsertTimerInActiveList>
					break;
 8004e48:	e015      	b.n	8004e76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d103      	bne.n	8004e60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e5a:	f000 fbe1 	bl	8005620 <vPortFree>
 8004e5e:	e00a      	b.n	8004e76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e66:	f023 0301 	bic.w	r3, r3, #1
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e72:	e000      	b.n	8004e76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e76:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <prvProcessReceivedCommands+0x1c0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	1d39      	adds	r1, r7, #4
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe f84a 	bl	8002f18 <xQueueReceive>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f47f af2a 	bne.w	8004ce0 <prvProcessReceivedCommands+0x8>
	}
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	3730      	adds	r7, #48	; 0x30
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000e40 	.word	0x20000e40

08004e9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ea2:	e048      	b.n	8004f36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ea4:	4b2d      	ldr	r3, [pc, #180]	; (8004f5c <prvSwitchTimerLists+0xc0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eae:	4b2b      	ldr	r3, [pc, #172]	; (8004f5c <prvSwitchTimerLists+0xc0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fd fc71 	bl	80027a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d02e      	beq.n	8004f36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4413      	add	r3, r2
 8004ee0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d90e      	bls.n	8004f08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ef6:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <prvSwitchTimerLists+0xc0>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7fd fc16 	bl	8002732 <vListInsert>
 8004f06:	e016      	b.n	8004f36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	2100      	movs	r1, #0
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff fd60 	bl	80049d8 <xTimerGenericCommand>
 8004f18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	603b      	str	r3, [r7, #0]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f36:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <prvSwitchTimerLists+0xc0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1b1      	bne.n	8004ea4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <prvSwitchTimerLists+0xc0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <prvSwitchTimerLists+0xc4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <prvSwitchTimerLists+0xc0>)
 8004f4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f4e:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <prvSwitchTimerLists+0xc4>)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	6013      	str	r3, [r2, #0]
}
 8004f54:	bf00      	nop
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000e38 	.word	0x20000e38
 8004f60:	20000e3c 	.word	0x20000e3c

08004f64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f6a:	f000 f96b 	bl	8005244 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f6e:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <prvCheckForValidListAndQueue+0x60>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d120      	bne.n	8004fb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f76:	4814      	ldr	r0, [pc, #80]	; (8004fc8 <prvCheckForValidListAndQueue+0x64>)
 8004f78:	f7fd fb8a 	bl	8002690 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f7c:	4813      	ldr	r0, [pc, #76]	; (8004fcc <prvCheckForValidListAndQueue+0x68>)
 8004f7e:	f7fd fb87 	bl	8002690 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f82:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <prvCheckForValidListAndQueue+0x6c>)
 8004f84:	4a10      	ldr	r2, [pc, #64]	; (8004fc8 <prvCheckForValidListAndQueue+0x64>)
 8004f86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f88:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <prvCheckForValidListAndQueue+0x70>)
 8004f8a:	4a10      	ldr	r2, [pc, #64]	; (8004fcc <prvCheckForValidListAndQueue+0x68>)
 8004f8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f8e:	2300      	movs	r3, #0
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	4b11      	ldr	r3, [pc, #68]	; (8004fd8 <prvCheckForValidListAndQueue+0x74>)
 8004f94:	4a11      	ldr	r2, [pc, #68]	; (8004fdc <prvCheckForValidListAndQueue+0x78>)
 8004f96:	2110      	movs	r1, #16
 8004f98:	200a      	movs	r0, #10
 8004f9a:	f7fd fc95 	bl	80028c8 <xQueueGenericCreateStatic>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <prvCheckForValidListAndQueue+0x60>)
 8004fa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <prvCheckForValidListAndQueue+0x60>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <prvCheckForValidListAndQueue+0x60>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	490b      	ldr	r1, [pc, #44]	; (8004fe0 <prvCheckForValidListAndQueue+0x7c>)
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fe fae8 	bl	8003588 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fb8:	f000 f974 	bl	80052a4 <vPortExitCritical>
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000e40 	.word	0x20000e40
 8004fc8:	20000e10 	.word	0x20000e10
 8004fcc:	20000e24 	.word	0x20000e24
 8004fd0:	20000e38 	.word	0x20000e38
 8004fd4:	20000e3c 	.word	0x20000e3c
 8004fd8:	20000eec 	.word	0x20000eec
 8004fdc:	20000e4c 	.word	0x20000e4c
 8004fe0:	080094f4 	.word	0x080094f4

08004fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3b04      	subs	r3, #4
 8004ff4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3b04      	subs	r3, #4
 8005002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f023 0201 	bic.w	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3b04      	subs	r3, #4
 8005012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005014:	4a0c      	ldr	r2, [pc, #48]	; (8005048 <pxPortInitialiseStack+0x64>)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3b14      	subs	r3, #20
 800501e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3b04      	subs	r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f06f 0202 	mvn.w	r2, #2
 8005032:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3b20      	subs	r3, #32
 8005038:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	0800504d 	.word	0x0800504d

0800504c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005056:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <prvTaskExitError+0x54>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800505e:	d00a      	beq.n	8005076 <prvTaskExitError+0x2a>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	60fb      	str	r3, [r7, #12]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <prvTaskExitError+0x28>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	60bb      	str	r3, [r7, #8]
}
 8005088:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800508a:	bf00      	nop
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0fc      	beq.n	800508c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	2000000c 	.word	0x2000000c
	...

080050b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <pxCurrentTCBConst2>)
 80050b2:	6819      	ldr	r1, [r3, #0]
 80050b4:	6808      	ldr	r0, [r1, #0]
 80050b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ba:	f380 8809 	msr	PSP, r0
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f380 8811 	msr	BASEPRI, r0
 80050ca:	4770      	bx	lr
 80050cc:	f3af 8000 	nop.w

080050d0 <pxCurrentTCBConst2>:
 80050d0:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop

080050d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050d8:	4808      	ldr	r0, [pc, #32]	; (80050fc <prvPortStartFirstTask+0x24>)
 80050da:	6800      	ldr	r0, [r0, #0]
 80050dc:	6800      	ldr	r0, [r0, #0]
 80050de:	f380 8808 	msr	MSP, r0
 80050e2:	f04f 0000 	mov.w	r0, #0
 80050e6:	f380 8814 	msr	CONTROL, r0
 80050ea:	b662      	cpsie	i
 80050ec:	b661      	cpsie	f
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	df00      	svc	0
 80050f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050fa:	bf00      	nop
 80050fc:	e000ed08 	.word	0xe000ed08

08005100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005106:	4b46      	ldr	r3, [pc, #280]	; (8005220 <xPortStartScheduler+0x120>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a46      	ldr	r2, [pc, #280]	; (8005224 <xPortStartScheduler+0x124>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10a      	bne.n	8005126 <xPortStartScheduler+0x26>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	613b      	str	r3, [r7, #16]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005126:	4b3e      	ldr	r3, [pc, #248]	; (8005220 <xPortStartScheduler+0x120>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a3f      	ldr	r2, [pc, #252]	; (8005228 <xPortStartScheduler+0x128>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10a      	bne.n	8005146 <xPortStartScheduler+0x46>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	60fb      	str	r3, [r7, #12]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005146:	4b39      	ldr	r3, [pc, #228]	; (800522c <xPortStartScheduler+0x12c>)
 8005148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	22ff      	movs	r2, #255	; 0xff
 8005156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005168:	b2da      	uxtb	r2, r3
 800516a:	4b31      	ldr	r3, [pc, #196]	; (8005230 <xPortStartScheduler+0x130>)
 800516c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800516e:	4b31      	ldr	r3, [pc, #196]	; (8005234 <xPortStartScheduler+0x134>)
 8005170:	2207      	movs	r2, #7
 8005172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005174:	e009      	b.n	800518a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005176:	4b2f      	ldr	r3, [pc, #188]	; (8005234 <xPortStartScheduler+0x134>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3b01      	subs	r3, #1
 800517c:	4a2d      	ldr	r2, [pc, #180]	; (8005234 <xPortStartScheduler+0x134>)
 800517e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	b2db      	uxtb	r3, r3
 8005188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005192:	2b80      	cmp	r3, #128	; 0x80
 8005194:	d0ef      	beq.n	8005176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005196:	4b27      	ldr	r3, [pc, #156]	; (8005234 <xPortStartScheduler+0x134>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f1c3 0307 	rsb	r3, r3, #7
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d00a      	beq.n	80051b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	60bb      	str	r3, [r7, #8]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051b8:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <xPortStartScheduler+0x134>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	4a1d      	ldr	r2, [pc, #116]	; (8005234 <xPortStartScheduler+0x134>)
 80051c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051c2:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <xPortStartScheduler+0x134>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051ca:	4a1a      	ldr	r2, [pc, #104]	; (8005234 <xPortStartScheduler+0x134>)
 80051cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051d6:	4b18      	ldr	r3, [pc, #96]	; (8005238 <xPortStartScheduler+0x138>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a17      	ldr	r2, [pc, #92]	; (8005238 <xPortStartScheduler+0x138>)
 80051dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051e2:	4b15      	ldr	r3, [pc, #84]	; (8005238 <xPortStartScheduler+0x138>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a14      	ldr	r2, [pc, #80]	; (8005238 <xPortStartScheduler+0x138>)
 80051e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051ee:	f000 f8dd 	bl	80053ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <xPortStartScheduler+0x13c>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051f8:	f000 f8fc 	bl	80053f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <xPortStartScheduler+0x140>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0f      	ldr	r2, [pc, #60]	; (8005240 <xPortStartScheduler+0x140>)
 8005202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005208:	f7ff ff66 	bl	80050d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800520c:	f7fe ff04 	bl	8004018 <vTaskSwitchContext>
	prvTaskExitError();
 8005210:	f7ff ff1c 	bl	800504c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	e000ed00 	.word	0xe000ed00
 8005224:	410fc271 	.word	0x410fc271
 8005228:	410fc270 	.word	0x410fc270
 800522c:	e000e400 	.word	0xe000e400
 8005230:	20000f3c 	.word	0x20000f3c
 8005234:	20000f40 	.word	0x20000f40
 8005238:	e000ed20 	.word	0xe000ed20
 800523c:	2000000c 	.word	0x2000000c
 8005240:	e000ef34 	.word	0xe000ef34

08005244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	607b      	str	r3, [r7, #4]
}
 800525c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800525e:	4b0f      	ldr	r3, [pc, #60]	; (800529c <vPortEnterCritical+0x58>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3301      	adds	r3, #1
 8005264:	4a0d      	ldr	r2, [pc, #52]	; (800529c <vPortEnterCritical+0x58>)
 8005266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <vPortEnterCritical+0x58>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d10f      	bne.n	8005290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <vPortEnterCritical+0x5c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <vPortEnterCritical+0x4c>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	603b      	str	r3, [r7, #0]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <vPortEnterCritical+0x4a>
	}
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	2000000c 	.word	0x2000000c
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052aa:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <vPortExitCritical+0x50>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <vPortExitCritical+0x24>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	607b      	str	r3, [r7, #4]
}
 80052c4:	bf00      	nop
 80052c6:	e7fe      	b.n	80052c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <vPortExitCritical+0x50>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <vPortExitCritical+0x50>)
 80052d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <vPortExitCritical+0x50>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d105      	bne.n	80052e6 <vPortExitCritical+0x42>
 80052da:	2300      	movs	r3, #0
 80052dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	f383 8811 	msr	BASEPRI, r3
}
 80052e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	2000000c 	.word	0x2000000c
	...

08005300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005300:	f3ef 8009 	mrs	r0, PSP
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	4b15      	ldr	r3, [pc, #84]	; (8005360 <pxCurrentTCBConst>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	f01e 0f10 	tst.w	lr, #16
 8005310:	bf08      	it	eq
 8005312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531a:	6010      	str	r0, [r2, #0]
 800531c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005324:	f380 8811 	msr	BASEPRI, r0
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f7fe fe72 	bl	8004018 <vTaskSwitchContext>
 8005334:	f04f 0000 	mov.w	r0, #0
 8005338:	f380 8811 	msr	BASEPRI, r0
 800533c:	bc09      	pop	{r0, r3}
 800533e:	6819      	ldr	r1, [r3, #0]
 8005340:	6808      	ldr	r0, [r1, #0]
 8005342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005346:	f01e 0f10 	tst.w	lr, #16
 800534a:	bf08      	it	eq
 800534c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005350:	f380 8809 	msr	PSP, r0
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst>:
 8005360:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	607b      	str	r3, [r7, #4]
}
 8005380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005382:	f7fe fd59 	bl	8003e38 <xTaskIncrementTick>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <xPortSysTickHandler+0x40>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	2300      	movs	r3, #0
 8005396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f383 8811 	msr	BASEPRI, r3
}
 800539e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053b0:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <vPortSetupTimerInterrupt+0x34>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053b6:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <vPortSetupTimerInterrupt+0x38>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <vPortSetupTimerInterrupt+0x3c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <vPortSetupTimerInterrupt+0x40>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	099b      	lsrs	r3, r3, #6
 80053c8:	4a09      	ldr	r2, [pc, #36]	; (80053f0 <vPortSetupTimerInterrupt+0x44>)
 80053ca:	3b01      	subs	r3, #1
 80053cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ce:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <vPortSetupTimerInterrupt+0x34>)
 80053d0:	2207      	movs	r2, #7
 80053d2:	601a      	str	r2, [r3, #0]
}
 80053d4:	bf00      	nop
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	e000e010 	.word	0xe000e010
 80053e4:	e000e018 	.word	0xe000e018
 80053e8:	20000000 	.word	0x20000000
 80053ec:	10624dd3 	.word	0x10624dd3
 80053f0:	e000e014 	.word	0xe000e014

080053f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005404 <vPortEnableVFP+0x10>
 80053f8:	6801      	ldr	r1, [r0, #0]
 80053fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053fe:	6001      	str	r1, [r0, #0]
 8005400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005402:	bf00      	nop
 8005404:	e000ed88 	.word	0xe000ed88

08005408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800540e:	f3ef 8305 	mrs	r3, IPSR
 8005412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b0f      	cmp	r3, #15
 8005418:	d914      	bls.n	8005444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800541a:	4a17      	ldr	r2, [pc, #92]	; (8005478 <vPortValidateInterruptPriority+0x70>)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005424:	4b15      	ldr	r3, [pc, #84]	; (800547c <vPortValidateInterruptPriority+0x74>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	7afa      	ldrb	r2, [r7, #11]
 800542a:	429a      	cmp	r2, r3
 800542c:	d20a      	bcs.n	8005444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	607b      	str	r3, [r7, #4]
}
 8005440:	bf00      	nop
 8005442:	e7fe      	b.n	8005442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005444:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <vPortValidateInterruptPriority+0x78>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800544c:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <vPortValidateInterruptPriority+0x7c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d90a      	bls.n	800546a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	603b      	str	r3, [r7, #0]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <vPortValidateInterruptPriority+0x60>
	}
 800546a:	bf00      	nop
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	e000e3f0 	.word	0xe000e3f0
 800547c:	20000f3c 	.word	0x20000f3c
 8005480:	e000ed0c 	.word	0xe000ed0c
 8005484:	20000f40 	.word	0x20000f40

08005488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005494:	f7fe fc14 	bl	8003cc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005498:	4b5b      	ldr	r3, [pc, #364]	; (8005608 <pvPortMalloc+0x180>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054a0:	f000 f920 	bl	80056e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054a4:	4b59      	ldr	r3, [pc, #356]	; (800560c <pvPortMalloc+0x184>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 8093 	bne.w	80055d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01d      	beq.n	80054f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054b8:	2208      	movs	r2, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d014      	beq.n	80054f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f023 0307 	bic.w	r3, r3, #7
 80054d0:	3308      	adds	r3, #8
 80054d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <pvPortMalloc+0x6c>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	617b      	str	r3, [r7, #20]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d06e      	beq.n	80055d8 <pvPortMalloc+0x150>
 80054fa:	4b45      	ldr	r3, [pc, #276]	; (8005610 <pvPortMalloc+0x188>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d869      	bhi.n	80055d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005504:	4b43      	ldr	r3, [pc, #268]	; (8005614 <pvPortMalloc+0x18c>)
 8005506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005508:	4b42      	ldr	r3, [pc, #264]	; (8005614 <pvPortMalloc+0x18c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800550e:	e004      	b.n	800551a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d903      	bls.n	800552c <pvPortMalloc+0xa4>
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f1      	bne.n	8005510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800552c:	4b36      	ldr	r3, [pc, #216]	; (8005608 <pvPortMalloc+0x180>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005532:	429a      	cmp	r2, r3
 8005534:	d050      	beq.n	80055d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2208      	movs	r2, #8
 800553c:	4413      	add	r3, r2
 800553e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	2308      	movs	r3, #8
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	429a      	cmp	r2, r3
 8005556:	d91f      	bls.n	8005598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <pvPortMalloc+0xf8>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	613b      	str	r3, [r7, #16]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005592:	69b8      	ldr	r0, [r7, #24]
 8005594:	f000 f908 	bl	80057a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005598:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <pvPortMalloc+0x188>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <pvPortMalloc+0x188>)
 80055a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055a6:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <pvPortMalloc+0x188>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <pvPortMalloc+0x190>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d203      	bcs.n	80055ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055b2:	4b17      	ldr	r3, [pc, #92]	; (8005610 <pvPortMalloc+0x188>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a18      	ldr	r2, [pc, #96]	; (8005618 <pvPortMalloc+0x190>)
 80055b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <pvPortMalloc+0x184>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <pvPortMalloc+0x194>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3301      	adds	r3, #1
 80055d4:	4a11      	ldr	r2, [pc, #68]	; (800561c <pvPortMalloc+0x194>)
 80055d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055d8:	f7fe fb80 	bl	8003cdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <pvPortMalloc+0x174>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60fb      	str	r3, [r7, #12]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <pvPortMalloc+0x172>
	return pvReturn;
 80055fc:	69fb      	ldr	r3, [r7, #28]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3728      	adds	r7, #40	; 0x28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20004b4c 	.word	0x20004b4c
 800560c:	20004b60 	.word	0x20004b60
 8005610:	20004b50 	.word	0x20004b50
 8005614:	20004b44 	.word	0x20004b44
 8005618:	20004b54 	.word	0x20004b54
 800561c:	20004b58 	.word	0x20004b58

08005620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d04d      	beq.n	80056ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005632:	2308      	movs	r3, #8
 8005634:	425b      	negs	r3, r3
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <vPortFree+0xb8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4013      	ands	r3, r2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <vPortFree+0x44>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	60fb      	str	r3, [r7, #12]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <vPortFree+0x62>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	60bb      	str	r3, [r7, #8]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <vPortFree+0xb8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01e      	beq.n	80056ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d11a      	bne.n	80056ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <vPortFree+0xb8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	43db      	mvns	r3, r3
 80056a2:	401a      	ands	r2, r3
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056a8:	f7fe fb0a 	bl	8003cc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <vPortFree+0xbc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	4a09      	ldr	r2, [pc, #36]	; (80056dc <vPortFree+0xbc>)
 80056b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056ba:	6938      	ldr	r0, [r7, #16]
 80056bc:	f000 f874 	bl	80057a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056c0:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <vPortFree+0xc0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	4a06      	ldr	r2, [pc, #24]	; (80056e0 <vPortFree+0xc0>)
 80056c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056ca:	f7fe fb07 	bl	8003cdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056ce:	bf00      	nop
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20004b60 	.word	0x20004b60
 80056dc:	20004b50 	.word	0x20004b50
 80056e0:	20004b5c 	.word	0x20004b5c

080056e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80056ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056f0:	4b27      	ldr	r3, [pc, #156]	; (8005790 <prvHeapInit+0xac>)
 80056f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00c      	beq.n	8005718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3307      	adds	r3, #7
 8005702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0307 	bic.w	r3, r3, #7
 800570a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	4a1f      	ldr	r2, [pc, #124]	; (8005790 <prvHeapInit+0xac>)
 8005714:	4413      	add	r3, r2
 8005716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800571c:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <prvHeapInit+0xb0>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005722:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <prvHeapInit+0xb0>)
 8005724:	2200      	movs	r2, #0
 8005726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	4413      	add	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005730:	2208      	movs	r2, #8
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0307 	bic.w	r3, r3, #7
 800573e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a15      	ldr	r2, [pc, #84]	; (8005798 <prvHeapInit+0xb4>)
 8005744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005746:	4b14      	ldr	r3, [pc, #80]	; (8005798 <prvHeapInit+0xb4>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2200      	movs	r2, #0
 800574c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <prvHeapInit+0xb4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	1ad2      	subs	r2, r2, r3
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005764:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <prvHeapInit+0xb4>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4a0a      	ldr	r2, [pc, #40]	; (800579c <prvHeapInit+0xb8>)
 8005772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <prvHeapInit+0xbc>)
 800577a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800577c:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <prvHeapInit+0xc0>)
 800577e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005782:	601a      	str	r2, [r3, #0]
}
 8005784:	bf00      	nop
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	20000f44 	.word	0x20000f44
 8005794:	20004b44 	.word	0x20004b44
 8005798:	20004b4c 	.word	0x20004b4c
 800579c:	20004b54 	.word	0x20004b54
 80057a0:	20004b50 	.word	0x20004b50
 80057a4:	20004b60 	.word	0x20004b60

080057a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057b0:	4b28      	ldr	r3, [pc, #160]	; (8005854 <prvInsertBlockIntoFreeList+0xac>)
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	e002      	b.n	80057bc <prvInsertBlockIntoFreeList+0x14>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d8f7      	bhi.n	80057b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4413      	add	r3, r2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d108      	bne.n	80057ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	441a      	add	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	441a      	add	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d118      	bne.n	8005830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <prvInsertBlockIntoFreeList+0xb0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d00d      	beq.n	8005826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	441a      	add	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	e008      	b.n	8005838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <prvInsertBlockIntoFreeList+0xb0>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	e003      	b.n	8005838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d002      	beq.n	8005846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20004b44 	.word	0x20004b44
 8005858:	20004b4c 	.word	0x20004b4c

0800585c <clock_gettime>:

/*-----------------------------------------------------------*/

int clock_gettime( clockid_t clock_id,
                   struct timespec * tp )
{
 800585c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005860:	b08e      	sub	sp, #56	; 0x38
 8005862:	af00      	add	r7, sp, #0
 8005864:	6278      	str	r0, [r7, #36]	; 0x24
 8005866:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8005868:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800586c:	2300      	movs	r3, #0
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800587e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fcee 	bl	8004264 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	17da      	asrs	r2, r3, #31
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	61fa      	str	r2, [r7, #28]
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	69b9      	ldr	r1, [r7, #24]
 800589a:	000b      	movs	r3, r1
 800589c:	2200      	movs	r2, #0
 800589e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	2200      	movs	r2, #0
 80058a6:	461c      	mov	r4, r3
 80058a8:	4615      	mov	r5, r2
 80058aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058ae:	1911      	adds	r1, r2, r4
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	416b      	adcs	r3, r5
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80058ba:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80058be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	f04f 0400 	mov.w	r4, #0
 80058ca:	f04f 0500 	mov.w	r5, #0
 80058ce:	015d      	lsls	r5, r3, #5
 80058d0:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80058d4:	0154      	lsls	r4, r2, #5
 80058d6:	4622      	mov	r2, r4
 80058d8:	462b      	mov	r3, r5
 80058da:	ebb2 0800 	subs.w	r8, r2, r0
 80058de:	eb63 0901 	sbc.w	r9, r3, r1
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80058ee:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80058f2:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80058f6:	4690      	mov	r8, r2
 80058f8:	4699      	mov	r9, r3
 80058fa:	eb18 0a00 	adds.w	sl, r8, r0
 80058fe:	eb49 0b01 	adc.w	fp, r9, r1
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800590e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005912:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005916:	ebb2 040a 	subs.w	r4, r2, sl
 800591a:	603c      	str	r4, [r7, #0]
 800591c:	eb63 030b 	sbc.w	r3, r3, fp
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005926:	4623      	mov	r3, r4
 8005928:	181b      	adds	r3, r3, r0
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	462b      	mov	r3, r5
 800592e:	eb41 0303 	adc.w	r3, r1, r3
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800593a:	f000 ffad 	bl	8006898 <UTILS_NanosecondsToTimespec>

    return 0;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3738      	adds	r7, #56	; 0x38
 8005944:	46bd      	mov	sp, r7
 8005946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800594a <prvCalculateTickTimeout>:
/*-----------------------------------------------------------*/

static int prvCalculateTickTimeout( long lMessageQueueFlags,
                                    const struct timespec * const pxAbsoluteTimeout,
                                    TickType_t * pxTimeoutTicks )
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b08a      	sub	sp, #40	; 0x28
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
    int iStatus = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for nonblocking queue. */
    if( lMessageQueueFlags & O_NONBLOCK )
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <prvCalculateTickTimeout+0x22>
    {
        /* No additional checks are done for nonblocking queues. Timeout is 0. */
        *pxTimeoutTicks = 0;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e036      	b.n	80059da <prvCalculateTickTimeout+0x90>
    }
    else
    {
        /* No absolute timeout given. Block forever. */
        if( pxAbsoluteTimeout == NULL )
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <prvCalculateTickTimeout+0x32>
        {
            *pxTimeoutTicks = portMAX_DELAY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e02e      	b.n	80059da <prvCalculateTickTimeout+0x90>
        }
        else
        {
            struct timespec xCurrentTime = { 0 };
 800597c:	f107 0310 	add.w	r3, r7, #16
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	609a      	str	r2, [r3, #8]
 8005988:	60da      	str	r2, [r3, #12]

            /* Check that the given timespec is valid. */
            if( UTILS_ValidateTimespec( pxAbsoluteTimeout ) == false )
 800598a:	68b8      	ldr	r0, [r7, #8]
 800598c:	f001 f892 	bl	8006ab4 <UTILS_ValidateTimespec>
 8005990:	4603      	mov	r3, r0
 8005992:	f083 0301 	eor.w	r3, r3, #1
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <prvCalculateTickTimeout+0x56>
            {
                iStatus = EINVAL;
 800599c:	2316      	movs	r3, #22
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Get current time */
            if( ( iStatus == 0 ) && ( clock_gettime( CLOCK_REALTIME, &xCurrentTime ) != 0 ) )
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <prvCalculateTickTimeout+0x72>
 80059a6:	f107 0310 	add.w	r3, r7, #16
 80059aa:	4619      	mov	r1, r3
 80059ac:	2000      	movs	r0, #0
 80059ae:	f7ff ff55 	bl	800585c <clock_gettime>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <prvCalculateTickTimeout+0x72>
            {
                iStatus = EINVAL;
 80059b8:	2316      	movs	r3, #22
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Convert absolute timespec to ticks. */
            if( ( iStatus == 0 ) &&
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10b      	bne.n	80059da <prvCalculateTickTimeout+0x90>
                ( UTILS_AbsoluteTimespecToDeltaTicks( pxAbsoluteTimeout, &xCurrentTime, pxTimeoutTicks ) != 0 ) )
 80059c2:	f107 0310 	add.w	r3, r7, #16
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4619      	mov	r1, r3
 80059ca:	68b8      	ldr	r0, [r7, #8]
 80059cc:	f000 fe7a 	bl	80066c4 <UTILS_AbsoluteTimespecToDeltaTicks>
 80059d0:	4603      	mov	r3, r0
            if( ( iStatus == 0 ) &&
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <prvCalculateTickTimeout+0x90>
            {
                iStatus = ETIMEDOUT;
 80059d6:	2374      	movs	r3, #116	; 0x74
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    return iStatus;
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3728      	adds	r7, #40	; 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <prvCreateNewMessageQueue>:

static BaseType_t prvCreateNewMessageQueue( QueueListElement_t ** ppxMessageQueue,
                                            const struct mq_attr * const pxAttr,
                                            const char * const pcName,
                                            size_t xNameLength )
{
 80059e4:	b590      	push	{r4, r7, lr}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
    BaseType_t xStatus = pdTRUE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	61fb      	str	r3, [r7, #28]

    /* Allocate space for a new queue element. */
    *ppxMessageQueue = pvPortMalloc( sizeof( QueueListElement_t ) );
 80059f6:	2028      	movs	r0, #40	; 0x28
 80059f8:	f7ff fd46 	bl	8005488 <pvPortMalloc>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	601a      	str	r2, [r3, #0]

    /* Check that memory allocation succeeded. */
    if( *ppxMessageQueue == NULL )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <prvCreateNewMessageQueue+0x2a>
    {
        xStatus = pdFALSE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
    }

    /* Create the FreeRTOS queue. */
    if( xStatus == pdTRUE )
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d116      	bne.n	8005a42 <prvCreateNewMessageQueue+0x5e>
    {
        ( *ppxMessageQueue )->xQueue =
            xQueueCreate( pxAttr->mq_maxmsg, sizeof( QueueElement_t ) );
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4618      	mov	r0, r3
        ( *ppxMessageQueue )->xQueue =
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681c      	ldr	r4, [r3, #0]
            xQueueCreate( pxAttr->mq_maxmsg, sizeof( QueueElement_t ) );
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2108      	movs	r1, #8
 8005a22:	f7fc ffc9 	bl	80029b8 <xQueueGenericCreate>
 8005a26:	4603      	mov	r3, r0
        ( *ppxMessageQueue )->xQueue =
 8005a28:	60a3      	str	r3, [r4, #8]

        /* Check that queue creation succeeded. */
        if( ( *ppxMessageQueue )->xQueue == NULL )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <prvCreateNewMessageQueue+0x5e>
        {
            vPortFree( *ppxMessageQueue );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fdf1 	bl	8005620 <vPortFree>
            xStatus = pdFALSE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61fb      	str	r3, [r7, #28]
        }
    }

    if( xStatus == pdTRUE )
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d124      	bne.n	8005a92 <prvCreateNewMessageQueue+0xae>
    {
        /* Allocate space for the queue name plus null-terminator. */
        ( *ppxMessageQueue )->pcName = pvPortMalloc( xNameLength + 1 );
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681c      	ldr	r4, [r3, #0]
 8005a50:	4610      	mov	r0, r2
 8005a52:	f7ff fd19 	bl	8005488 <pvPortMalloc>
 8005a56:	4603      	mov	r3, r0
 8005a58:	6123      	str	r3, [r4, #16]

        /* Check that memory was successfully allocated for queue name. */
        if( ( *ppxMessageQueue )->pcName == NULL )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <prvCreateNewMessageQueue+0x9c>
        {
            vQueueDelete( ( *ppxMessageQueue )->xQueue );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fd fc40 	bl	80032f0 <vQueueDelete>
            vPortFree( *ppxMessageQueue );
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fdd3 	bl	8005620 <vPortFree>
            xStatus = pdFALSE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	e008      	b.n	8005a92 <prvCreateNewMessageQueue+0xae>
        }
        else
        {
            /* Copy queue name. Copying xNameLength+1 will cause strncpy to add
             * the null-terminator. */
            ( void ) strncpy( ( *ppxMessageQueue )->pcName, pcName, xNameLength + 1 );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6918      	ldr	r0, [r3, #16]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	f002 f971 	bl	8007d74 <strncpy>
        }
    }

    if( xStatus == pdTRUE )
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d127      	bne.n	8005ae8 <prvCreateNewMessageQueue+0x104>
    {
        /* Copy attributes. */
        ( *ppxMessageQueue )->xAttr = *pxAttr;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	f103 0414 	add.w	r4, r3, #20
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005aa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        /* A newly-created queue will have 1 open descriptor for it. */
        ( *ppxMessageQueue )->xOpenDescriptors = 1;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	60da      	str	r2, [r3, #12]

        /* A newly-created queue will not be pending unlink. */
        ( *ppxMessageQueue )->xPendingUnlink = pdFALSE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Add the new queue to the list. */
        listADD( &xQueueListHead, &( *ppxMessageQueue )->xLink );
 8005aba:	4b0e      	ldr	r3, [pc, #56]	; (8005af4 <prvCreateNewMessageQueue+0x110>)
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <prvCreateNewMessageQueue+0x110>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	605a      	str	r2, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	605a      	str	r2, [r3, #4]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	601a      	str	r2, [r3, #0]
    }

    return xStatus;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3724      	adds	r7, #36	; 0x24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd90      	pop	{r4, r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20004bb4 	.word	0x20004bb4

08005af8 <prvFindQueueInList>:
/*-----------------------------------------------------------*/

static BaseType_t prvFindQueueInList( QueueListElement_t ** const ppxQueueListElement,
                                      const char * const pcName,
                                      mqd_t xMessageQueueDescriptor )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
    Link_t * pxQueueListLink = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	61fb      	str	r3, [r7, #28]
    QueueListElement_t * pxMessageQueue = NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61bb      	str	r3, [r7, #24]
    BaseType_t xQueueFound = pdFALSE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]

    /* Iterate through the list of queues. */
    listFOR_EACH( pxQueueListLink, &xQueueListHead )
 8005b10:	4b18      	ldr	r3, [pc, #96]	; (8005b74 <prvFindQueueInList+0x7c>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	61fb      	str	r3, [r7, #28]
 8005b16:	e01a      	b.n	8005b4e <prvFindQueueInList+0x56>
    {
        pxMessageQueue = listCONTAINER( pxQueueListLink, QueueListElement_t, xLink );
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	61bb      	str	r3, [r7, #24]

        /* Match by name first if provided. */
        if( ( pcName != NULL ) && ( strcmp( pxMessageQueue->pcName, pcName ) == 0 ) )
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <prvFindQueueInList+0x42>
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fa fb59 	bl	80001e0 <strcmp>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <prvFindQueueInList+0x42>
        {
            xQueueFound = pdTRUE;
 8005b34:	2301      	movs	r3, #1
 8005b36:	617b      	str	r3, [r7, #20]
            break;
 8005b38:	e00d      	b.n	8005b56 <prvFindQueueInList+0x5e>
        }
        /* If name doesn't match, match by descriptor. */
        else
        {
            if( ( mqd_t ) pxMessageQueue == xMessageQueueDescriptor )
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d102      	bne.n	8005b48 <prvFindQueueInList+0x50>
            {
                xQueueFound = pdTRUE;
 8005b42:	2301      	movs	r3, #1
 8005b44:	617b      	str	r3, [r7, #20]
                break;
 8005b46:	e006      	b.n	8005b56 <prvFindQueueInList+0x5e>
    listFOR_EACH( pxQueueListLink, &xQueueListHead )
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	4a08      	ldr	r2, [pc, #32]	; (8005b74 <prvFindQueueInList+0x7c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d1e0      	bne.n	8005b18 <prvFindQueueInList+0x20>
            }
        }
    }

    /* If the queue was found, set the output parameter. */
    if( ( xQueueFound == pdTRUE ) && ( ppxQueueListElement != NULL ) )
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d105      	bne.n	8005b68 <prvFindQueueInList+0x70>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <prvFindQueueInList+0x70>
    {
        *ppxQueueListElement = pxMessageQueue;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	601a      	str	r2, [r3, #0]
    }

    return xQueueFound;
 8005b68:	697b      	ldr	r3, [r7, #20]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20004bb4 	.word	0x20004bb4

08005b78 <prvInitializeQueueList>:

/*-----------------------------------------------------------*/

static void prvInitializeQueueList( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
    /* Keep track of whether the queue list has been initialized. */
    static BaseType_t xQueueListInitialized = pdFALSE;

    /* Check if queue list needs to be initialized. */
    if( xQueueListInitialized == pdFALSE )
 8005b7c:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <prvInitializeQueueList+0x3c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d114      	bne.n	8005bae <prvInitializeQueueList+0x36>
    {
        /* Initialization must be in a critical section to prevent two threads
         * from initializing at the same time. */
        taskENTER_CRITICAL();
 8005b84:	f7ff fb5e 	bl	8005244 <vPortEnterCritical>

        /* Check again that queue list is still uninitialized, i.e. it wasn't
         * initialized while this function was waiting to enter the critical
         * section. */
        if( xQueueListInitialized == pdFALSE )
 8005b88:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <prvInitializeQueueList+0x3c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10c      	bne.n	8005baa <prvInitializeQueueList+0x32>
        {
            /* Initialize the queue list mutex and list head. */
            ( void ) xSemaphoreCreateMutexStatic( &xQueueListMutex );
 8005b90:	4909      	ldr	r1, [pc, #36]	; (8005bb8 <prvInitializeQueueList+0x40>)
 8005b92:	2001      	movs	r0, #1
 8005b94:	f7fc ff87 	bl	8002aa6 <xQueueCreateMutexStatic>
            listINIT_HEAD( &xQueueListHead );
 8005b98:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <prvInitializeQueueList+0x44>)
 8005b9a:	4a08      	ldr	r2, [pc, #32]	; (8005bbc <prvInitializeQueueList+0x44>)
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <prvInitializeQueueList+0x44>)
 8005ba0:	4a06      	ldr	r2, [pc, #24]	; (8005bbc <prvInitializeQueueList+0x44>)
 8005ba2:	605a      	str	r2, [r3, #4]
            xQueueListInitialized = pdTRUE;
 8005ba4:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <prvInitializeQueueList+0x3c>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
        }

        /* Exit the critical section. */
        taskEXIT_CRITICAL();
 8005baa:	f7ff fb7b 	bl	80052a4 <vPortExitCritical>
    }
}
 8005bae:	bf00      	nop
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20004bbc 	.word	0x20004bbc
 8005bb8:	20004b64 	.word	0x20004b64
 8005bbc:	20004bb4 	.word	0x20004bb4

08005bc0 <prvValidateQueueName>:

/*-----------------------------------------------------------*/

static BaseType_t prvValidateQueueName( const char * const pcName,
                                        size_t * pxNameLength )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
    BaseType_t xStatus = pdTRUE;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
    size_t xNameLength = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]

    /* All message queue names must start with '/'. */
    if( pcName[ 0 ] != '/' )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b2f      	cmp	r3, #47	; 0x2f
 8005bd8:	d002      	beq.n	8005be0 <prvValidateQueueName+0x20>
    {
        xStatus = pdFALSE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e00d      	b.n	8005bfc <prvValidateQueueName+0x3c>
    }
    else
    {
        /* Get the length of pcName, excluding the first '/' and null-terminator. */
        xNameLength = UTILS_strnlen( pcName, NAME_MAX + 2 );
 8005be0:	2142      	movs	r1, #66	; 0x42
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fd4c 	bl	8006680 <UTILS_strnlen>
 8005be8:	60b8      	str	r0, [r7, #8]

        if( xNameLength == NAME_MAX + 2 )
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b42      	cmp	r3, #66	; 0x42
 8005bee:	d102      	bne.n	8005bf6 <prvValidateQueueName+0x36>
        {
            /* Name too long. */
            xStatus = pdFALSE;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e002      	b.n	8005bfc <prvValidateQueueName+0x3c>
        }
        else
        {
            /* Name length passes, set output parameter. */
            *pxNameLength = xNameLength;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	601a      	str	r2, [r3, #0]
        }
    }

    return xStatus;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <mq_open>:

mqd_t mq_open( const char * name,
               int oflag,
               mode_t mode,
               struct mq_attr * attr )
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b08b      	sub	sp, #44	; 0x2c
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
    mqd_t xMessageQueue = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
    size_t xNameLength = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	623b      	str	r3, [r7, #32]

    /* Default mq_attr. */
    struct mq_attr xQueueCreationAttr =
 8005c1e:	4b4b      	ldr	r3, [pc, #300]	; (8005d4c <mq_open+0x144>)
 8005c20:	f107 0410 	add.w	r4, r7, #16
 8005c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    /* Silence warnings about unused parameters. */
    ( void ) mode;

    /* Initialize the queue list, if needed. */
    prvInitializeQueueList();
 8005c2a:	f7ff ffa5 	bl	8005b78 <prvInitializeQueueList>

    /* Check queue name. */
    if( prvValidateQueueName( name, &xNameLength ) == pdFALSE )
 8005c2e:	f107 0320 	add.w	r3, r7, #32
 8005c32:	4619      	mov	r1, r3
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7ff ffc3 	bl	8005bc0 <prvValidateQueueName>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d105      	bne.n	8005c4c <mq_open+0x44>
    {
        /* Invalid name. */
        errno = EINVAL;
 8005c40:	4b43      	ldr	r3, [pc, #268]	; (8005d50 <mq_open+0x148>)
 8005c42:	2216      	movs	r2, #22
 8005c44:	601a      	str	r2, [r3, #0]
        xMessageQueue = ( mqd_t ) -1;
 8005c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Check attributes, if given. */
    if( xMessageQueue == NULL )
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d115      	bne.n	8005c7e <mq_open+0x76>
    {
        if( ( oflag & O_CREAT ) && ( attr != NULL ) && ( ( attr->mq_maxmsg <= 0 ) || ( attr->mq_msgsize <= 0 ) ) )
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d010      	beq.n	8005c7e <mq_open+0x76>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <mq_open+0x76>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	dd03      	ble.n	8005c72 <mq_open+0x6a>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	dc05      	bgt.n	8005c7e <mq_open+0x76>
        {
            /* Invalid mq_attr.mq_maxmsg or mq_attr.mq_msgsize. */
            errno = EINVAL;
 8005c72:	4b37      	ldr	r3, [pc, #220]	; (8005d50 <mq_open+0x148>)
 8005c74:	2216      	movs	r2, #22
 8005c76:	601a      	str	r2, [r3, #0]
            xMessageQueue = ( mqd_t ) -1;
 8005c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    if( xMessageQueue == NULL )
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d15d      	bne.n	8005d40 <mq_open+0x138>
    {
        /* Lock the mutex that guards access to the queue list. This call will
         * never fail because it blocks forever. */
        ( void ) xSemaphoreTake( ( SemaphoreHandle_t ) &xQueueListMutex, portMAX_DELAY );
 8005c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c88:	4832      	ldr	r0, [pc, #200]	; (8005d54 <mq_open+0x14c>)
 8005c8a:	f7fd fa25 	bl	80030d8 <xQueueSemaphoreTake>

        /* Search the queue list to check if the queue exists. */
        if( prvFindQueueInList( ( QueueListElement_t ** ) &xMessageQueue,
 8005c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c92:	2200      	movs	r2, #0
 8005c94:	68f9      	ldr	r1, [r7, #12]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff ff2e 	bl	8005af8 <prvFindQueueInList>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d120      	bne.n	8005ce4 <mq_open+0xdc>
                                name,
                                ( mqd_t ) NULL ) == pdTRUE )
        {
            /* If the mq exists, check that this function wasn't called with
             * O_CREAT and O_EXCL. */
            if( ( oflag & O_EXCL ) && ( oflag & O_CREAT ) )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <mq_open+0xbc>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d006      	beq.n	8005cc4 <mq_open+0xbc>
            {
                errno = EEXIST;
 8005cb6:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <mq_open+0x148>)
 8005cb8:	2211      	movs	r2, #17
 8005cba:	601a      	str	r2, [r3, #0]
                xMessageQueue = ( mqd_t ) -1;
 8005cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc2:	e037      	b.n	8005d34 <mq_open+0x12c>
            }
            else
            {
                /* Check if the mq has been unlinked and is pending removal. */
                if( ( ( QueueListElement_t * ) xMessageQueue )->xPendingUnlink == pdTRUE )
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d106      	bne.n	8005cda <mq_open+0xd2>
                {
                    /* Queue pending deletion. Don't allow it to be re-opened. */
                    errno = EINVAL;
 8005ccc:	4b20      	ldr	r3, [pc, #128]	; (8005d50 <mq_open+0x148>)
 8005cce:	2216      	movs	r2, #22
 8005cd0:	601a      	str	r2, [r3, #0]
                    xMessageQueue = ( mqd_t ) -1;
 8005cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd8:	e02c      	b.n	8005d34 <mq_open+0x12c>
                }
                else
                {
                    /* Increase count of open file descriptors for queue. */
                    ( ( QueueListElement_t * ) xMessageQueue )->xOpenDescriptors++;
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	3201      	adds	r2, #1
 8005ce0:	60da      	str	r2, [r3, #12]
 8005ce2:	e027      	b.n	8005d34 <mq_open+0x12c>
        }
        /* Queue does not exist. */
        else
        {
            /* Only create the new queue if O_CREAT was specified. */
            if( oflag & O_CREAT )
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01c      	beq.n	8005d28 <mq_open+0x120>
            {
                /* Copy attributes if provided. */
                if( attr != NULL )
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <mq_open+0xf8>
                {
                    xQueueCreationAttr = *attr;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	f107 0410 	add.w	r4, r7, #16
 8005cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                }

                /* Copy oflags. */
                xQueueCreationAttr.mq_flags = ( long ) oflag;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	613b      	str	r3, [r7, #16]

                /* Create the new message queue. */
                if( prvCreateNewMessageQueue( ( QueueListElement_t ** ) &xMessageQueue,
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	f107 0110 	add.w	r1, r7, #16
 8005d0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	f7ff fe68 	bl	80059e4 <prvCreateNewMessageQueue>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10c      	bne.n	8005d34 <mq_open+0x12c>
                                              &xQueueCreationAttr,
                                              name,
                                              xNameLength ) == pdFALSE )
                {
                    errno = ENOSPC;
 8005d1a:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <mq_open+0x148>)
 8005d1c:	221c      	movs	r2, #28
 8005d1e:	601a      	str	r2, [r3, #0]
                    xMessageQueue = ( mqd_t ) -1;
 8005d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
 8005d26:	e005      	b.n	8005d34 <mq_open+0x12c>
                }
            }
            else
            {
                errno = ENOENT;
 8005d28:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <mq_open+0x148>)
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	601a      	str	r2, [r3, #0]
                xMessageQueue = ( mqd_t ) -1;
 8005d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }

        /* Release the mutex protecting the queue list. */
        ( void ) xSemaphoreGive( ( SemaphoreHandle_t ) &xQueueListMutex );
 8005d34:	2300      	movs	r3, #0
 8005d36:	2200      	movs	r2, #0
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4806      	ldr	r0, [pc, #24]	; (8005d54 <mq_open+0x14c>)
 8005d3c:	f7fc ff52 	bl	8002be4 <xQueueGenericSend>
    }

    return xMessageQueue;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	372c      	adds	r7, #44	; 0x2c
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd90      	pop	{r4, r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	080094fc 	.word	0x080094fc
 8005d50:	20000de0 	.word	0x20000de0
 8005d54:	20004b64 	.word	0x20004b64

08005d58 <mq_receive>:

ssize_t mq_receive( mqd_t mqdes,
                    char * msg_ptr,
                    size_t msg_len,
                    unsigned int * msg_prio )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
    return mq_timedreceive( mqdes, msg_ptr, msg_len, msg_prio, NULL );
 8005d66:	2300      	movs	r3, #0
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f819 	bl	8005da8 <mq_timedreceive>
 8005d76:	4603      	mov	r3, r0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <mq_send>:

int mq_send( mqd_t mqdes,
             const char * msg_ptr,
             size_t msg_len,
             unsigned msg_prio )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
    return mq_timedsend( mqdes, msg_ptr, msg_len, msg_prio, NULL );
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f88d 	bl	8005eb8 <mq_timedsend>
 8005d9e:	4603      	mov	r3, r0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <mq_timedreceive>:
ssize_t mq_timedreceive( mqd_t mqdes,
                         char * msg_ptr,
                         size_t msg_len,
                         unsigned * msg_prio,
                         const struct timespec * abstime )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	; 0x28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
    ssize_t xStatus = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
    int iCalculateTimeoutReturn = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	623b      	str	r3, [r7, #32]
    TickType_t xTimeoutTicks = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
    QueueListElement_t * pxMessageQueue = ( QueueListElement_t * ) mqdes;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	61fb      	str	r3, [r7, #28]
    QueueElement_t xReceiveData = { 0 };
 8005dc6:	f107 0310 	add.w	r3, r7, #16
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	605a      	str	r2, [r3, #4]
    /* Silence warnings about unused parameters. */
    ( void ) msg_prio;

    /* Lock the mutex that guards access to the queue list. This call will
     * never fail because it blocks forever. */
    ( void ) xSemaphoreTake( ( SemaphoreHandle_t ) &xQueueListMutex, portMAX_DELAY );
 8005dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005dd4:	4836      	ldr	r0, [pc, #216]	; (8005eb0 <mq_timedreceive+0x108>)
 8005dd6:	f7fd f97f 	bl	80030d8 <xQueueSemaphoreTake>

    /* Find the mq referenced by mqdes. */
    if( prvFindQueueInList( NULL, NULL, mqdes ) == pdFALSE )
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	2100      	movs	r1, #0
 8005dde:	2000      	movs	r0, #0
 8005de0:	f7ff fe8a 	bl	8005af8 <prvFindQueueInList>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d105      	bne.n	8005df6 <mq_timedreceive+0x4e>
    {
        /* Queue not found; bad descriptor. */
        errno = EBADF;
 8005dea:	4b32      	ldr	r3, [pc, #200]	; (8005eb4 <mq_timedreceive+0x10c>)
 8005dec:	2209      	movs	r2, #9
 8005dee:	601a      	str	r2, [r3, #0]
        xStatus = -1;
 8005df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Verify that msg_len is large enough. */
    if( xStatus == 0 )
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10b      	bne.n	8005e14 <mq_timedreceive+0x6c>
    {
        if( msg_len < ( size_t ) pxMessageQueue->xAttr.mq_msgsize )
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	461a      	mov	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d205      	bcs.n	8005e14 <mq_timedreceive+0x6c>
        {
            /* msg_len too small. */
            errno = EMSGSIZE;
 8005e08:	4b2a      	ldr	r3, [pc, #168]	; (8005eb4 <mq_timedreceive+0x10c>)
 8005e0a:	225a      	movs	r2, #90	; 0x5a
 8005e0c:	601a      	str	r2, [r3, #0]
            xStatus = -1;
 8005e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    if( xStatus == 0 )
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d111      	bne.n	8005e3e <mq_timedreceive+0x96>
    {
        /* Convert abstime to a tick timeout. */
        iCalculateTimeoutReturn = prvCalculateTickTimeout( pxMessageQueue->xAttr.mq_flags,
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f107 0218 	add.w	r2, r7, #24
 8005e22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fd90 	bl	800594a <prvCalculateTickTimeout>
 8005e2a:	6238      	str	r0, [r7, #32]
                                                           abstime,
                                                           &xTimeoutTicks );

        if( iCalculateTimeoutReturn != 0 )
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <mq_timedreceive+0x96>
        {
            errno = iCalculateTimeoutReturn;
 8005e32:	4a20      	ldr	r2, [pc, #128]	; (8005eb4 <mq_timedreceive+0x10c>)
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	6013      	str	r3, [r2, #0]
            xStatus = -1;
 8005e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Release the mutex protecting the queue list. */
    ( void ) xSemaphoreGive( ( SemaphoreHandle_t ) &xQueueListMutex );
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2200      	movs	r2, #0
 8005e42:	2100      	movs	r1, #0
 8005e44:	481a      	ldr	r0, [pc, #104]	; (8005eb0 <mq_timedreceive+0x108>)
 8005e46:	f7fc fecd 	bl	8002be4 <xQueueGenericSend>

    if( xStatus == 0 )
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d11a      	bne.n	8005e86 <mq_timedreceive+0xde>
    {
        /* Receive data from the FreeRTOS queue. */
        if( xQueueReceive( pxMessageQueue->xQueue,
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	f107 0110 	add.w	r1, r7, #16
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fd f85c 	bl	8002f18 <xQueueReceive>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10f      	bne.n	8005e86 <mq_timedreceive+0xde>
                           &xReceiveData,
                           xTimeoutTicks ) == pdFALSE )
        {
            /* If queue receive fails, set the appropriate errno. */
            if( pxMessageQueue->xAttr.mq_flags & O_NONBLOCK )
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <mq_timedreceive+0xd2>
            {
                /* Set errno to EAGAIN for nonblocking mq. */
                errno = EAGAIN;
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <mq_timedreceive+0x10c>)
 8005e74:	220b      	movs	r2, #11
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e002      	b.n	8005e80 <mq_timedreceive+0xd8>
            }
            else
            {
                /* Otherwise, set errno to ETIMEDOUT. */
                errno = ETIMEDOUT;
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <mq_timedreceive+0x10c>)
 8005e7c:	2274      	movs	r2, #116	; 0x74
 8005e7e:	601a      	str	r2, [r3, #0]
            }

            xStatus = -1;
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    if( xStatus == 0 )
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <mq_timedreceive+0xfc>
    {
        /* Get the length of data for return value. */
        xStatus = ( ssize_t ) xReceiveData.xDataSize;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Copy received data into given buffer, then free it. */
        ( void ) memcpy( msg_ptr, xReceiveData.pcData, xReceiveData.xDataSize );
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4619      	mov	r1, r3
 8005e96:	68b8      	ldr	r0, [r7, #8]
 8005e98:	f001 fadf 	bl	800745a <memcpy>
        vPortFree( xReceiveData.pcData );
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff fbbe 	bl	8005620 <vPortFree>
    }

    return xStatus;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3728      	adds	r7, #40	; 0x28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20004b64 	.word	0x20004b64
 8005eb4:	20000de0 	.word	0x20000de0

08005eb8 <mq_timedsend>:
int mq_timedsend( mqd_t mqdes,
                  const char * msg_ptr,
                  size_t msg_len,
                  unsigned int msg_prio,
                  const struct timespec * abstime )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
    int iStatus = 0, iCalculateTimeoutReturn = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eca:	2300      	movs	r3, #0
 8005ecc:	623b      	str	r3, [r7, #32]
    TickType_t xTimeoutTicks = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	61bb      	str	r3, [r7, #24]
    QueueListElement_t * pxMessageQueue = ( QueueListElement_t * ) mqdes;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	61fb      	str	r3, [r7, #28]
    QueueElement_t xSendData = { 0 };
 8005ed6:	f107 0310 	add.w	r3, r7, #16
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	605a      	str	r2, [r3, #4]
    /* Silence warnings about unused parameters. */
    ( void ) msg_prio;

    /* Lock the mutex that guards access to the queue list. This call will
     * never fail because it blocks forever. */
    ( void ) xSemaphoreTake( ( SemaphoreHandle_t ) &xQueueListMutex, portMAX_DELAY );
 8005ee0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ee4:	483d      	ldr	r0, [pc, #244]	; (8005fdc <mq_timedsend+0x124>)
 8005ee6:	f7fd f8f7 	bl	80030d8 <xQueueSemaphoreTake>

    /* Find the mq referenced by mqdes. */
    if( prvFindQueueInList( NULL, NULL, mqdes ) == pdFALSE )
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	2100      	movs	r1, #0
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f7ff fe02 	bl	8005af8 <prvFindQueueInList>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d105      	bne.n	8005f06 <mq_timedsend+0x4e>
    {
        /* Queue not found; bad descriptor. */
        errno = EBADF;
 8005efa:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <mq_timedsend+0x128>)
 8005efc:	2209      	movs	r2, #9
 8005efe:	601a      	str	r2, [r3, #0]
        iStatus = -1;
 8005f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Verify that mq_msgsize is large enough. */
    if( iStatus == 0 )
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10b      	bne.n	8005f24 <mq_timedsend+0x6c>
    {
        if( msg_len > ( size_t ) pxMessageQueue->xAttr.mq_msgsize )
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	461a      	mov	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d905      	bls.n	8005f24 <mq_timedsend+0x6c>
        {
            /* msg_len too large. */
            errno = EMSGSIZE;
 8005f18:	4b31      	ldr	r3, [pc, #196]	; (8005fe0 <mq_timedsend+0x128>)
 8005f1a:	225a      	movs	r2, #90	; 0x5a
 8005f1c:	601a      	str	r2, [r3, #0]
            iStatus = -1;
 8005f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    if( iStatus == 0 )
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d111      	bne.n	8005f4e <mq_timedsend+0x96>
    {
        /* Convert abstime to a tick timeout. */
        iCalculateTimeoutReturn = prvCalculateTickTimeout( pxMessageQueue->xAttr.mq_flags,
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f107 0218 	add.w	r2, r7, #24
 8005f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff fd08 	bl	800594a <prvCalculateTickTimeout>
 8005f3a:	6238      	str	r0, [r7, #32]
                                                           abstime,
                                                           &xTimeoutTicks );

        if( iCalculateTimeoutReturn != 0 )
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <mq_timedsend+0x96>
        {
            errno = iCalculateTimeoutReturn;
 8005f42:	4a27      	ldr	r2, [pc, #156]	; (8005fe0 <mq_timedsend+0x128>)
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	6013      	str	r3, [r2, #0]
            iStatus = -1;
 8005f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Release the mutex protecting the queue list. */
    ( void ) xSemaphoreGive( ( SemaphoreHandle_t ) &xQueueListMutex );
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2200      	movs	r2, #0
 8005f52:	2100      	movs	r1, #0
 8005f54:	4821      	ldr	r0, [pc, #132]	; (8005fdc <mq_timedsend+0x124>)
 8005f56:	f7fc fe45 	bl	8002be4 <xQueueGenericSend>

    /* Allocate memory for the message. */
    if( iStatus == 0 )
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d116      	bne.n	8005f8e <mq_timedsend+0xd6>
    {
        xSendData.xDataSize = msg_len;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	617b      	str	r3, [r7, #20]
        xSendData.pcData = pvPortMalloc( msg_len );
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff fa8f 	bl	8005488 <pvPortMalloc>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	613b      	str	r3, [r7, #16]

        /* Check that memory allocation succeeded. */
        if( xSendData.pcData == NULL )
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d106      	bne.n	8005f82 <mq_timedsend+0xca>
        {
            /* msg_len too large. */
            errno = EMSGSIZE;
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <mq_timedsend+0x128>)
 8005f76:	225a      	movs	r2, #90	; 0x5a
 8005f78:	601a      	str	r2, [r3, #0]
            iStatus = -1;
 8005f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f80:	e005      	b.n	8005f8e <mq_timedsend+0xd6>
        }
        else
        {
            /* Copy the data to send. */
            ( void ) memcpy( xSendData.pcData, msg_ptr, msg_len );
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 fa66 	bl	800745a <memcpy>
        }
    }

    if( iStatus == 0 )
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d11e      	bne.n	8005fd2 <mq_timedsend+0x11a>
    {
        /* Send data to the FreeRTOS queue. */
        if( xQueueSend( pxMessageQueue->xQueue,
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	6898      	ldr	r0, [r3, #8]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	f107 0110 	add.w	r1, r7, #16
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f7fc fe20 	bl	8002be4 <xQueueGenericSend>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d113      	bne.n	8005fd2 <mq_timedsend+0x11a>
                        &xSendData,
                        xTimeoutTicks ) == pdFALSE )
        {
            /* If queue send fails, set the appropriate errno. */
            if( pxMessageQueue->xAttr.mq_flags & O_NONBLOCK )
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <mq_timedsend+0x106>
            {
                /* Set errno to EAGAIN for nonblocking mq. */
                errno = EAGAIN;
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <mq_timedsend+0x128>)
 8005fb8:	220b      	movs	r2, #11
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	e002      	b.n	8005fc4 <mq_timedsend+0x10c>
            }
            else
            {
                /* Otherwise, set errno to ETIMEDOUT. */
                errno = ETIMEDOUT;
 8005fbe:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <mq_timedsend+0x128>)
 8005fc0:	2274      	movs	r2, #116	; 0x74
 8005fc2:	601a      	str	r2, [r3, #0]
            }

            /* Free the allocated queue data. */
            vPortFree( xSendData.pcData );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fb2a 	bl	8005620 <vPortFree>

            iStatus = -1;
 8005fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    return iStatus;
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3728      	adds	r7, #40	; 0x28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20004b64 	.word	0x20004b64
 8005fe0:	20000de0 	.word	0x20000de0

08005fe4 <prvExitThread>:
};

/*-----------------------------------------------------------*/

static void prvExitThread( void )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
    pthread_internal_t * pxThread = ( pthread_internal_t * ) pthread_self();
 8005fea:	f000 f9d7 	bl	800639c <pthread_self>
 8005fee:	6078      	str	r0, [r7, #4]

    /* If this thread is joinable, wait for a call to pthread_join. */
    if( pthreadIS_JOINABLE( pxThread->xAttr.usSchedPriorityDetachState ) )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	885b      	ldrh	r3, [r3, #2]
 8005ff4:	b21b      	sxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	da0b      	bge.n	8006012 <prvExitThread+0x2e>
    {
        ( void ) xSemaphoreGive( ( SemaphoreHandle_t ) &pxThread->xJoinBarrier );
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f103 0010 	add.w	r0, r3, #16
 8006000:	2300      	movs	r3, #0
 8006002:	2200      	movs	r2, #0
 8006004:	2100      	movs	r1, #0
 8006006:	f7fc fded 	bl	8002be4 <xQueueGenericSend>

        /* Suspend until the call to pthread_join. The caller of pthread_join
         * will perform cleanup. */
        vTaskSuspend( NULL );
 800600a:	2000      	movs	r0, #0
 800600c:	f7fd fd72 	bl	8003af4 <vTaskSuspend>
    {
        /* For a detached thread, perform cleanup of thread object. */
        vPortFree( pxThread );
        vTaskDelete( NULL );
    }
}
 8006010:	e005      	b.n	800601e <prvExitThread+0x3a>
        vPortFree( pxThread );
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff fb04 	bl	8005620 <vPortFree>
        vTaskDelete( NULL );
 8006018:	2000      	movs	r0, #0
 800601a:	f7fd fcf9 	bl	8003a10 <vTaskDelete>
}
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <prvRunThread>:

/*-----------------------------------------------------------*/

static void prvRunThread( void * pxArg )
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
    pthread_internal_t * pxThread = ( pthread_internal_t * ) pxArg;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60fb      	str	r3, [r7, #12]

    /* Run the thread routine. */
    pxThread->xReturn = pxThread->pvStartRoutine( ( void * ) pxThread->xTaskArg );
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	6892      	ldr	r2, [r2, #8]
 800603a:	4610      	mov	r0, r2
 800603c:	4798      	blx	r3
 800603e:	4602      	mov	r2, r0
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    /* Exit once finished. This function does not return. */
    prvExitThread();
 8006046:	f7ff ffcd 	bl	8005fe4 <prvExitThread>
}
 800604a:	bf00      	nop
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <pthread_attr_destroy>:

/*-----------------------------------------------------------*/

int pthread_attr_destroy( pthread_attr_t * attr )
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
    ( void ) attr;

    return 0;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <pthread_attr_getschedparam>:

/*-----------------------------------------------------------*/

int pthread_attr_getschedparam( const pthread_attr_t * attr,
                                struct sched_param * param )
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
    pthread_attr_internal_t * pxAttr = ( pthread_attr_internal_t * ) ( attr );
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	60fb      	str	r3, [r7, #12]

    param->sched_priority = ( int ) ( pthreadGET_SCHED_PRIORITY( pxAttr->usSchedPriorityDetachState ) );
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	885b      	ldrh	r3, [r3, #2]
 800607a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	601a      	str	r2, [r3, #0]

    return 0;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <pthread_attr_init>:
}

/*-----------------------------------------------------------*/

int pthread_attr_init( pthread_attr_t * attr )
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
    /* Copy the default values into the new thread attributes object. */
    *( ( pthread_attr_internal_t * ) ( attr ) ) = xDefaultThreadAttributes;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a05      	ldr	r2, [pc, #20]	; (80060b0 <pthread_attr_init+0x20>)
 800609c:	6810      	ldr	r0, [r2, #0]
 800609e:	6018      	str	r0, [r3, #0]

    return 0;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	08009538 	.word	0x08009538

080060b4 <pthread_attr_setdetachstate>:

/*-----------------------------------------------------------*/

int pthread_attr_setdetachstate( pthread_attr_t * attr,
                                 int detachstate )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
    int iStatus = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
    pthread_attr_internal_t * pxAttr = ( pthread_attr_internal_t * ) ( attr );
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60bb      	str	r3, [r7, #8]

    if( ( detachstate != PTHREAD_CREATE_DETACHED ) && ( detachstate != PTHREAD_CREATE_JOINABLE ) )
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <pthread_attr_setdetachstate+0x24>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d002      	beq.n	80060d8 <pthread_attr_setdetachstate+0x24>
    {
        iStatus = EINVAL;
 80060d2:	2316      	movs	r3, #22
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e012      	b.n	80060fe <pthread_attr_setdetachstate+0x4a>
    }
    else
    {
        /* clear and then set msb bit to detachstate) */
        pxAttr->usSchedPriorityDetachState &= ~pthreadDETACH_STATE_MASK;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	885b      	ldrh	r3, [r3, #2]
 80060dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	805a      	strh	r2, [r3, #2]
        pxAttr->usSchedPriorityDetachState |= ( ( uint16_t ) detachstate << pthreadDETACH_STATE_SHIFT );
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	885b      	ldrh	r3, [r3, #2]
 80060ea:	b21a      	sxth	r2, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	03db      	lsls	r3, r3, #15
 80060f2:	b21b      	sxth	r3, r3
 80060f4:	4313      	orrs	r3, r2
 80060f6:	b21b      	sxth	r3, r3
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	805a      	strh	r2, [r3, #2]
    }

    return iStatus;
 80060fe:	68fb      	ldr	r3, [r7, #12]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <pthread_attr_setschedparam>:

/*-----------------------------------------------------------*/

int pthread_attr_setschedparam( pthread_attr_t * attr,
                                const struct sched_param * param )
{
 800610c:	b590      	push	{r4, r7, lr}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
    int iStatus = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
    pthread_attr_internal_t * pxAttr = ( pthread_attr_internal_t * ) ( attr );
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60bb      	str	r3, [r7, #8]

    /* Check for NULL param. */
    if( param == NULL )
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <pthread_attr_setschedparam+0x1c>
    {
        iStatus = EINVAL;
 8006124:	2316      	movs	r3, #22
 8006126:	60fb      	str	r3, [r7, #12]
    }

    /* Ensure that param.sched_priority is valid. */
    if( ( iStatus == 0 ) &&
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10d      	bne.n	800614a <pthread_attr_setschedparam+0x3e>
        ( ( param->sched_priority > sched_get_priority_max( SCHED_OTHER ) ) ||
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681c      	ldr	r4, [r3, #0]
 8006132:	2000      	movs	r0, #0
 8006134:	f000 fa99 	bl	800666a <sched_get_priority_max>
 8006138:	4603      	mov	r3, r0
    if( ( iStatus == 0 ) &&
 800613a:	429c      	cmp	r4, r3
 800613c:	dc03      	bgt.n	8006146 <pthread_attr_setschedparam+0x3a>
          ( param->sched_priority < 0 ) ) )
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
        ( ( param->sched_priority > sched_get_priority_max( SCHED_OTHER ) ) ||
 8006142:	2b00      	cmp	r3, #0
 8006144:	da01      	bge.n	800614a <pthread_attr_setschedparam+0x3e>
    {
        iStatus = ENOTSUP;
 8006146:	235f      	movs	r3, #95	; 0x5f
 8006148:	60fb      	str	r3, [r7, #12]
    }

    /* Set the sched_param. */
    if( iStatus == 0 )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d111      	bne.n	8006174 <pthread_attr_setschedparam+0x68>
    {
        /* clear and then set  15 LSB to schedule priority) */
        pxAttr->usSchedPriorityDetachState &= ~pthreadSCHED_PRIORITY_MASK;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	885b      	ldrh	r3, [r3, #2]
 8006154:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006158:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800615c:	b29a      	uxth	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	805a      	strh	r2, [r3, #2]
        pxAttr->usSchedPriorityDetachState |= ( ( uint16_t ) param->sched_priority );
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	885a      	ldrh	r2, [r3, #2]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	4313      	orrs	r3, r2
 800616e:	b29a      	uxth	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	805a      	strh	r2, [r3, #2]
    }

    return iStatus;
 8006174:	68fb      	ldr	r3, [r7, #12]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	bd90      	pop	{r4, r7, pc}

0800617e <pthread_attr_setstacksize>:

/*-----------------------------------------------------------*/

int pthread_attr_setstacksize( pthread_attr_t * attr,
                               size_t stacksize )
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
    int iStatus = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
    pthread_attr_internal_t * pxAttr = ( pthread_attr_internal_t * ) ( attr );
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	60bb      	str	r3, [r7, #8]

    if( stacksize < PTHREAD_STACK_MIN )
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006196:	d202      	bcs.n	800619e <pthread_attr_setstacksize+0x20>
    {
        iStatus = EINVAL;
 8006198:	2316      	movs	r3, #22
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e003      	b.n	80061a6 <pthread_attr_setstacksize+0x28>
    }
    else
    {
        pxAttr->usStackSize = ( uint16_t ) stacksize;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	801a      	strh	r2, [r3, #0]
    }

    return iStatus;
 80061a6:	68fb      	ldr	r3, [r7, #12]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <pthread_create>:

int pthread_create( pthread_t * thread,
                    const pthread_attr_t * attr,
                    void *( *startroutine )( void * ),
                    void * arg )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
    int iStatus = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
    pthread_internal_t * pxThread = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61bb      	str	r3, [r7, #24]
    struct sched_param xSchedParam = { .sched_priority = tskIDLE_PRIORITY };
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]

    /* Allocate memory for new thread object. */
    pxThread = ( pthread_internal_t * ) pvPortMalloc( sizeof( pthread_internal_t ) );
 80061ce:	20b4      	movs	r0, #180	; 0xb4
 80061d0:	f7ff f95a 	bl	8005488 <pvPortMalloc>
 80061d4:	61b8      	str	r0, [r7, #24]

    if( pxThread == NULL )
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <pthread_create+0x2c>
    {
        /* No memory. */
        iStatus = EAGAIN;
 80061dc:	230b      	movs	r3, #11
 80061de:	61fb      	str	r3, [r7, #28]
    }

    if( iStatus == 0 )
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d12a      	bne.n	800623c <pthread_create+0x88>
    {
        /* No attributes given, use default attributes. */
        if( attr == NULL )
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <pthread_create+0x42>
        {
            pxThread->xAttr = xDefaultThreadAttributes;
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	4a2a      	ldr	r2, [pc, #168]	; (8006298 <pthread_create+0xe4>)
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e003      	b.n	80061fe <pthread_create+0x4a>
        }
        /* Otherwise, use provided attributes. */
        else
        {
            pxThread->xAttr = *( ( pthread_attr_internal_t * ) ( attr ) );
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	6810      	ldr	r0, [r2, #0]
 80061fc:	6018      	str	r0, [r3, #0]
        }

        /* Get priority from attributes */
        xSchedParam.sched_priority = ( int ) pthreadGET_SCHED_PRIORITY( pxThread->xAttr.usSchedPriorityDetachState );
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	885b      	ldrh	r3, [r3, #2]
 8006202:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006206:	617b      	str	r3, [r7, #20]

        /* Set argument and start routine. */
        pxThread->xTaskArg = arg;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	609a      	str	r2, [r3, #8]
        pxThread->pvStartRoutine = startroutine;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	605a      	str	r2, [r3, #4]

        /* If this thread is joinable, create the synchronization mechanisms for
         * pthread_join. */

        if( pthreadIS_JOINABLE( pxThread->xAttr.usSchedPriorityDetachState ) )
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	885b      	ldrh	r3, [r3, #2]
 8006218:	b21b      	sxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	da0e      	bge.n	800623c <pthread_create+0x88>
        {
            /* These calls will not fail when their arguments aren't NULL. */
            ( void ) xSemaphoreCreateMutexStatic( &pxThread->xJoinMutex );
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	3360      	adds	r3, #96	; 0x60
 8006222:	4619      	mov	r1, r3
 8006224:	2001      	movs	r0, #1
 8006226:	f7fc fc3e 	bl	8002aa6 <xQueueCreateMutexStatic>
            ( void ) xSemaphoreCreateBinaryStatic( &pxThread->xJoinBarrier );
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	3310      	adds	r3, #16
 800622e:	2203      	movs	r2, #3
 8006230:	9200      	str	r2, [sp, #0]
 8006232:	2200      	movs	r2, #0
 8006234:	2100      	movs	r1, #0
 8006236:	2001      	movs	r0, #1
 8006238:	f7fc fb46 	bl	80028c8 <xQueueGenericCreateStatic>
        }
    }

    if( iStatus == 0 )
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d125      	bne.n	800628e <pthread_create+0xda>
    {
        /* Suspend all tasks to create a critical section. This ensures that
         * the new thread doesn't exit before a tag is assigned. */
        vTaskSuspendAll();
 8006242:	f7fd fd3d 	bl	8003cc0 <vTaskSuspendAll>

        /* Create the FreeRTOS task that will run the pthread. */
        if( xTaskCreate( prvRunThread,
                         posixconfigPTHREAD_TASK_NAME,
                         ( uint16_t ) ( pxThread->xAttr.usStackSize / sizeof( StackType_t ) ),
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	881b      	ldrh	r3, [r3, #0]
        if( xTaskCreate( prvRunThread,
 800624a:	089b      	lsrs	r3, r3, #2
 800624c:	b29a      	uxth	r2, r3
                         ( void * ) pxThread,
                         xSchedParam.sched_priority,
 800624e:	697b      	ldr	r3, [r7, #20]
        if( xTaskCreate( prvRunThread,
 8006250:	4619      	mov	r1, r3
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	330c      	adds	r3, #12
 8006256:	9301      	str	r3, [sp, #4]
 8006258:	9100      	str	r1, [sp, #0]
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	490f      	ldr	r1, [pc, #60]	; (800629c <pthread_create+0xe8>)
 800625e:	4810      	ldr	r0, [pc, #64]	; (80062a0 <pthread_create+0xec>)
 8006260:	f7fd fa77 	bl	8003752 <xTaskCreate>
 8006264:	4603      	mov	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d005      	beq.n	8006276 <pthread_create+0xc2>
                         &pxThread->xTaskHandle ) != pdPASS )
        {
            /* Task creation failed, no memory. */
            vPortFree( pxThread );
 800626a:	69b8      	ldr	r0, [r7, #24]
 800626c:	f7ff f9d8 	bl	8005620 <vPortFree>
            iStatus = EAGAIN;
 8006270:	230b      	movs	r3, #11
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	e009      	b.n	800628a <pthread_create+0xd6>
        }
        else
        {
            /* Store the pointer to the thread object in the task tag. */
            vTaskSetApplicationTaskTag( pxThread->xTaskHandle, ( TaskHookFunction_t ) pxThread );
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	4611      	mov	r1, r2
 800627e:	4618      	mov	r0, r3
 8006280:	f7fd fe94 	bl	8003fac <vTaskSetApplicationTaskTag>

            /* Set the thread object for the user. */
            *thread = ( pthread_t ) pxThread;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	601a      	str	r2, [r3, #0]
        }

        /* End the critical section. */
        xTaskResumeAll();
 800628a:	f7fd fd27 	bl	8003cdc <xTaskResumeAll>
    }

    return iStatus;
 800628e:	69fb      	ldr	r3, [r7, #28]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3720      	adds	r7, #32
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	08009538 	.word	0x08009538
 800629c:	0800950c 	.word	0x0800950c
 80062a0:	08006027 	.word	0x08006027

080062a4 <pthread_equal>:

/*-----------------------------------------------------------*/

int pthread_equal( pthread_t t1,
                   pthread_t t2 )
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
    return t1 == t2;
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	bf0c      	ite	eq
 80062b6:	2301      	moveq	r3, #1
 80062b8:	2300      	movne	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <pthread_join>:

/*-----------------------------------------------------------*/

int pthread_join( pthread_t pthread,
                  void ** retval )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
    int iStatus = 0;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
    pthread_internal_t * pxThread = ( pthread_internal_t * ) pthread;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60bb      	str	r3, [r7, #8]

    /* Make sure pthread is joinable. Otherwise, this function would block
     * forever waiting for an unjoinable thread. */
    if( !pthreadIS_JOINABLE( pxThread->xAttr.usSchedPriorityDetachState ) )
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	885b      	ldrh	r3, [r3, #2]
 80062de:	b21b      	sxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	db01      	blt.n	80062e8 <pthread_join+0x20>
    {
        iStatus = EDEADLK;
 80062e4:	232d      	movs	r3, #45	; 0x2d
 80062e6:	60fb      	str	r3, [r7, #12]
    }

    /* Only one thread may attempt to join another. Lock the join mutex
     * to prevent other threads from calling pthread_join on the same thread. */
    if( iStatus == 0 )
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <pthread_join+0x3c>
    {
        if( xSemaphoreTake( ( SemaphoreHandle_t ) &pxThread->xJoinMutex, 0 ) != pdPASS )
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	3360      	adds	r3, #96	; 0x60
 80062f2:	2100      	movs	r1, #0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fc feef 	bl	80030d8 <xQueueSemaphoreTake>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d001      	beq.n	8006304 <pthread_join+0x3c>
        {
            /* Another thread has already joined the requested thread, which would
             * cause this thread to wait forever. */
            iStatus = EDEADLK;
 8006300:	232d      	movs	r3, #45	; 0x2d
 8006302:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Attempting to join the calling thread would cause a deadlock. */
    if( iStatus == 0 )
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10b      	bne.n	8006322 <pthread_join+0x5a>
    {
        if( pthread_equal( pthread_self(), pthread ) != 0 )
 800630a:	f000 f847 	bl	800639c <pthread_self>
 800630e:	4603      	mov	r3, r0
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff ffc6 	bl	80062a4 <pthread_equal>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <pthread_join+0x5a>
        {
            iStatus = EDEADLK;
 800631e:	232d      	movs	r3, #45	; 0x2d
 8006320:	60fb      	str	r3, [r7, #12]
        }
    }

    if( iStatus == 0 )
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d134      	bne.n	8006392 <pthread_join+0xca>
    {
        /* Wait for the joining thread to finish. Because this call waits forever,
         * it should never fail. */
        ( void ) xSemaphoreTake( ( SemaphoreHandle_t ) &pxThread->xJoinBarrier, portMAX_DELAY );
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	3310      	adds	r3, #16
 800632c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006330:	4618      	mov	r0, r3
 8006332:	f7fc fed1 	bl	80030d8 <xQueueSemaphoreTake>

        /* Create a critical section to clean up the joined thread. */
        vTaskSuspendAll();
 8006336:	f7fd fcc3 	bl	8003cc0 <vTaskSuspendAll>

        /* Release xJoinBarrier and delete it. */
        ( void ) xSemaphoreGive( ( SemaphoreHandle_t ) &pxThread->xJoinBarrier );
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f103 0010 	add.w	r0, r3, #16
 8006340:	2300      	movs	r3, #0
 8006342:	2200      	movs	r2, #0
 8006344:	2100      	movs	r1, #0
 8006346:	f7fc fc4d 	bl	8002be4 <xQueueGenericSend>
        vSemaphoreDelete( ( SemaphoreHandle_t ) &pxThread->xJoinBarrier );
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	3310      	adds	r3, #16
 800634e:	4618      	mov	r0, r3
 8006350:	f7fc ffce 	bl	80032f0 <vQueueDelete>

        /* Release xJoinMutex and delete it. */
        ( void ) xSemaphoreGive( ( SemaphoreHandle_t ) &pxThread->xJoinMutex );
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800635a:	2300      	movs	r3, #0
 800635c:	2200      	movs	r2, #0
 800635e:	2100      	movs	r1, #0
 8006360:	f7fc fc40 	bl	8002be4 <xQueueGenericSend>
        vSemaphoreDelete( ( SemaphoreHandle_t ) &pxThread->xJoinMutex );
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	3360      	adds	r3, #96	; 0x60
 8006368:	4618      	mov	r0, r3
 800636a:	f7fc ffc1 	bl	80032f0 <vQueueDelete>

        /* Delete the FreeRTOS task that ran the thread. */
        vTaskDelete( pxThread->xTaskHandle );
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	4618      	mov	r0, r3
 8006374:	f7fd fb4c 	bl	8003a10 <vTaskDelete>

        /* Set the return value. */
        if( retval != NULL )
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <pthread_join+0xc0>
        {
            *retval = pxThread->xReturn;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	601a      	str	r2, [r3, #0]
        }

        /* Free the thread object. */
        vPortFree( pxThread );
 8006388:	68b8      	ldr	r0, [r7, #8]
 800638a:	f7ff f949 	bl	8005620 <vPortFree>

        /* End the critical section. */
        xTaskResumeAll();
 800638e:	f7fd fca5 	bl	8003cdc <xTaskResumeAll>
    }

    return iStatus;
 8006392:	68fb      	ldr	r3, [r7, #12]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <pthread_self>:

/*-----------------------------------------------------------*/

pthread_t pthread_self( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
    /* Return a reference to this pthread object, which is stored in the
     * FreeRTOS task tag. */
    return ( pthread_t ) xTaskGetApplicationTaskTag( NULL );
 80063a0:	2000      	movs	r0, #0
 80063a2:	f7fd fe1f 	bl	8003fe4 <xTaskGetApplicationTaskTag>
 80063a6:	4603      	mov	r3, r0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	bd80      	pop	{r7, pc}

080063ac <prvInitializeStaticMutex>:
};

/*-----------------------------------------------------------*/

static void prvInitializeStaticMutex( pthread_mutex_internal_t * pxMutex )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
    /* Check if the mutex needs to be initialized. */
    if( pxMutex->xIsInitialized == pdFALSE )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d113      	bne.n	80063e4 <prvInitializeStaticMutex+0x38>
    {
        /* Mutex initialization must be in a critical section to prevent two threads
         * from initializing it at the same time. */
        taskENTER_CRITICAL();
 80063bc:	f7fe ff42 	bl	8005244 <vPortEnterCritical>

        /* Check again that the mutex is still uninitialized, i.e. it wasn't
         * initialized while this function was waiting to enter the critical
         * section. */
        if( pxMutex->xIsInitialized == pdFALSE )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10b      	bne.n	80063e0 <prvInitializeStaticMutex+0x34>
        {
            /* Set the mutex as the default type. */
            pxMutex->xAttr.iType = PTHREAD_MUTEX_DEFAULT;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	659a      	str	r2, [r3, #88]	; 0x58
            /* Call the correct FreeRTOS mutex initialization function based on
             * the mutex type. */
            #if PTHREAD_MUTEX_DEFAULT == PTHREAD_MUTEX_RECURSIVE
                ( void ) xSemaphoreCreateRecursiveMutexStatic( &pxMutex->xMutex );
            #else
                ( void ) xSemaphoreCreateMutexStatic( &pxMutex->xMutex );
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3304      	adds	r3, #4
 80063d2:	4619      	mov	r1, r3
 80063d4:	2001      	movs	r0, #1
 80063d6:	f7fc fb66 	bl	8002aa6 <xQueueCreateMutexStatic>
            #endif

            pxMutex->xIsInitialized = pdTRUE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	601a      	str	r2, [r3, #0]
        }

        /* Exit the critical section. */
        taskEXIT_CRITICAL();
 80063e0:	f7fe ff60 	bl	80052a4 <vPortExitCritical>
    }
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <pthread_mutex_destroy>:

/*-----------------------------------------------------------*/

int pthread_mutex_destroy( pthread_mutex_t * mutex )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
    pthread_mutex_internal_t * pxMutex = ( pthread_mutex_internal_t * ) ( mutex );
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60fb      	str	r3, [r7, #12]

    /* Free resources in use by the mutex. */
    if( pxMutex->xTaskOwner == NULL )
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d104      	bne.n	800640a <pthread_mutex_destroy+0x1e>
    {
        vSemaphoreDelete( ( SemaphoreHandle_t ) &pxMutex->xMutex );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3304      	adds	r3, #4
 8006404:	4618      	mov	r0, r3
 8006406:	f7fc ff73 	bl	80032f0 <vQueueDelete>
    }

    return 0;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <pthread_mutex_init>:

/*-----------------------------------------------------------*/

int pthread_mutex_init( pthread_mutex_t * mutex,
                        const pthread_mutexattr_t * attr )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b09c      	sub	sp, #112	; 0x70
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
    int iStatus = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	66fb      	str	r3, [r7, #108]	; 0x6c
    pthread_mutex_internal_t * pxMutex = ( pthread_mutex_internal_t * ) mutex;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	66bb      	str	r3, [r7, #104]	; 0x68

    if( pxMutex == NULL )
 8006426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <pthread_mutex_init+0x1c>
    {
        /* No memory. */
        iStatus = ENOMEM;
 800642c:	230c      	movs	r3, #12
 800642e:	66fb      	str	r3, [r7, #108]	; 0x6c
    }

    if( iStatus == 0 )
 8006430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d12f      	bne.n	8006496 <pthread_mutex_init+0x82>
    {
        *pxMutex = FREERTOS_POSIX_MUTEX_INITIALIZER;
 8006436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006438:	4618      	mov	r0, r3
 800643a:	235c      	movs	r3, #92	; 0x5c
 800643c:	461a      	mov	r2, r3
 800643e:	2100      	movs	r1, #0
 8006440:	f001 f819 	bl	8007476 <memset>

        /* No attributes given, use default attributes. */
        if( attr == NULL )
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d103      	bne.n	8006452 <pthread_mutex_init+0x3e>
        {
            pxMutex->xAttr = xDefaultMutexAttributes;
 800644a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800644c:	2200      	movs	r2, #0
 800644e:	659a      	str	r2, [r3, #88]	; 0x58
 8006450:	e003      	b.n	800645a <pthread_mutex_init+0x46>
        }
        /* Otherwise, use provided attributes. */
        else
        {
            pxMutex->xAttr = *( ( pthread_mutexattr_internal_t * ) ( attr ) );
 8006452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Call the correct FreeRTOS mutex creation function based on mutex type. */
        if( pxMutex->xAttr.iType == PTHREAD_MUTEX_RECURSIVE )
 800645a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800645c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645e:	2b02      	cmp	r3, #2
 8006460:	d106      	bne.n	8006470 <pthread_mutex_init+0x5c>
        {
            /* Recursive mutex. */
            ( void ) xSemaphoreCreateRecursiveMutexStatic( &pxMutex->xMutex );
 8006462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006464:	3304      	adds	r3, #4
 8006466:	4619      	mov	r1, r3
 8006468:	2004      	movs	r0, #4
 800646a:	f7fc fb1c 	bl	8002aa6 <xQueueCreateMutexStatic>
 800646e:	e005      	b.n	800647c <pthread_mutex_init+0x68>
        }
        else
        {
            /* All other mutex types. */
            ( void ) xSemaphoreCreateMutexStatic( &pxMutex->xMutex );
 8006470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	2001      	movs	r0, #1
 8006478:	f7fc fb15 	bl	8002aa6 <xQueueCreateMutexStatic>
        }

        /* Ensure that the FreeRTOS mutex was successfully created. */
        if( ( SemaphoreHandle_t ) &pxMutex->xMutex == NULL )
 800647c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800647e:	3304      	adds	r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <pthread_mutex_init+0x7c>
        {
            /* Failed to create mutex. Set error EAGAIN and free mutex object. */
            iStatus = EAGAIN;
 8006484:	230b      	movs	r3, #11
 8006486:	66fb      	str	r3, [r7, #108]	; 0x6c
            vPortFree( pxMutex );
 8006488:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800648a:	f7ff f8c9 	bl	8005620 <vPortFree>
 800648e:	e002      	b.n	8006496 <pthread_mutex_init+0x82>
        }
        else
        {
            /* Mutex successfully created. */
            pxMutex->xIsInitialized = pdTRUE;
 8006490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006492:	2201      	movs	r2, #1
 8006494:	601a      	str	r2, [r3, #0]
        }
    }

    return iStatus;
 8006496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8006498:	4618      	mov	r0, r3
 800649a:	3770      	adds	r7, #112	; 0x70
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <pthread_mutex_lock>:

/*-----------------------------------------------------------*/

int pthread_mutex_lock( pthread_mutex_t * mutex )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
    return pthread_mutex_timedlock( mutex, NULL );
 80064a8:	2100      	movs	r1, #0
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f805 	bl	80064ba <pthread_mutex_timedlock>
 80064b0:	4603      	mov	r3, r0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <pthread_mutex_timedlock>:

/*-----------------------------------------------------------*/

int pthread_mutex_timedlock( pthread_mutex_t * mutex,
                             const struct timespec * abstime )
{
 80064ba:	b590      	push	{r4, r7, lr}
 80064bc:	b08d      	sub	sp, #52	; 0x34
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
    int iStatus = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pthread_mutex_internal_t * pxMutex = ( pthread_mutex_internal_t * ) ( mutex );
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
    TickType_t xDelay = portMAX_DELAY;
 80064cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xFreeRTOSMutexTakeStatus = pdFALSE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If mutex in uninitialized, perform initialization. */
    prvInitializeStaticMutex( pxMutex );
 80064d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064d8:	f7ff ff68 	bl	80063ac <prvInitializeStaticMutex>

    /* At this point, the mutex should be initialized. */
    configASSERT( pxMutex->xIsInitialized == pdTRUE );
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d00a      	beq.n	80064fa <pthread_mutex_timedlock+0x40>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	623b      	str	r3, [r7, #32]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <pthread_mutex_timedlock+0x3e>

    /* Convert abstime to a delay in TickType_t if provided. */
    if( abstime != NULL )
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d022      	beq.n	8006546 <pthread_mutex_timedlock+0x8c>
    {
        struct timespec xCurrentTime = { 0 };
 8006500:	f107 0308 	add.w	r3, r7, #8
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	609a      	str	r2, [r3, #8]
 800650c:	60da      	str	r2, [r3, #12]

        /* Get current time */
        if( clock_gettime( CLOCK_REALTIME, &xCurrentTime ) != 0 )
 800650e:	f107 0308 	add.w	r3, r7, #8
 8006512:	4619      	mov	r1, r3
 8006514:	2000      	movs	r0, #0
 8006516:	f7ff f9a1 	bl	800585c <clock_gettime>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <pthread_mutex_timedlock+0x6c>
        {
            iStatus = EINVAL;
 8006520:	2316      	movs	r3, #22
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006524:	e008      	b.n	8006538 <pthread_mutex_timedlock+0x7e>
        }
        else
        {
            iStatus = UTILS_AbsoluteTimespecToDeltaTicks( abstime, &xCurrentTime, &xDelay );
 8006526:	f107 021c 	add.w	r2, r7, #28
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	4619      	mov	r1, r3
 8006530:	6838      	ldr	r0, [r7, #0]
 8006532:	f000 f8c7 	bl	80066c4 <UTILS_AbsoluteTimespecToDeltaTicks>
 8006536:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* If abstime was in the past, still attempt to lock the mutex without
         * blocking, per POSIX spec. */
        if( iStatus == ETIMEDOUT )
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2b74      	cmp	r3, #116	; 0x74
 800653c:	d103      	bne.n	8006546 <pthread_mutex_timedlock+0x8c>
        {
            xDelay = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
            iStatus = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    /* Check if trying to lock a currently owned mutex. */
    if( ( iStatus == 0 ) &&
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10c      	bne.n	8006566 <pthread_mutex_timedlock+0xac>
        ( pxMutex->xAttr.iType == PTHREAD_MUTEX_ERRORCHECK ) &&  /* Only PTHREAD_MUTEX_ERRORCHECK type detects deadlock. */
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    if( ( iStatus == 0 ) &&
 8006550:	2b01      	cmp	r3, #1
 8006552:	d108      	bne.n	8006566 <pthread_mutex_timedlock+0xac>
        ( pxMutex->xTaskOwner == xTaskGetCurrentTaskHandle() ) ) /* Check if locking a currently owned mutex. */
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8006558:	f7fe f808 	bl	800456c <xTaskGetCurrentTaskHandle>
 800655c:	4603      	mov	r3, r0
        ( pxMutex->xAttr.iType == PTHREAD_MUTEX_ERRORCHECK ) &&  /* Only PTHREAD_MUTEX_ERRORCHECK type detects deadlock. */
 800655e:	429c      	cmp	r4, r3
 8006560:	d101      	bne.n	8006566 <pthread_mutex_timedlock+0xac>
    {
        iStatus = EDEADLK;
 8006562:	232d      	movs	r3, #45	; 0x2d
 8006564:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if( iStatus == 0 )
 8006566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d11f      	bne.n	80065ac <pthread_mutex_timedlock+0xf2>
    {
        /* Call the correct FreeRTOS mutex take function based on mutex type. */
        if( pxMutex->xAttr.iType == PTHREAD_MUTEX_RECURSIVE )
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006570:	2b02      	cmp	r3, #2
 8006572:	d108      	bne.n	8006586 <pthread_mutex_timedlock+0xcc>
        {
            xFreeRTOSMutexTakeStatus = xSemaphoreTakeRecursive( ( SemaphoreHandle_t ) &pxMutex->xMutex, xDelay );
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	3304      	adds	r3, #4
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	4611      	mov	r1, r2
 800657c:	4618      	mov	r0, r3
 800657e:	f7fc fafa 	bl	8002b76 <xQueueTakeMutexRecursive>
 8006582:	62b8      	str	r0, [r7, #40]	; 0x28
 8006584:	e007      	b.n	8006596 <pthread_mutex_timedlock+0xdc>
        }
        else
        {
            xFreeRTOSMutexTakeStatus = xSemaphoreTake( ( SemaphoreHandle_t ) &pxMutex->xMutex, xDelay );
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	3304      	adds	r3, #4
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	4611      	mov	r1, r2
 800658e:	4618      	mov	r0, r3
 8006590:	f7fc fda2 	bl	80030d8 <xQueueSemaphoreTake>
 8006594:	62b8      	str	r0, [r7, #40]	; 0x28
        }

        /* If the mutex was successfully taken, set its owner. */
        if( xFreeRTOSMutexTakeStatus == pdPASS )
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	2b01      	cmp	r3, #1
 800659a:	d105      	bne.n	80065a8 <pthread_mutex_timedlock+0xee>
        {
            pxMutex->xTaskOwner = xTaskGetCurrentTaskHandle();
 800659c:	f7fd ffe6 	bl	800456c <xTaskGetCurrentTaskHandle>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	655a      	str	r2, [r3, #84]	; 0x54
 80065a6:	e001      	b.n	80065ac <pthread_mutex_timedlock+0xf2>
        }
        /* Otherwise, the mutex take timed out. */
        else
        {
            iStatus = ETIMEDOUT;
 80065a8:	2374      	movs	r3, #116	; 0x74
 80065aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    return iStatus;
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3734      	adds	r7, #52	; 0x34
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd90      	pop	{r4, r7, pc}

080065b6 <pthread_mutex_unlock>:
}

/*-----------------------------------------------------------*/

int pthread_mutex_unlock( pthread_mutex_t * mutex )
{
 80065b6:	b590      	push	{r4, r7, lr}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
    int iStatus = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
    pthread_mutex_internal_t * pxMutex = ( pthread_mutex_internal_t * ) ( mutex );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60bb      	str	r3, [r7, #8]

    /* If mutex in uninitialized, perform initialization. */
    prvInitializeStaticMutex( pxMutex );
 80065c6:	68b8      	ldr	r0, [r7, #8]
 80065c8:	f7ff fef0 	bl	80063ac <prvInitializeStaticMutex>

    /* Check if trying to unlock an unowned mutex. */
    if( ( ( pxMutex->xAttr.iType == PTHREAD_MUTEX_ERRORCHECK ) ||
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d003      	beq.n	80065dc <pthread_mutex_unlock+0x26>
          ( pxMutex->xAttr.iType == PTHREAD_MUTEX_RECURSIVE ) ) &&
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    if( ( ( pxMutex->xAttr.iType == PTHREAD_MUTEX_ERRORCHECK ) ||
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d108      	bne.n	80065ee <pthread_mutex_unlock+0x38>
        ( pxMutex->xTaskOwner != xTaskGetCurrentTaskHandle() ) )
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80065e0:	f7fd ffc4 	bl	800456c <xTaskGetCurrentTaskHandle>
 80065e4:	4603      	mov	r3, r0
          ( pxMutex->xAttr.iType == PTHREAD_MUTEX_RECURSIVE ) ) &&
 80065e6:	429c      	cmp	r4, r3
 80065e8:	d001      	beq.n	80065ee <pthread_mutex_unlock+0x38>
    {
        iStatus = EPERM;
 80065ea:	2301      	movs	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
    }

    if( iStatus == 0 )
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d11c      	bne.n	800662e <pthread_mutex_unlock+0x78>
    {
        /* Suspend the scheduler so that
         * mutex is unlocked AND owner is updated atomically */
        vTaskSuspendAll();
 80065f4:	f7fd fb64 	bl	8003cc0 <vTaskSuspendAll>

        /* Call the correct FreeRTOS mutex unlock function based on mutex type. */
        if( pxMutex->xAttr.iType == PTHREAD_MUTEX_RECURSIVE )
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d105      	bne.n	800660c <pthread_mutex_unlock+0x56>
        {
            ( void ) xSemaphoreGiveRecursive( ( SemaphoreHandle_t ) &pxMutex->xMutex );
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	3304      	adds	r3, #4
 8006604:	4618      	mov	r0, r3
 8006606:	f7fc fa82 	bl	8002b0e <xQueueGiveMutexRecursive>
 800660a:	e006      	b.n	800661a <pthread_mutex_unlock+0x64>
        }
        else
        {
            ( void ) xSemaphoreGive( ( SemaphoreHandle_t ) &pxMutex->xMutex );
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	1d18      	adds	r0, r3, #4
 8006610:	2300      	movs	r3, #0
 8006612:	2200      	movs	r2, #0
 8006614:	2100      	movs	r1, #0
 8006616:	f7fc fae5 	bl	8002be4 <xQueueGenericSend>
        }

        /* Update the owner of the mutex. A recursive mutex may still have an
         * owner, so it should be updated with xSemaphoreGetMutexHolder. */
        pxMutex->xTaskOwner = xSemaphoreGetMutexHolder( ( SemaphoreHandle_t ) &pxMutex->xMutex );
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	3304      	adds	r3, #4
 800661e:	4618      	mov	r0, r3
 8006620:	f7fc fa5c 	bl	8002adc <xQueueGetMutexHolder>
 8006624:	4602      	mov	r2, r0
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	655a      	str	r2, [r3, #84]	; 0x54

        /* Resume the scheduler */
        ( void ) xTaskResumeAll();
 800662a:	f7fd fb57 	bl	8003cdc <xTaskResumeAll>
    }

    return iStatus;
 800662e:	68fb      	ldr	r3, [r7, #12]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	bd90      	pop	{r4, r7, pc}

08006638 <pthread_mutexattr_destroy>:

/*-----------------------------------------------------------*/

int pthread_mutexattr_destroy( pthread_mutexattr_t * attr )
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
    ( void ) attr;

    return 0;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <pthread_mutexattr_init>:
}

/*-----------------------------------------------------------*/

int pthread_mutexattr_init( pthread_mutexattr_t * attr )
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
    *( ( pthread_mutexattr_internal_t * ) ( attr ) ) = xDefaultMutexAttributes;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]

    return 0;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <sched_get_priority_max>:
#include "FreeRTOS_POSIX/sched.h"

/*-----------------------------------------------------------*/

int sched_get_priority_max( int policy )
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
    /* Silence warnings about unused parameters. */
    ( void ) policy;

    return configMAX_PRIORITIES - 1;
 8006672:	2337      	movs	r3, #55	; 0x37
}
 8006674:	4618      	mov	r0, r3
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <UTILS_strnlen>:

/*-----------------------------------------------------------*/

size_t UTILS_strnlen( const char * const pcString,
                      size_t xMaxLength )
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
    const char * pcCharPointer = pcString;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60fb      	str	r3, [r7, #12]
    size_t xLength = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]

    if( pcString != NULL )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00e      	beq.n	80066b6 <UTILS_strnlen+0x36>
    {
        while( ( *pcCharPointer != '\0' ) && ( xLength < xMaxLength ) )
 8006698:	e005      	b.n	80066a6 <UTILS_strnlen+0x26>
        {
            xLength++;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	3301      	adds	r3, #1
 800669e:	60bb      	str	r3, [r7, #8]
            pcCharPointer++;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3301      	adds	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
        while( ( *pcCharPointer != '\0' ) && ( xLength < xMaxLength ) )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <UTILS_strnlen+0x36>
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d3f1      	bcc.n	800669a <UTILS_strnlen+0x1a>
        }
    }

    return xLength;
 80066b6:	68bb      	ldr	r3, [r7, #8]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <UTILS_AbsoluteTimespecToDeltaTicks>:
/*-----------------------------------------------------------*/

int UTILS_AbsoluteTimespecToDeltaTicks( const struct timespec * const pxAbsoluteTime,
                                        const struct timespec * const pxCurrentTime,
                                        TickType_t * const pxResult )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08a      	sub	sp, #40	; 0x28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
    int iStatus = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
    struct timespec xDifference = { 0 };
 80066d4:	f107 0310 	add.w	r3, r7, #16
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	605a      	str	r2, [r3, #4]
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	60da      	str	r2, [r3, #12]

    /* Check parameters. */
    if( ( pxAbsoluteTime == NULL ) || ( pxCurrentTime == NULL ) || ( pxResult == NULL ) )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <UTILS_AbsoluteTimespecToDeltaTicks+0x30>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <UTILS_AbsoluteTimespecToDeltaTicks+0x30>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <UTILS_AbsoluteTimespecToDeltaTicks+0x34>
    {
        iStatus = EINVAL;
 80066f4:	2316      	movs	r3, #22
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Calculate the difference between the current time and absolute time. */
    if( iStatus == 0 )
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d113      	bne.n	8006726 <UTILS_AbsoluteTimespecToDeltaTicks+0x62>
    {
        iStatus = UTILS_TimespecSubtract( pxAbsoluteTime, pxCurrentTime, &xDifference );
 80066fe:	f107 0310 	add.w	r3, r7, #16
 8006702:	461a      	mov	r2, r3
 8006704:	68b9      	ldr	r1, [r7, #8]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 f916 	bl	8006938 <UTILS_TimespecSubtract>
 800670c:	6278      	str	r0, [r7, #36]	; 0x24

        if( iStatus == 1 )
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	2b01      	cmp	r3, #1
 8006712:	d102      	bne.n	800671a <UTILS_AbsoluteTimespecToDeltaTicks+0x56>
        {
            /* pxAbsoluteTime was in the past. */
            iStatus = ETIMEDOUT;
 8006714:	2374      	movs	r3, #116	; 0x74
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
 8006718:	e005      	b.n	8006726 <UTILS_AbsoluteTimespecToDeltaTicks+0x62>
        }
        else if( iStatus == -1 )
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006720:	d101      	bne.n	8006726 <UTILS_AbsoluteTimespecToDeltaTicks+0x62>
        {
            /* error */
            iStatus = EINVAL;
 8006722:	2316      	movs	r3, #22
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Convert the time difference to ticks. */
    if( iStatus == 0 )
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <UTILS_AbsoluteTimespecToDeltaTicks+0x76>
    {
        iStatus = UTILS_TimespecToTicks( &xDifference, pxResult );
 800672c:	f107 0310 	add.w	r3, r7, #16
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 f806 	bl	8006744 <UTILS_TimespecToTicks>
 8006738:	6278      	str	r0, [r7, #36]	; 0x24
    }

    return iStatus;
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800673c:	4618      	mov	r0, r3
 800673e:	3728      	adds	r7, #40	; 0x28
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <UTILS_TimespecToTicks>:

/*-----------------------------------------------------------*/

int UTILS_TimespecToTicks( const struct timespec * const pxTimespec,
                           TickType_t * const pxResult )
{
 8006744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006748:	b08c      	sub	sp, #48	; 0x30
 800674a:	af00      	add	r7, sp, #0
 800674c:	6178      	str	r0, [r7, #20]
 800674e:	6139      	str	r1, [r7, #16]
    int iStatus = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
    int64_t llTotalTicks = 0;
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    long lNanoseconds = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	61fb      	str	r3, [r7, #28]

    /* Check parameters. */
    if( ( pxTimespec == NULL ) || ( pxResult == NULL ) )
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <UTILS_TimespecToTicks+0x2c>
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d102      	bne.n	8006776 <UTILS_TimespecToTicks+0x32>
    {
        iStatus = EINVAL;
 8006770:	2316      	movs	r3, #22
 8006772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006774:	e00d      	b.n	8006792 <UTILS_TimespecToTicks+0x4e>
    }
    else if( ( iStatus == 0 ) && ( UTILS_ValidateTimespec( pxTimespec ) == false ) )
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10a      	bne.n	8006792 <UTILS_TimespecToTicks+0x4e>
 800677c:	6978      	ldr	r0, [r7, #20]
 800677e:	f000 f999 	bl	8006ab4 <UTILS_ValidateTimespec>
 8006782:	4603      	mov	r3, r0
 8006784:	f083 0301 	eor.w	r3, r3, #1
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <UTILS_TimespecToTicks+0x4e>
    {
        iStatus = EINVAL;
 800678e:	2316      	movs	r3, #22
 8006790:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if( iStatus == 0 )
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d172      	bne.n	800687e <UTILS_TimespecToTicks+0x13a>
    {
        /* Convert timespec.tv_sec to ticks. */
        llTotalTicks = ( int64_t ) configTICK_RATE_HZ * ( pxTimespec->tv_sec );
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	f04f 0a00 	mov.w	sl, #0
 80067a6:	f04f 0b00 	mov.w	fp, #0
 80067aa:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80067ae:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80067b2:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80067b6:	4652      	mov	r2, sl
 80067b8:	465b      	mov	r3, fp
 80067ba:	1a14      	subs	r4, r2, r0
 80067bc:	eb63 0501 	sbc.w	r5, r3, r1
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	00ab      	lsls	r3, r5, #2
 80067ca:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80067ce:	00a2      	lsls	r2, r4, #2
 80067d0:	4614      	mov	r4, r2
 80067d2:	461d      	mov	r5, r3
 80067d4:	eb14 0800 	adds.w	r8, r4, r0
 80067d8:	eb45 0901 	adc.w	r9, r5, r1
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067f0:	4690      	mov	r8, r2
 80067f2:	4699      	mov	r9, r3
 80067f4:	e9c7 8908 	strd	r8, r9, [r7, #32]

        /* Convert timespec.tv_nsec to ticks. This value does not have to be checked
         * for overflow because a valid timespec has 0 <= tv_nsec < 1000000000 and
         * NANOSECONDS_PER_TICK > 1. */
        lNanoseconds = pxTimespec->tv_nsec / ( long ) NANOSECONDS_PER_TICK +                  /* Whole nanoseconds. */
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	4a23      	ldr	r2, [pc, #140]	; (800688c <UTILS_TimespecToTicks+0x148>)
 80067fe:	fb82 1203 	smull	r1, r2, r2, r3
 8006802:	1492      	asrs	r2, r2, #18
 8006804:	17db      	asrs	r3, r3, #31
 8006806:	1ad1      	subs	r1, r2, r3
                       ( long ) ( pxTimespec->tv_nsec % ( long ) NANOSECONDS_PER_TICK != 0 ); /* Add 1 to round up if needed. */
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	4b1f      	ldr	r3, [pc, #124]	; (800688c <UTILS_TimespecToTicks+0x148>)
 800680e:	fb83 0302 	smull	r0, r3, r3, r2
 8006812:	1498      	asrs	r0, r3, #18
 8006814:	17d3      	asrs	r3, r2, #31
 8006816:	1ac3      	subs	r3, r0, r3
 8006818:	481d      	ldr	r0, [pc, #116]	; (8006890 <UTILS_TimespecToTicks+0x14c>)
 800681a:	fb00 f303 	mul.w	r3, r0, r3
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	bf14      	ite	ne
 8006824:	2301      	movne	r3, #1
 8006826:	2300      	moveq	r3, #0
 8006828:	b2db      	uxtb	r3, r3
        lNanoseconds = pxTimespec->tv_nsec / ( long ) NANOSECONDS_PER_TICK +                  /* Whole nanoseconds. */
 800682a:	440b      	add	r3, r1
 800682c:	61fb      	str	r3, [r7, #28]

        /* Add the nanoseconds to the total ticks. */
        llTotalTicks += ( int64_t ) lNanoseconds;
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	17da      	asrs	r2, r3, #31
 8006832:	60bb      	str	r3, [r7, #8]
 8006834:	60fa      	str	r2, [r7, #12]
 8006836:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800683a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800683e:	4621      	mov	r1, r4
 8006840:	1851      	adds	r1, r2, r1
 8006842:	6039      	str	r1, [r7, #0]
 8006844:	4629      	mov	r1, r5
 8006846:	eb43 0101 	adc.w	r1, r3, r1
 800684a:	6079      	str	r1, [r7, #4]
 800684c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006850:	e9c7 3408 	strd	r3, r4, [r7, #32]

        /* Check for overflow */
        if( llTotalTicks < 0 )
 8006854:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006858:	2b00      	cmp	r3, #0
 800685a:	da02      	bge.n	8006862 <UTILS_TimespecToTicks+0x11e>
        {
            iStatus = EINVAL;
 800685c:	2316      	movs	r3, #22
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006860:	e00a      	b.n	8006878 <UTILS_TimespecToTicks+0x134>
        }
        else
        {
            /* check if TickType_t is 32 bit or 64 bit */
            uint32_t ulTickTypeSize = sizeof( TickType_t );
 8006862:	2304      	movs	r3, #4
 8006864:	61bb      	str	r3, [r7, #24]

            /* check for downcast overflow */
            if( ulTickTypeSize == sizeof( uint32_t ) )
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b04      	cmp	r3, #4
 800686a:	d105      	bne.n	8006878 <UTILS_TimespecToTicks+0x134>
            {
                if( llTotalTicks > UINT_MAX )
 800686c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006870:	2b01      	cmp	r3, #1
 8006872:	db01      	blt.n	8006878 <UTILS_TimespecToTicks+0x134>
                {
                    iStatus = EINVAL;
 8006874:	2316      	movs	r3, #22
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }
        }

        /* Write result. */
        *pxResult = ( TickType_t ) llTotalTicks;
 8006878:	6a3a      	ldr	r2, [r7, #32]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	601a      	str	r2, [r3, #0]
    }

    return iStatus;
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006880:	4618      	mov	r0, r3
 8006882:	3730      	adds	r7, #48	; 0x30
 8006884:	46bd      	mov	sp, r7
 8006886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800688a:	bf00      	nop
 800688c:	431bde83 	.word	0x431bde83
 8006890:	000f4240 	.word	0x000f4240
 8006894:	00000000 	.word	0x00000000

08006898 <UTILS_NanosecondsToTimespec>:

/*-----------------------------------------------------------*/

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8006898:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800689c:	b086      	sub	sp, #24
 800689e:	af00      	add	r7, sp, #0
 80068a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80068aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068ae:	a320      	add	r3, pc, #128	; (adr r3, 8006930 <UTILS_NanosecondsToTimespec+0x98>)
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f7f9 fcfc 	bl	80002b0 <__aeabi_ldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80068c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068c6:	a31a      	add	r3, pc, #104	; (adr r3, 8006930 <UTILS_NanosecondsToTimespec+0x98>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f7f9 fcf0 	bl	80002b0 <__aeabi_ldivmod>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	da20      	bge.n	800691e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	4a11      	ldr	r2, [pc, #68]	; (8006928 <UTILS_NanosecondsToTimespec+0x90>)
 80068e2:	fb82 1203 	smull	r1, r2, r2, r3
 80068e6:	1712      	asrs	r2, r2, #28
 80068e8:	17db      	asrs	r3, r3, #31
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	3301      	adds	r3, #1
 80068ee:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	6979      	ldr	r1, [r7, #20]
 80068f8:	17c8      	asrs	r0, r1, #31
 80068fa:	460c      	mov	r4, r1
 80068fc:	4605      	mov	r5, r0
 80068fe:	ebb2 0804 	subs.w	r8, r2, r4
 8006902:	eb63 0905 	sbc.w	r9, r3, r5
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	4906      	ldr	r1, [pc, #24]	; (800692c <UTILS_NanosecondsToTimespec+0x94>)
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	441a      	add	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	609a      	str	r2, [r3, #8]
    }
}
 800691e:	bf00      	nop
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006928:	44b82fa1 	.word	0x44b82fa1
 800692c:	3b9aca00 	.word	0x3b9aca00
 8006930:	3b9aca00 	.word	0x3b9aca00
 8006934:	00000000 	.word	0x00000000

08006938 <UTILS_TimespecSubtract>:
/*-----------------------------------------------------------*/

int UTILS_TimespecSubtract( const struct timespec * const x,
                            const struct timespec * const y,
                            struct timespec * const pxResult )
{
 8006938:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
    int iCompareResult = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	613b      	str	r3, [r7, #16]
    int iStatus = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]

    /* Check parameters. */
    if( ( pxResult == NULL ) || ( x == NULL ) || ( y == NULL ) )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <UTILS_TimespecSubtract+0x28>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <UTILS_TimespecSubtract+0x28>
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d102      	bne.n	8006966 <UTILS_TimespecSubtract+0x2e>
    {
        iStatus = -1;
 8006960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006964:	617b      	str	r3, [r7, #20]
    }

    if( iStatus == 0 )
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d147      	bne.n	80069fc <UTILS_TimespecSubtract+0xc4>
    {
        iCompareResult = UTILS_TimespecCompare( x, y );
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f84c 	bl	8006a0c <UTILS_TimespecCompare>
 8006974:	6138      	str	r0, [r7, #16]

        /* if x < y then result would be negative, return 1 */
        if( iCompareResult == -1 )
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800697c:	d102      	bne.n	8006984 <UTILS_TimespecSubtract+0x4c>
        {
            iStatus = 1;
 800697e:	2301      	movs	r3, #1
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e03b      	b.n	80069fc <UTILS_TimespecSubtract+0xc4>
        }
        else if( iCompareResult == 0 )
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <UTILS_TimespecSubtract+0x68>
        {
            /* if times are the same return zero */
            pxResult->tv_sec = 0;
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	e9c1 2300 	strd	r2, r3, [r1]
            pxResult->tv_nsec = 0;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	609a      	str	r2, [r3, #8]
 800699e:	e02d      	b.n	80069fc <UTILS_TimespecSubtract+0xc4>
        }
        else
        {
            /* If x > y Perform subtraction. */
            pxResult->tv_sec = x->tv_sec - y->tv_sec;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	ebb0 0802 	subs.w	r8, r0, r2
 80069b0:	eb61 0903 	sbc.w	r9, r1, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	e9c3 8900 	strd	r8, r9, [r3]
            pxResult->tv_nsec = x->tv_nsec - y->tv_nsec;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	1ad2      	subs	r2, r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	609a      	str	r2, [r3, #8]

            /* check if nano seconds value needs to borrow */
            if( pxResult->tv_nsec < 0 )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da0e      	bge.n	80069ee <UTILS_TimespecSubtract+0xb6>
            {
                /* Based on comparison, tv_sec > 0 */
                pxResult->tv_sec--;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	1e54      	subs	r4, r2, #1
 80069d8:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	e9c3 4500 	strd	r4, r5, [r3]
                pxResult->tv_nsec += ( long ) NANOSECONDS_PER_SECOND;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	4b08      	ldr	r3, [pc, #32]	; (8006a08 <UTILS_TimespecSubtract+0xd0>)
 80069e8:	4413      	add	r3, r2
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6093      	str	r3, [r2, #8]
            }

            /* if nano second is negative after borrow, it is an overflow error */
            if( pxResult->tv_nsec < 0 )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	da02      	bge.n	80069fc <UTILS_TimespecSubtract+0xc4>
            {
                iStatus = -1;
 80069f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069fa:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return iStatus;
 80069fc:	697b      	ldr	r3, [r7, #20]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a08:	3b9aca00 	.word	0x3b9aca00

08006a0c <UTILS_TimespecCompare>:

/*-----------------------------------------------------------*/

int UTILS_TimespecCompare( const struct timespec * const x,
                           const struct timespec * const y )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
    int iStatus = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60fb      	str	r3, [r7, #12]

    /* Check parameters */
    if( ( x == NULL ) && ( y == NULL ) )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d105      	bne.n	8006a2c <UTILS_TimespecCompare+0x20>
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <UTILS_TimespecCompare+0x20>
    {
        iStatus = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	e03c      	b.n	8006aa6 <UTILS_TimespecCompare+0x9a>
    }
    else if( y == NULL )
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <UTILS_TimespecCompare+0x2c>
    {
        iStatus = 1;
 8006a32:	2301      	movs	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	e036      	b.n	8006aa6 <UTILS_TimespecCompare+0x9a>
    }
    else if( x == NULL )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <UTILS_TimespecCompare+0x3a>
    {
        iStatus = -1;
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e02f      	b.n	8006aa6 <UTILS_TimespecCompare+0x9a>
    }
    else if( x->tv_sec > y->tv_sec )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a52:	4290      	cmp	r0, r2
 8006a54:	eb71 0303 	sbcs.w	r3, r1, r3
 8006a58:	da02      	bge.n	8006a60 <UTILS_TimespecCompare+0x54>
    {
        iStatus = 1;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	e022      	b.n	8006aa6 <UTILS_TimespecCompare+0x9a>
    }
    else if( x->tv_sec < y->tv_sec )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	4290      	cmp	r0, r2
 8006a6e:	eb71 0303 	sbcs.w	r3, r1, r3
 8006a72:	da03      	bge.n	8006a7c <UTILS_TimespecCompare+0x70>
    {
        iStatus = -1;
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	e014      	b.n	8006aa6 <UTILS_TimespecCompare+0x9a>
    }
    else
    {
        /* seconds are equal compare nano seconds */
        if( x->tv_nsec > y->tv_nsec )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	dd02      	ble.n	8006a8e <UTILS_TimespecCompare+0x82>
        {
            iStatus = 1;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e00b      	b.n	8006aa6 <UTILS_TimespecCompare+0x9a>
        }
        else if( x->tv_nsec < y->tv_nsec )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	da03      	bge.n	8006aa2 <UTILS_TimespecCompare+0x96>
        {
            iStatus = -1;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	e001      	b.n	8006aa6 <UTILS_TimespecCompare+0x9a>
        }
        else
        {
            iStatus = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
        }
    }

    return iStatus;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <UTILS_ValidateTimespec>:

/*-----------------------------------------------------------*/

bool UTILS_ValidateTimespec( const struct timespec * const pxTimespec )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
    bool xReturn = false;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]

    if( pxTimespec != NULL )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <UTILS_ValidateTimespec+0x28>
    {
        /* Verify 0 <= tv_nsec < 1000000000. */
        if( ( pxTimespec->tv_nsec >= 0 ) &&
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	db06      	blt.n	8006adc <UTILS_ValidateTimespec+0x28>
            ( pxTimespec->tv_nsec < NANOSECONDS_PER_SECOND ) )
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
        if( ( pxTimespec->tv_nsec >= 0 ) &&
 8006ad2:	4a06      	ldr	r2, [pc, #24]	; (8006aec <UTILS_ValidateTimespec+0x38>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	dc01      	bgt.n	8006adc <UTILS_ValidateTimespec+0x28>
        {
            xReturn = true;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
        }
    }

    return xReturn;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	3b9ac9ff 	.word	0x3b9ac9ff

08006af0 <findslot>:
 8006af0:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <findslot+0x2c>)
 8006af2:	b510      	push	{r4, lr}
 8006af4:	4604      	mov	r4, r0
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	b118      	cbz	r0, 8006b02 <findslot+0x12>
 8006afa:	6983      	ldr	r3, [r0, #24]
 8006afc:	b90b      	cbnz	r3, 8006b02 <findslot+0x12>
 8006afe:	f000 fbcb 	bl	8007298 <__sinit>
 8006b02:	2c13      	cmp	r4, #19
 8006b04:	d807      	bhi.n	8006b16 <findslot+0x26>
 8006b06:	4806      	ldr	r0, [pc, #24]	; (8006b20 <findslot+0x30>)
 8006b08:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006b0c:	3201      	adds	r2, #1
 8006b0e:	d002      	beq.n	8006b16 <findslot+0x26>
 8006b10:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006b14:	bd10      	pop	{r4, pc}
 8006b16:	2000      	movs	r0, #0
 8006b18:	e7fc      	b.n	8006b14 <findslot+0x24>
 8006b1a:	bf00      	nop
 8006b1c:	20000018 	.word	0x20000018
 8006b20:	20004bcc 	.word	0x20004bcc

08006b24 <error>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	4604      	mov	r4, r0
 8006b28:	f000 fa84 	bl	8007034 <__errno>
 8006b2c:	2613      	movs	r6, #19
 8006b2e:	4605      	mov	r5, r0
 8006b30:	2700      	movs	r7, #0
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	beab      	bkpt	0x00ab
 8006b38:	4606      	mov	r6, r0
 8006b3a:	602e      	str	r6, [r5, #0]
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b40 <checkerror>:
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d101      	bne.n	8006b48 <checkerror+0x8>
 8006b44:	f7ff bfee 	b.w	8006b24 <error>
 8006b48:	4770      	bx	lr

08006b4a <_swiread>:
 8006b4a:	b530      	push	{r4, r5, lr}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006b52:	9203      	str	r2, [sp, #12]
 8006b54:	2406      	movs	r4, #6
 8006b56:	ad01      	add	r5, sp, #4
 8006b58:	4620      	mov	r0, r4
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	beab      	bkpt	0x00ab
 8006b5e:	4604      	mov	r4, r0
 8006b60:	4620      	mov	r0, r4
 8006b62:	f7ff ffed 	bl	8006b40 <checkerror>
 8006b66:	b005      	add	sp, #20
 8006b68:	bd30      	pop	{r4, r5, pc}

08006b6a <_read>:
 8006b6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b6c:	4615      	mov	r5, r2
 8006b6e:	9101      	str	r1, [sp, #4]
 8006b70:	f7ff ffbe 	bl	8006af0 <findslot>
 8006b74:	9901      	ldr	r1, [sp, #4]
 8006b76:	4604      	mov	r4, r0
 8006b78:	b938      	cbnz	r0, 8006b8a <_read+0x20>
 8006b7a:	f000 fa5b 	bl	8007034 <__errno>
 8006b7e:	2309      	movs	r3, #9
 8006b80:	6003      	str	r3, [r0, #0]
 8006b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b86:	b003      	add	sp, #12
 8006b88:	bd30      	pop	{r4, r5, pc}
 8006b8a:	6800      	ldr	r0, [r0, #0]
 8006b8c:	462a      	mov	r2, r5
 8006b8e:	f7ff ffdc 	bl	8006b4a <_swiread>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	d0f7      	beq.n	8006b86 <_read+0x1c>
 8006b96:	6863      	ldr	r3, [r4, #4]
 8006b98:	1a2a      	subs	r2, r5, r0
 8006b9a:	4413      	add	r3, r2
 8006b9c:	6063      	str	r3, [r4, #4]
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	e7f1      	b.n	8006b86 <_read+0x1c>

08006ba2 <_swilseek>:
 8006ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	4616      	mov	r6, r2
 8006ba8:	f7ff ffa2 	bl	8006af0 <findslot>
 8006bac:	4605      	mov	r5, r0
 8006bae:	b940      	cbnz	r0, 8006bc2 <_swilseek+0x20>
 8006bb0:	f000 fa40 	bl	8007034 <__errno>
 8006bb4:	2309      	movs	r3, #9
 8006bb6:	6003      	str	r3, [r0, #0]
 8006bb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	b003      	add	sp, #12
 8006bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bc2:	2e02      	cmp	r6, #2
 8006bc4:	d903      	bls.n	8006bce <_swilseek+0x2c>
 8006bc6:	f000 fa35 	bl	8007034 <__errno>
 8006bca:	2316      	movs	r3, #22
 8006bcc:	e7f3      	b.n	8006bb6 <_swilseek+0x14>
 8006bce:	2e01      	cmp	r6, #1
 8006bd0:	d112      	bne.n	8006bf8 <_swilseek+0x56>
 8006bd2:	6843      	ldr	r3, [r0, #4]
 8006bd4:	18e4      	adds	r4, r4, r3
 8006bd6:	d4f6      	bmi.n	8006bc6 <_swilseek+0x24>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	260a      	movs	r6, #10
 8006bdc:	e9cd 3400 	strd	r3, r4, [sp]
 8006be0:	466f      	mov	r7, sp
 8006be2:	4630      	mov	r0, r6
 8006be4:	4639      	mov	r1, r7
 8006be6:	beab      	bkpt	0x00ab
 8006be8:	4606      	mov	r6, r0
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7ff ffa8 	bl	8006b40 <checkerror>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	dbe1      	blt.n	8006bb8 <_swilseek+0x16>
 8006bf4:	606c      	str	r4, [r5, #4]
 8006bf6:	e7e1      	b.n	8006bbc <_swilseek+0x1a>
 8006bf8:	2e02      	cmp	r6, #2
 8006bfa:	d1ed      	bne.n	8006bd8 <_swilseek+0x36>
 8006bfc:	6803      	ldr	r3, [r0, #0]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	260c      	movs	r6, #12
 8006c02:	466f      	mov	r7, sp
 8006c04:	4630      	mov	r0, r6
 8006c06:	4639      	mov	r1, r7
 8006c08:	beab      	bkpt	0x00ab
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f7ff ff97 	bl	8006b40 <checkerror>
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	d0d0      	beq.n	8006bb8 <_swilseek+0x16>
 8006c16:	4404      	add	r4, r0
 8006c18:	e7de      	b.n	8006bd8 <_swilseek+0x36>

08006c1a <_lseek>:
 8006c1a:	f7ff bfc2 	b.w	8006ba2 <_swilseek>

08006c1e <_swiwrite>:
 8006c1e:	b530      	push	{r4, r5, lr}
 8006c20:	b085      	sub	sp, #20
 8006c22:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006c26:	9203      	str	r2, [sp, #12]
 8006c28:	2405      	movs	r4, #5
 8006c2a:	ad01      	add	r5, sp, #4
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	4629      	mov	r1, r5
 8006c30:	beab      	bkpt	0x00ab
 8006c32:	4604      	mov	r4, r0
 8006c34:	4620      	mov	r0, r4
 8006c36:	f7ff ff83 	bl	8006b40 <checkerror>
 8006c3a:	b005      	add	sp, #20
 8006c3c:	bd30      	pop	{r4, r5, pc}

08006c3e <_write>:
 8006c3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c40:	4615      	mov	r5, r2
 8006c42:	9101      	str	r1, [sp, #4]
 8006c44:	f7ff ff54 	bl	8006af0 <findslot>
 8006c48:	9901      	ldr	r1, [sp, #4]
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	b930      	cbnz	r0, 8006c5c <_write+0x1e>
 8006c4e:	f000 f9f1 	bl	8007034 <__errno>
 8006c52:	2309      	movs	r3, #9
 8006c54:	6003      	str	r3, [r0, #0]
 8006c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c5a:	e012      	b.n	8006c82 <_write+0x44>
 8006c5c:	6800      	ldr	r0, [r0, #0]
 8006c5e:	462a      	mov	r2, r5
 8006c60:	f7ff ffdd 	bl	8006c1e <_swiwrite>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	dbf6      	blt.n	8006c56 <_write+0x18>
 8006c68:	6862      	ldr	r2, [r4, #4]
 8006c6a:	1a2b      	subs	r3, r5, r0
 8006c6c:	441a      	add	r2, r3
 8006c6e:	42a8      	cmp	r0, r5
 8006c70:	6062      	str	r2, [r4, #4]
 8006c72:	d105      	bne.n	8006c80 <_write+0x42>
 8006c74:	2000      	movs	r0, #0
 8006c76:	b003      	add	sp, #12
 8006c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c7c:	f7ff bf52 	b.w	8006b24 <error>
 8006c80:	4618      	mov	r0, r3
 8006c82:	b003      	add	sp, #12
 8006c84:	bd30      	pop	{r4, r5, pc}

08006c86 <_swiclose>:
 8006c86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c88:	2402      	movs	r4, #2
 8006c8a:	9001      	str	r0, [sp, #4]
 8006c8c:	ad01      	add	r5, sp, #4
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	beab      	bkpt	0x00ab
 8006c94:	4604      	mov	r4, r0
 8006c96:	4620      	mov	r0, r4
 8006c98:	f7ff ff52 	bl	8006b40 <checkerror>
 8006c9c:	b003      	add	sp, #12
 8006c9e:	bd30      	pop	{r4, r5, pc}

08006ca0 <_close>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	f7ff ff24 	bl	8006af0 <findslot>
 8006ca8:	4604      	mov	r4, r0
 8006caa:	b930      	cbnz	r0, 8006cba <_close+0x1a>
 8006cac:	f000 f9c2 	bl	8007034 <__errno>
 8006cb0:	2309      	movs	r3, #9
 8006cb2:	6003      	str	r3, [r0, #0]
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cb8:	bd38      	pop	{r3, r4, r5, pc}
 8006cba:	3d01      	subs	r5, #1
 8006cbc:	2d01      	cmp	r5, #1
 8006cbe:	d809      	bhi.n	8006cd4 <_close+0x34>
 8006cc0:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <_close+0x48>)
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d104      	bne.n	8006cd4 <_close+0x34>
 8006cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cce:	6003      	str	r3, [r0, #0]
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e7f1      	b.n	8006cb8 <_close+0x18>
 8006cd4:	6820      	ldr	r0, [r4, #0]
 8006cd6:	f7ff ffd6 	bl	8006c86 <_swiclose>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d1ec      	bne.n	8006cb8 <_close+0x18>
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ce2:	6023      	str	r3, [r4, #0]
 8006ce4:	e7e8      	b.n	8006cb8 <_close+0x18>
 8006ce6:	bf00      	nop
 8006ce8:	20004bcc 	.word	0x20004bcc

08006cec <_swistat>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	460c      	mov	r4, r1
 8006cf0:	f7ff fefe 	bl	8006af0 <findslot>
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	b930      	cbnz	r0, 8006d06 <_swistat+0x1a>
 8006cf8:	f000 f99c 	bl	8007034 <__errno>
 8006cfc:	2309      	movs	r3, #9
 8006cfe:	6003      	str	r3, [r0, #0]
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d12:	64a3      	str	r3, [r4, #72]	; 0x48
 8006d14:	260c      	movs	r6, #12
 8006d16:	4630      	mov	r0, r6
 8006d18:	4629      	mov	r1, r5
 8006d1a:	beab      	bkpt	0x00ab
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f7ff ff0e 	bl	8006b40 <checkerror>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	bf1c      	itt	ne
 8006d28:	6120      	strne	r0, [r4, #16]
 8006d2a:	2000      	movne	r0, #0
 8006d2c:	e7ea      	b.n	8006d04 <_swistat+0x18>

08006d2e <_fstat>:
 8006d2e:	460b      	mov	r3, r1
 8006d30:	b510      	push	{r4, lr}
 8006d32:	2100      	movs	r1, #0
 8006d34:	4604      	mov	r4, r0
 8006d36:	2258      	movs	r2, #88	; 0x58
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fb9c 	bl	8007476 <memset>
 8006d3e:	4601      	mov	r1, r0
 8006d40:	4620      	mov	r0, r4
 8006d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d46:	f7ff bfd1 	b.w	8006cec <_swistat>

08006d4a <_stat>:
 8006d4a:	b538      	push	{r3, r4, r5, lr}
 8006d4c:	460d      	mov	r5, r1
 8006d4e:	4604      	mov	r4, r0
 8006d50:	2258      	movs	r2, #88	; 0x58
 8006d52:	2100      	movs	r1, #0
 8006d54:	4628      	mov	r0, r5
 8006d56:	f000 fb8e 	bl	8007476 <memset>
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	f000 f811 	bl	8006d84 <_swiopen>
 8006d62:	1c43      	adds	r3, r0, #1
 8006d64:	4604      	mov	r4, r0
 8006d66:	d00b      	beq.n	8006d80 <_stat+0x36>
 8006d68:	686b      	ldr	r3, [r5, #4]
 8006d6a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d6e:	606b      	str	r3, [r5, #4]
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7ff ffbb 	bl	8006cec <_swistat>
 8006d76:	4605      	mov	r5, r0
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f7ff ff91 	bl	8006ca0 <_close>
 8006d7e:	462c      	mov	r4, r5
 8006d80:	4620      	mov	r0, r4
 8006d82:	bd38      	pop	{r3, r4, r5, pc}

08006d84 <_swiopen>:
 8006d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d88:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8006e34 <_swiopen+0xb0>
 8006d8c:	b097      	sub	sp, #92	; 0x5c
 8006d8e:	4607      	mov	r7, r0
 8006d90:	460e      	mov	r6, r1
 8006d92:	2500      	movs	r5, #0
 8006d94:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8006d98:	1c61      	adds	r1, r4, #1
 8006d9a:	d037      	beq.n	8006e0c <_swiopen+0x88>
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	2d14      	cmp	r5, #20
 8006da0:	d1f8      	bne.n	8006d94 <_swiopen+0x10>
 8006da2:	f000 f947 	bl	8007034 <__errno>
 8006da6:	2318      	movs	r3, #24
 8006da8:	6003      	str	r3, [r0, #0]
 8006daa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006dae:	e03d      	b.n	8006e2c <_swiopen+0xa8>
 8006db0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8006db4:	f240 6301 	movw	r3, #1537	; 0x601
 8006db8:	07b2      	lsls	r2, r6, #30
 8006dba:	bf48      	it	mi
 8006dbc:	f044 0402 	orrmi.w	r4, r4, #2
 8006dc0:	421e      	tst	r6, r3
 8006dc2:	bf18      	it	ne
 8006dc4:	f044 0404 	orrne.w	r4, r4, #4
 8006dc8:	0733      	lsls	r3, r6, #28
 8006dca:	bf48      	it	mi
 8006dcc:	f024 0404 	bicmi.w	r4, r4, #4
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	bf48      	it	mi
 8006dd4:	f044 0408 	orrmi.w	r4, r4, #8
 8006dd8:	9700      	str	r7, [sp, #0]
 8006dda:	f7f9 fa0b 	bl	80001f4 <strlen>
 8006dde:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8006de2:	2401      	movs	r4, #1
 8006de4:	4620      	mov	r0, r4
 8006de6:	4649      	mov	r1, r9
 8006de8:	beab      	bkpt	0x00ab
 8006dea:	4604      	mov	r4, r0
 8006dec:	2c00      	cmp	r4, #0
 8006dee:	db08      	blt.n	8006e02 <_swiopen+0x7e>
 8006df0:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8006df4:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f8c8 3004 	str.w	r3, [r8, #4]
 8006dfe:	462c      	mov	r4, r5
 8006e00:	e014      	b.n	8006e2c <_swiopen+0xa8>
 8006e02:	4620      	mov	r0, r4
 8006e04:	f7ff fe8e 	bl	8006b24 <error>
 8006e08:	4604      	mov	r4, r0
 8006e0a:	e00f      	b.n	8006e2c <_swiopen+0xa8>
 8006e0c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8006e10:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006e14:	46e9      	mov	r9, sp
 8006e16:	d1cb      	bne.n	8006db0 <_swiopen+0x2c>
 8006e18:	4649      	mov	r1, r9
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	f7ff ff95 	bl	8006d4a <_stat>
 8006e20:	3001      	adds	r0, #1
 8006e22:	d0c5      	beq.n	8006db0 <_swiopen+0x2c>
 8006e24:	f000 f906 	bl	8007034 <__errno>
 8006e28:	2311      	movs	r3, #17
 8006e2a:	6003      	str	r3, [r0, #0]
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	b017      	add	sp, #92	; 0x5c
 8006e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e34:	20004bcc 	.word	0x20004bcc

08006e38 <_get_semihosting_exts>:
 8006e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	460f      	mov	r7, r1
 8006e40:	482a      	ldr	r0, [pc, #168]	; (8006eec <_get_semihosting_exts+0xb4>)
 8006e42:	2100      	movs	r1, #0
 8006e44:	4615      	mov	r5, r2
 8006e46:	f7ff ff9d 	bl	8006d84 <_swiopen>
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	2100      	movs	r1, #0
 8006e50:	4630      	mov	r0, r6
 8006e52:	f000 fb10 	bl	8007476 <memset>
 8006e56:	1c63      	adds	r3, r4, #1
 8006e58:	d016      	beq.n	8006e88 <_get_semihosting_exts+0x50>
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7ff fe48 	bl	8006af0 <findslot>
 8006e60:	f04f 090c 	mov.w	r9, #12
 8006e64:	4680      	mov	r8, r0
 8006e66:	4648      	mov	r0, r9
 8006e68:	4641      	mov	r1, r8
 8006e6a:	beab      	bkpt	0x00ab
 8006e6c:	4680      	mov	r8, r0
 8006e6e:	4640      	mov	r0, r8
 8006e70:	f7ff fe66 	bl	8006b40 <checkerror>
 8006e74:	2803      	cmp	r0, #3
 8006e76:	dd02      	ble.n	8006e7e <_get_semihosting_exts+0x46>
 8006e78:	1ec3      	subs	r3, r0, #3
 8006e7a:	42ab      	cmp	r3, r5
 8006e7c:	dc08      	bgt.n	8006e90 <_get_semihosting_exts+0x58>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f7ff ff0e 	bl	8006ca0 <_close>
 8006e84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006e88:	4620      	mov	r0, r4
 8006e8a:	b003      	add	sp, #12
 8006e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e90:	2204      	movs	r2, #4
 8006e92:	eb0d 0102 	add.w	r1, sp, r2
 8006e96:	4620      	mov	r0, r4
 8006e98:	f7ff fe67 	bl	8006b6a <_read>
 8006e9c:	2803      	cmp	r0, #3
 8006e9e:	ddee      	ble.n	8006e7e <_get_semihosting_exts+0x46>
 8006ea0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006ea4:	2b53      	cmp	r3, #83	; 0x53
 8006ea6:	d1ea      	bne.n	8006e7e <_get_semihosting_exts+0x46>
 8006ea8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006eac:	2b48      	cmp	r3, #72	; 0x48
 8006eae:	d1e6      	bne.n	8006e7e <_get_semihosting_exts+0x46>
 8006eb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006eb4:	2b46      	cmp	r3, #70	; 0x46
 8006eb6:	d1e2      	bne.n	8006e7e <_get_semihosting_exts+0x46>
 8006eb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006ebc:	2b42      	cmp	r3, #66	; 0x42
 8006ebe:	d1de      	bne.n	8006e7e <_get_semihosting_exts+0x46>
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f7ff fe6c 	bl	8006ba2 <_swilseek>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	dbd7      	blt.n	8006e7e <_get_semihosting_exts+0x46>
 8006ece:	462a      	mov	r2, r5
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f7ff fe49 	bl	8006b6a <_read>
 8006ed8:	4605      	mov	r5, r0
 8006eda:	4620      	mov	r0, r4
 8006edc:	f7ff fee0 	bl	8006ca0 <_close>
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f7ff fe2d 	bl	8006b40 <checkerror>
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	e7ce      	b.n	8006e88 <_get_semihosting_exts+0x50>
 8006eea:	bf00      	nop
 8006eec:	0800953c 	.word	0x0800953c

08006ef0 <initialise_semihosting_exts>:
 8006ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ef2:	4d0a      	ldr	r5, [pc, #40]	; (8006f1c <initialise_semihosting_exts+0x2c>)
 8006ef4:	4c0a      	ldr	r4, [pc, #40]	; (8006f20 <initialise_semihosting_exts+0x30>)
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	2201      	movs	r2, #1
 8006efa:	a801      	add	r0, sp, #4
 8006efc:	6029      	str	r1, [r5, #0]
 8006efe:	6022      	str	r2, [r4, #0]
 8006f00:	f7ff ff9a 	bl	8006e38 <_get_semihosting_exts>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	dd07      	ble.n	8006f18 <initialise_semihosting_exts+0x28>
 8006f08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f0c:	f003 0201 	and.w	r2, r3, #1
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	602a      	str	r2, [r5, #0]
 8006f16:	6023      	str	r3, [r4, #0]
 8006f18:	b003      	add	sp, #12
 8006f1a:	bd30      	pop	{r4, r5, pc}
 8006f1c:	20000010 	.word	0x20000010
 8006f20:	20000014 	.word	0x20000014

08006f24 <_has_ext_stdout_stderr>:
 8006f24:	b510      	push	{r4, lr}
 8006f26:	4c04      	ldr	r4, [pc, #16]	; (8006f38 <_has_ext_stdout_stderr+0x14>)
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	da01      	bge.n	8006f32 <_has_ext_stdout_stderr+0xe>
 8006f2e:	f7ff ffdf 	bl	8006ef0 <initialise_semihosting_exts>
 8006f32:	6820      	ldr	r0, [r4, #0]
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	bf00      	nop
 8006f38:	20000014 	.word	0x20000014

08006f3c <initialise_monitor_handles>:
 8006f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f40:	b085      	sub	sp, #20
 8006f42:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8006ff4 <initialise_monitor_handles+0xb8>
 8006f46:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	2400      	movs	r4, #0
 8006f4e:	9303      	str	r3, [sp, #12]
 8006f50:	af01      	add	r7, sp, #4
 8006f52:	9402      	str	r4, [sp, #8]
 8006f54:	2501      	movs	r5, #1
 8006f56:	4628      	mov	r0, r5
 8006f58:	4639      	mov	r1, r7
 8006f5a:	beab      	bkpt	0x00ab
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006ff8 <initialise_monitor_handles+0xbc>
 8006f62:	4623      	mov	r3, r4
 8006f64:	4c20      	ldr	r4, [pc, #128]	; (8006fe8 <initialise_monitor_handles+0xac>)
 8006f66:	f8c8 5000 	str.w	r5, [r8]
 8006f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f6e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006f72:	3301      	adds	r3, #1
 8006f74:	2b14      	cmp	r3, #20
 8006f76:	d1fa      	bne.n	8006f6e <initialise_monitor_handles+0x32>
 8006f78:	f7ff ffd4 	bl	8006f24 <_has_ext_stdout_stderr>
 8006f7c:	4d1b      	ldr	r5, [pc, #108]	; (8006fec <initialise_monitor_handles+0xb0>)
 8006f7e:	b1d0      	cbz	r0, 8006fb6 <initialise_monitor_handles+0x7a>
 8006f80:	f04f 0a03 	mov.w	sl, #3
 8006f84:	2304      	movs	r3, #4
 8006f86:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f8a:	2601      	movs	r6, #1
 8006f8c:	f8cd a00c 	str.w	sl, [sp, #12]
 8006f90:	9302      	str	r3, [sp, #8]
 8006f92:	4630      	mov	r0, r6
 8006f94:	4639      	mov	r1, r7
 8006f96:	beab      	bkpt	0x00ab
 8006f98:	4683      	mov	fp, r0
 8006f9a:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <initialise_monitor_handles+0xb4>)
 8006f9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fa0:	f8c3 b000 	str.w	fp, [r3]
 8006fa4:	2308      	movs	r3, #8
 8006fa6:	f8cd a00c 	str.w	sl, [sp, #12]
 8006faa:	9302      	str	r3, [sp, #8]
 8006fac:	4630      	mov	r0, r6
 8006fae:	4639      	mov	r1, r7
 8006fb0:	beab      	bkpt	0x00ab
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	602e      	str	r6, [r5, #0]
 8006fb6:	682b      	ldr	r3, [r5, #0]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	bf02      	ittt	eq
 8006fbc:	4b0c      	ldreq	r3, [pc, #48]	; (8006ff0 <initialise_monitor_handles+0xb4>)
 8006fbe:	681b      	ldreq	r3, [r3, #0]
 8006fc0:	602b      	streq	r3, [r5, #0]
 8006fc2:	2600      	movs	r6, #0
 8006fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	6066      	str	r6, [r4, #4]
 8006fcc:	f7ff ffaa 	bl	8006f24 <_has_ext_stdout_stderr>
 8006fd0:	b130      	cbz	r0, 8006fe0 <initialise_monitor_handles+0xa4>
 8006fd2:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <initialise_monitor_handles+0xb4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006fda:	682b      	ldr	r3, [r5, #0]
 8006fdc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006fe0:	b005      	add	sp, #20
 8006fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20004bcc 	.word	0x20004bcc
 8006fec:	20004bc0 	.word	0x20004bc0
 8006ff0:	20004bc8 	.word	0x20004bc8
 8006ff4:	08009552 	.word	0x08009552
 8006ff8:	20004bc4 	.word	0x20004bc4

08006ffc <_isatty>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	f7ff fd77 	bl	8006af0 <findslot>
 8007002:	2509      	movs	r5, #9
 8007004:	4604      	mov	r4, r0
 8007006:	b920      	cbnz	r0, 8007012 <_isatty+0x16>
 8007008:	f000 f814 	bl	8007034 <__errno>
 800700c:	6005      	str	r5, [r0, #0]
 800700e:	4620      	mov	r0, r4
 8007010:	bd70      	pop	{r4, r5, r6, pc}
 8007012:	4628      	mov	r0, r5
 8007014:	4621      	mov	r1, r4
 8007016:	beab      	bkpt	0x00ab
 8007018:	4604      	mov	r4, r0
 800701a:	2c01      	cmp	r4, #1
 800701c:	d0f7      	beq.n	800700e <_isatty+0x12>
 800701e:	f000 f809 	bl	8007034 <__errno>
 8007022:	2400      	movs	r4, #0
 8007024:	4605      	mov	r5, r0
 8007026:	2613      	movs	r6, #19
 8007028:	4630      	mov	r0, r6
 800702a:	4621      	mov	r1, r4
 800702c:	beab      	bkpt	0x00ab
 800702e:	4606      	mov	r6, r0
 8007030:	602e      	str	r6, [r5, #0]
 8007032:	e7ec      	b.n	800700e <_isatty+0x12>

08007034 <__errno>:
 8007034:	4b01      	ldr	r3, [pc, #4]	; (800703c <__errno+0x8>)
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20000018 	.word	0x20000018

08007040 <__sflush_r>:
 8007040:	898a      	ldrh	r2, [r1, #12]
 8007042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007046:	4605      	mov	r5, r0
 8007048:	0710      	lsls	r0, r2, #28
 800704a:	460c      	mov	r4, r1
 800704c:	d458      	bmi.n	8007100 <__sflush_r+0xc0>
 800704e:	684b      	ldr	r3, [r1, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	dc05      	bgt.n	8007060 <__sflush_r+0x20>
 8007054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	dc02      	bgt.n	8007060 <__sflush_r+0x20>
 800705a:	2000      	movs	r0, #0
 800705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007062:	2e00      	cmp	r6, #0
 8007064:	d0f9      	beq.n	800705a <__sflush_r+0x1a>
 8007066:	2300      	movs	r3, #0
 8007068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800706c:	682f      	ldr	r7, [r5, #0]
 800706e:	602b      	str	r3, [r5, #0]
 8007070:	d032      	beq.n	80070d8 <__sflush_r+0x98>
 8007072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	075a      	lsls	r2, r3, #29
 8007078:	d505      	bpl.n	8007086 <__sflush_r+0x46>
 800707a:	6863      	ldr	r3, [r4, #4]
 800707c:	1ac0      	subs	r0, r0, r3
 800707e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007080:	b10b      	cbz	r3, 8007086 <__sflush_r+0x46>
 8007082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007084:	1ac0      	subs	r0, r0, r3
 8007086:	2300      	movs	r3, #0
 8007088:	4602      	mov	r2, r0
 800708a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800708c:	6a21      	ldr	r1, [r4, #32]
 800708e:	4628      	mov	r0, r5
 8007090:	47b0      	blx	r6
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	d106      	bne.n	80070a6 <__sflush_r+0x66>
 8007098:	6829      	ldr	r1, [r5, #0]
 800709a:	291d      	cmp	r1, #29
 800709c:	d82c      	bhi.n	80070f8 <__sflush_r+0xb8>
 800709e:	4a2a      	ldr	r2, [pc, #168]	; (8007148 <__sflush_r+0x108>)
 80070a0:	40ca      	lsrs	r2, r1
 80070a2:	07d6      	lsls	r6, r2, #31
 80070a4:	d528      	bpl.n	80070f8 <__sflush_r+0xb8>
 80070a6:	2200      	movs	r2, #0
 80070a8:	6062      	str	r2, [r4, #4]
 80070aa:	04d9      	lsls	r1, r3, #19
 80070ac:	6922      	ldr	r2, [r4, #16]
 80070ae:	6022      	str	r2, [r4, #0]
 80070b0:	d504      	bpl.n	80070bc <__sflush_r+0x7c>
 80070b2:	1c42      	adds	r2, r0, #1
 80070b4:	d101      	bne.n	80070ba <__sflush_r+0x7a>
 80070b6:	682b      	ldr	r3, [r5, #0]
 80070b8:	b903      	cbnz	r3, 80070bc <__sflush_r+0x7c>
 80070ba:	6560      	str	r0, [r4, #84]	; 0x54
 80070bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070be:	602f      	str	r7, [r5, #0]
 80070c0:	2900      	cmp	r1, #0
 80070c2:	d0ca      	beq.n	800705a <__sflush_r+0x1a>
 80070c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070c8:	4299      	cmp	r1, r3
 80070ca:	d002      	beq.n	80070d2 <__sflush_r+0x92>
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 f9db 	bl	8007488 <_free_r>
 80070d2:	2000      	movs	r0, #0
 80070d4:	6360      	str	r0, [r4, #52]	; 0x34
 80070d6:	e7c1      	b.n	800705c <__sflush_r+0x1c>
 80070d8:	6a21      	ldr	r1, [r4, #32]
 80070da:	2301      	movs	r3, #1
 80070dc:	4628      	mov	r0, r5
 80070de:	47b0      	blx	r6
 80070e0:	1c41      	adds	r1, r0, #1
 80070e2:	d1c7      	bne.n	8007074 <__sflush_r+0x34>
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0c4      	beq.n	8007074 <__sflush_r+0x34>
 80070ea:	2b1d      	cmp	r3, #29
 80070ec:	d001      	beq.n	80070f2 <__sflush_r+0xb2>
 80070ee:	2b16      	cmp	r3, #22
 80070f0:	d101      	bne.n	80070f6 <__sflush_r+0xb6>
 80070f2:	602f      	str	r7, [r5, #0]
 80070f4:	e7b1      	b.n	800705a <__sflush_r+0x1a>
 80070f6:	89a3      	ldrh	r3, [r4, #12]
 80070f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070fc:	81a3      	strh	r3, [r4, #12]
 80070fe:	e7ad      	b.n	800705c <__sflush_r+0x1c>
 8007100:	690f      	ldr	r7, [r1, #16]
 8007102:	2f00      	cmp	r7, #0
 8007104:	d0a9      	beq.n	800705a <__sflush_r+0x1a>
 8007106:	0793      	lsls	r3, r2, #30
 8007108:	680e      	ldr	r6, [r1, #0]
 800710a:	bf08      	it	eq
 800710c:	694b      	ldreq	r3, [r1, #20]
 800710e:	600f      	str	r7, [r1, #0]
 8007110:	bf18      	it	ne
 8007112:	2300      	movne	r3, #0
 8007114:	eba6 0807 	sub.w	r8, r6, r7
 8007118:	608b      	str	r3, [r1, #8]
 800711a:	f1b8 0f00 	cmp.w	r8, #0
 800711e:	dd9c      	ble.n	800705a <__sflush_r+0x1a>
 8007120:	6a21      	ldr	r1, [r4, #32]
 8007122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007124:	4643      	mov	r3, r8
 8007126:	463a      	mov	r2, r7
 8007128:	4628      	mov	r0, r5
 800712a:	47b0      	blx	r6
 800712c:	2800      	cmp	r0, #0
 800712e:	dc06      	bgt.n	800713e <__sflush_r+0xfe>
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007136:	81a3      	strh	r3, [r4, #12]
 8007138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800713c:	e78e      	b.n	800705c <__sflush_r+0x1c>
 800713e:	4407      	add	r7, r0
 8007140:	eba8 0800 	sub.w	r8, r8, r0
 8007144:	e7e9      	b.n	800711a <__sflush_r+0xda>
 8007146:	bf00      	nop
 8007148:	20400001 	.word	0x20400001

0800714c <_fflush_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	690b      	ldr	r3, [r1, #16]
 8007150:	4605      	mov	r5, r0
 8007152:	460c      	mov	r4, r1
 8007154:	b913      	cbnz	r3, 800715c <_fflush_r+0x10>
 8007156:	2500      	movs	r5, #0
 8007158:	4628      	mov	r0, r5
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	b118      	cbz	r0, 8007166 <_fflush_r+0x1a>
 800715e:	6983      	ldr	r3, [r0, #24]
 8007160:	b90b      	cbnz	r3, 8007166 <_fflush_r+0x1a>
 8007162:	f000 f899 	bl	8007298 <__sinit>
 8007166:	4b14      	ldr	r3, [pc, #80]	; (80071b8 <_fflush_r+0x6c>)
 8007168:	429c      	cmp	r4, r3
 800716a:	d11b      	bne.n	80071a4 <_fflush_r+0x58>
 800716c:	686c      	ldr	r4, [r5, #4]
 800716e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0ef      	beq.n	8007156 <_fflush_r+0xa>
 8007176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007178:	07d0      	lsls	r0, r2, #31
 800717a:	d404      	bmi.n	8007186 <_fflush_r+0x3a>
 800717c:	0599      	lsls	r1, r3, #22
 800717e:	d402      	bmi.n	8007186 <_fflush_r+0x3a>
 8007180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007182:	f000 f968 	bl	8007456 <__retarget_lock_acquire_recursive>
 8007186:	4628      	mov	r0, r5
 8007188:	4621      	mov	r1, r4
 800718a:	f7ff ff59 	bl	8007040 <__sflush_r>
 800718e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007190:	07da      	lsls	r2, r3, #31
 8007192:	4605      	mov	r5, r0
 8007194:	d4e0      	bmi.n	8007158 <_fflush_r+0xc>
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	059b      	lsls	r3, r3, #22
 800719a:	d4dd      	bmi.n	8007158 <_fflush_r+0xc>
 800719c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800719e:	f000 f95b 	bl	8007458 <__retarget_lock_release_recursive>
 80071a2:	e7d9      	b.n	8007158 <_fflush_r+0xc>
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <_fflush_r+0x70>)
 80071a6:	429c      	cmp	r4, r3
 80071a8:	d101      	bne.n	80071ae <_fflush_r+0x62>
 80071aa:	68ac      	ldr	r4, [r5, #8]
 80071ac:	e7df      	b.n	800716e <_fflush_r+0x22>
 80071ae:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <_fflush_r+0x74>)
 80071b0:	429c      	cmp	r4, r3
 80071b2:	bf08      	it	eq
 80071b4:	68ec      	ldreq	r4, [r5, #12]
 80071b6:	e7da      	b.n	800716e <_fflush_r+0x22>
 80071b8:	08009578 	.word	0x08009578
 80071bc:	08009598 	.word	0x08009598
 80071c0:	08009558 	.word	0x08009558

080071c4 <fflush>:
 80071c4:	4601      	mov	r1, r0
 80071c6:	b920      	cbnz	r0, 80071d2 <fflush+0xe>
 80071c8:	4b04      	ldr	r3, [pc, #16]	; (80071dc <fflush+0x18>)
 80071ca:	4905      	ldr	r1, [pc, #20]	; (80071e0 <fflush+0x1c>)
 80071cc:	6818      	ldr	r0, [r3, #0]
 80071ce:	f000 b8fe 	b.w	80073ce <_fwalk_reent>
 80071d2:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <fflush+0x20>)
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	f7ff bfb9 	b.w	800714c <_fflush_r>
 80071da:	bf00      	nop
 80071dc:	080095b8 	.word	0x080095b8
 80071e0:	0800714d 	.word	0x0800714d
 80071e4:	20000018 	.word	0x20000018

080071e8 <std>:
 80071e8:	2300      	movs	r3, #0
 80071ea:	b510      	push	{r4, lr}
 80071ec:	4604      	mov	r4, r0
 80071ee:	e9c0 3300 	strd	r3, r3, [r0]
 80071f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071f6:	6083      	str	r3, [r0, #8]
 80071f8:	8181      	strh	r1, [r0, #12]
 80071fa:	6643      	str	r3, [r0, #100]	; 0x64
 80071fc:	81c2      	strh	r2, [r0, #14]
 80071fe:	6183      	str	r3, [r0, #24]
 8007200:	4619      	mov	r1, r3
 8007202:	2208      	movs	r2, #8
 8007204:	305c      	adds	r0, #92	; 0x5c
 8007206:	f000 f936 	bl	8007476 <memset>
 800720a:	4b05      	ldr	r3, [pc, #20]	; (8007220 <std+0x38>)
 800720c:	6263      	str	r3, [r4, #36]	; 0x24
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <std+0x3c>)
 8007210:	62a3      	str	r3, [r4, #40]	; 0x28
 8007212:	4b05      	ldr	r3, [pc, #20]	; (8007228 <std+0x40>)
 8007214:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <std+0x44>)
 8007218:	6224      	str	r4, [r4, #32]
 800721a:	6323      	str	r3, [r4, #48]	; 0x30
 800721c:	bd10      	pop	{r4, pc}
 800721e:	bf00      	nop
 8007220:	0800790d 	.word	0x0800790d
 8007224:	0800792f 	.word	0x0800792f
 8007228:	08007967 	.word	0x08007967
 800722c:	0800798b 	.word	0x0800798b

08007230 <_cleanup_r>:
 8007230:	4901      	ldr	r1, [pc, #4]	; (8007238 <_cleanup_r+0x8>)
 8007232:	f000 b8cc 	b.w	80073ce <_fwalk_reent>
 8007236:	bf00      	nop
 8007238:	0800714d 	.word	0x0800714d

0800723c <__sfmoreglue>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	2268      	movs	r2, #104	; 0x68
 8007240:	1e4d      	subs	r5, r1, #1
 8007242:	4355      	muls	r5, r2
 8007244:	460e      	mov	r6, r1
 8007246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800724a:	f000 f989 	bl	8007560 <_malloc_r>
 800724e:	4604      	mov	r4, r0
 8007250:	b140      	cbz	r0, 8007264 <__sfmoreglue+0x28>
 8007252:	2100      	movs	r1, #0
 8007254:	e9c0 1600 	strd	r1, r6, [r0]
 8007258:	300c      	adds	r0, #12
 800725a:	60a0      	str	r0, [r4, #8]
 800725c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007260:	f000 f909 	bl	8007476 <memset>
 8007264:	4620      	mov	r0, r4
 8007266:	bd70      	pop	{r4, r5, r6, pc}

08007268 <__sfp_lock_acquire>:
 8007268:	4801      	ldr	r0, [pc, #4]	; (8007270 <__sfp_lock_acquire+0x8>)
 800726a:	f000 b8f4 	b.w	8007456 <__retarget_lock_acquire_recursive>
 800726e:	bf00      	nop
 8007270:	20004c6d 	.word	0x20004c6d

08007274 <__sfp_lock_release>:
 8007274:	4801      	ldr	r0, [pc, #4]	; (800727c <__sfp_lock_release+0x8>)
 8007276:	f000 b8ef 	b.w	8007458 <__retarget_lock_release_recursive>
 800727a:	bf00      	nop
 800727c:	20004c6d 	.word	0x20004c6d

08007280 <__sinit_lock_acquire>:
 8007280:	4801      	ldr	r0, [pc, #4]	; (8007288 <__sinit_lock_acquire+0x8>)
 8007282:	f000 b8e8 	b.w	8007456 <__retarget_lock_acquire_recursive>
 8007286:	bf00      	nop
 8007288:	20004c6e 	.word	0x20004c6e

0800728c <__sinit_lock_release>:
 800728c:	4801      	ldr	r0, [pc, #4]	; (8007294 <__sinit_lock_release+0x8>)
 800728e:	f000 b8e3 	b.w	8007458 <__retarget_lock_release_recursive>
 8007292:	bf00      	nop
 8007294:	20004c6e 	.word	0x20004c6e

08007298 <__sinit>:
 8007298:	b510      	push	{r4, lr}
 800729a:	4604      	mov	r4, r0
 800729c:	f7ff fff0 	bl	8007280 <__sinit_lock_acquire>
 80072a0:	69a3      	ldr	r3, [r4, #24]
 80072a2:	b11b      	cbz	r3, 80072ac <__sinit+0x14>
 80072a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a8:	f7ff bff0 	b.w	800728c <__sinit_lock_release>
 80072ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072b0:	6523      	str	r3, [r4, #80]	; 0x50
 80072b2:	4b13      	ldr	r3, [pc, #76]	; (8007300 <__sinit+0x68>)
 80072b4:	4a13      	ldr	r2, [pc, #76]	; (8007304 <__sinit+0x6c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80072ba:	42a3      	cmp	r3, r4
 80072bc:	bf04      	itt	eq
 80072be:	2301      	moveq	r3, #1
 80072c0:	61a3      	streq	r3, [r4, #24]
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 f820 	bl	8007308 <__sfp>
 80072c8:	6060      	str	r0, [r4, #4]
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 f81c 	bl	8007308 <__sfp>
 80072d0:	60a0      	str	r0, [r4, #8]
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 f818 	bl	8007308 <__sfp>
 80072d8:	2200      	movs	r2, #0
 80072da:	60e0      	str	r0, [r4, #12]
 80072dc:	2104      	movs	r1, #4
 80072de:	6860      	ldr	r0, [r4, #4]
 80072e0:	f7ff ff82 	bl	80071e8 <std>
 80072e4:	68a0      	ldr	r0, [r4, #8]
 80072e6:	2201      	movs	r2, #1
 80072e8:	2109      	movs	r1, #9
 80072ea:	f7ff ff7d 	bl	80071e8 <std>
 80072ee:	68e0      	ldr	r0, [r4, #12]
 80072f0:	2202      	movs	r2, #2
 80072f2:	2112      	movs	r1, #18
 80072f4:	f7ff ff78 	bl	80071e8 <std>
 80072f8:	2301      	movs	r3, #1
 80072fa:	61a3      	str	r3, [r4, #24]
 80072fc:	e7d2      	b.n	80072a4 <__sinit+0xc>
 80072fe:	bf00      	nop
 8007300:	080095b8 	.word	0x080095b8
 8007304:	08007231 	.word	0x08007231

08007308 <__sfp>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	4607      	mov	r7, r0
 800730c:	f7ff ffac 	bl	8007268 <__sfp_lock_acquire>
 8007310:	4b1e      	ldr	r3, [pc, #120]	; (800738c <__sfp+0x84>)
 8007312:	681e      	ldr	r6, [r3, #0]
 8007314:	69b3      	ldr	r3, [r6, #24]
 8007316:	b913      	cbnz	r3, 800731e <__sfp+0x16>
 8007318:	4630      	mov	r0, r6
 800731a:	f7ff ffbd 	bl	8007298 <__sinit>
 800731e:	3648      	adds	r6, #72	; 0x48
 8007320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007324:	3b01      	subs	r3, #1
 8007326:	d503      	bpl.n	8007330 <__sfp+0x28>
 8007328:	6833      	ldr	r3, [r6, #0]
 800732a:	b30b      	cbz	r3, 8007370 <__sfp+0x68>
 800732c:	6836      	ldr	r6, [r6, #0]
 800732e:	e7f7      	b.n	8007320 <__sfp+0x18>
 8007330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007334:	b9d5      	cbnz	r5, 800736c <__sfp+0x64>
 8007336:	4b16      	ldr	r3, [pc, #88]	; (8007390 <__sfp+0x88>)
 8007338:	60e3      	str	r3, [r4, #12]
 800733a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800733e:	6665      	str	r5, [r4, #100]	; 0x64
 8007340:	f000 f888 	bl	8007454 <__retarget_lock_init_recursive>
 8007344:	f7ff ff96 	bl	8007274 <__sfp_lock_release>
 8007348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800734c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007350:	6025      	str	r5, [r4, #0]
 8007352:	61a5      	str	r5, [r4, #24]
 8007354:	2208      	movs	r2, #8
 8007356:	4629      	mov	r1, r5
 8007358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800735c:	f000 f88b 	bl	8007476 <memset>
 8007360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007368:	4620      	mov	r0, r4
 800736a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800736c:	3468      	adds	r4, #104	; 0x68
 800736e:	e7d9      	b.n	8007324 <__sfp+0x1c>
 8007370:	2104      	movs	r1, #4
 8007372:	4638      	mov	r0, r7
 8007374:	f7ff ff62 	bl	800723c <__sfmoreglue>
 8007378:	4604      	mov	r4, r0
 800737a:	6030      	str	r0, [r6, #0]
 800737c:	2800      	cmp	r0, #0
 800737e:	d1d5      	bne.n	800732c <__sfp+0x24>
 8007380:	f7ff ff78 	bl	8007274 <__sfp_lock_release>
 8007384:	230c      	movs	r3, #12
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	e7ee      	b.n	8007368 <__sfp+0x60>
 800738a:	bf00      	nop
 800738c:	080095b8 	.word	0x080095b8
 8007390:	ffff0001 	.word	0xffff0001

08007394 <_fwalk>:
 8007394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007398:	460f      	mov	r7, r1
 800739a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800739e:	2600      	movs	r6, #0
 80073a0:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80073a4:	f1b8 0801 	subs.w	r8, r8, #1
 80073a8:	d505      	bpl.n	80073b6 <_fwalk+0x22>
 80073aa:	6824      	ldr	r4, [r4, #0]
 80073ac:	2c00      	cmp	r4, #0
 80073ae:	d1f7      	bne.n	80073a0 <_fwalk+0xc>
 80073b0:	4630      	mov	r0, r6
 80073b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d906      	bls.n	80073ca <_fwalk+0x36>
 80073bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073c0:	3301      	adds	r3, #1
 80073c2:	d002      	beq.n	80073ca <_fwalk+0x36>
 80073c4:	4628      	mov	r0, r5
 80073c6:	47b8      	blx	r7
 80073c8:	4306      	orrs	r6, r0
 80073ca:	3568      	adds	r5, #104	; 0x68
 80073cc:	e7ea      	b.n	80073a4 <_fwalk+0x10>

080073ce <_fwalk_reent>:
 80073ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d2:	4606      	mov	r6, r0
 80073d4:	4688      	mov	r8, r1
 80073d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073da:	2700      	movs	r7, #0
 80073dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073e0:	f1b9 0901 	subs.w	r9, r9, #1
 80073e4:	d505      	bpl.n	80073f2 <_fwalk_reent+0x24>
 80073e6:	6824      	ldr	r4, [r4, #0]
 80073e8:	2c00      	cmp	r4, #0
 80073ea:	d1f7      	bne.n	80073dc <_fwalk_reent+0xe>
 80073ec:	4638      	mov	r0, r7
 80073ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f2:	89ab      	ldrh	r3, [r5, #12]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d907      	bls.n	8007408 <_fwalk_reent+0x3a>
 80073f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073fc:	3301      	adds	r3, #1
 80073fe:	d003      	beq.n	8007408 <_fwalk_reent+0x3a>
 8007400:	4629      	mov	r1, r5
 8007402:	4630      	mov	r0, r6
 8007404:	47c0      	blx	r8
 8007406:	4307      	orrs	r7, r0
 8007408:	3568      	adds	r5, #104	; 0x68
 800740a:	e7e9      	b.n	80073e0 <_fwalk_reent+0x12>

0800740c <__libc_init_array>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	4d0d      	ldr	r5, [pc, #52]	; (8007444 <__libc_init_array+0x38>)
 8007410:	4c0d      	ldr	r4, [pc, #52]	; (8007448 <__libc_init_array+0x3c>)
 8007412:	1b64      	subs	r4, r4, r5
 8007414:	10a4      	asrs	r4, r4, #2
 8007416:	2600      	movs	r6, #0
 8007418:	42a6      	cmp	r6, r4
 800741a:	d109      	bne.n	8007430 <__libc_init_array+0x24>
 800741c:	4d0b      	ldr	r5, [pc, #44]	; (800744c <__libc_init_array+0x40>)
 800741e:	4c0c      	ldr	r4, [pc, #48]	; (8007450 <__libc_init_array+0x44>)
 8007420:	f001 ffba 	bl	8009398 <_init>
 8007424:	1b64      	subs	r4, r4, r5
 8007426:	10a4      	asrs	r4, r4, #2
 8007428:	2600      	movs	r6, #0
 800742a:	42a6      	cmp	r6, r4
 800742c:	d105      	bne.n	800743a <__libc_init_array+0x2e>
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	f855 3b04 	ldr.w	r3, [r5], #4
 8007434:	4798      	blx	r3
 8007436:	3601      	adds	r6, #1
 8007438:	e7ee      	b.n	8007418 <__libc_init_array+0xc>
 800743a:	f855 3b04 	ldr.w	r3, [r5], #4
 800743e:	4798      	blx	r3
 8007440:	3601      	adds	r6, #1
 8007442:	e7f2      	b.n	800742a <__libc_init_array+0x1e>
 8007444:	08009db0 	.word	0x08009db0
 8007448:	08009db0 	.word	0x08009db0
 800744c:	08009db0 	.word	0x08009db0
 8007450:	08009db4 	.word	0x08009db4

08007454 <__retarget_lock_init_recursive>:
 8007454:	4770      	bx	lr

08007456 <__retarget_lock_acquire_recursive>:
 8007456:	4770      	bx	lr

08007458 <__retarget_lock_release_recursive>:
 8007458:	4770      	bx	lr

0800745a <memcpy>:
 800745a:	440a      	add	r2, r1
 800745c:	4291      	cmp	r1, r2
 800745e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007462:	d100      	bne.n	8007466 <memcpy+0xc>
 8007464:	4770      	bx	lr
 8007466:	b510      	push	{r4, lr}
 8007468:	f811 4b01 	ldrb.w	r4, [r1], #1
 800746c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007470:	4291      	cmp	r1, r2
 8007472:	d1f9      	bne.n	8007468 <memcpy+0xe>
 8007474:	bd10      	pop	{r4, pc}

08007476 <memset>:
 8007476:	4402      	add	r2, r0
 8007478:	4603      	mov	r3, r0
 800747a:	4293      	cmp	r3, r2
 800747c:	d100      	bne.n	8007480 <memset+0xa>
 800747e:	4770      	bx	lr
 8007480:	f803 1b01 	strb.w	r1, [r3], #1
 8007484:	e7f9      	b.n	800747a <memset+0x4>
	...

08007488 <_free_r>:
 8007488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800748a:	2900      	cmp	r1, #0
 800748c:	d044      	beq.n	8007518 <_free_r+0x90>
 800748e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007492:	9001      	str	r0, [sp, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	f1a1 0404 	sub.w	r4, r1, #4
 800749a:	bfb8      	it	lt
 800749c:	18e4      	addlt	r4, r4, r3
 800749e:	f000 fcf1 	bl	8007e84 <__malloc_lock>
 80074a2:	4a1e      	ldr	r2, [pc, #120]	; (800751c <_free_r+0x94>)
 80074a4:	9801      	ldr	r0, [sp, #4]
 80074a6:	6813      	ldr	r3, [r2, #0]
 80074a8:	b933      	cbnz	r3, 80074b8 <_free_r+0x30>
 80074aa:	6063      	str	r3, [r4, #4]
 80074ac:	6014      	str	r4, [r2, #0]
 80074ae:	b003      	add	sp, #12
 80074b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074b4:	f000 bcec 	b.w	8007e90 <__malloc_unlock>
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d908      	bls.n	80074ce <_free_r+0x46>
 80074bc:	6825      	ldr	r5, [r4, #0]
 80074be:	1961      	adds	r1, r4, r5
 80074c0:	428b      	cmp	r3, r1
 80074c2:	bf01      	itttt	eq
 80074c4:	6819      	ldreq	r1, [r3, #0]
 80074c6:	685b      	ldreq	r3, [r3, #4]
 80074c8:	1949      	addeq	r1, r1, r5
 80074ca:	6021      	streq	r1, [r4, #0]
 80074cc:	e7ed      	b.n	80074aa <_free_r+0x22>
 80074ce:	461a      	mov	r2, r3
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	b10b      	cbz	r3, 80074d8 <_free_r+0x50>
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	d9fa      	bls.n	80074ce <_free_r+0x46>
 80074d8:	6811      	ldr	r1, [r2, #0]
 80074da:	1855      	adds	r5, r2, r1
 80074dc:	42a5      	cmp	r5, r4
 80074de:	d10b      	bne.n	80074f8 <_free_r+0x70>
 80074e0:	6824      	ldr	r4, [r4, #0]
 80074e2:	4421      	add	r1, r4
 80074e4:	1854      	adds	r4, r2, r1
 80074e6:	42a3      	cmp	r3, r4
 80074e8:	6011      	str	r1, [r2, #0]
 80074ea:	d1e0      	bne.n	80074ae <_free_r+0x26>
 80074ec:	681c      	ldr	r4, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	6053      	str	r3, [r2, #4]
 80074f2:	4421      	add	r1, r4
 80074f4:	6011      	str	r1, [r2, #0]
 80074f6:	e7da      	b.n	80074ae <_free_r+0x26>
 80074f8:	d902      	bls.n	8007500 <_free_r+0x78>
 80074fa:	230c      	movs	r3, #12
 80074fc:	6003      	str	r3, [r0, #0]
 80074fe:	e7d6      	b.n	80074ae <_free_r+0x26>
 8007500:	6825      	ldr	r5, [r4, #0]
 8007502:	1961      	adds	r1, r4, r5
 8007504:	428b      	cmp	r3, r1
 8007506:	bf04      	itt	eq
 8007508:	6819      	ldreq	r1, [r3, #0]
 800750a:	685b      	ldreq	r3, [r3, #4]
 800750c:	6063      	str	r3, [r4, #4]
 800750e:	bf04      	itt	eq
 8007510:	1949      	addeq	r1, r1, r5
 8007512:	6021      	streq	r1, [r4, #0]
 8007514:	6054      	str	r4, [r2, #4]
 8007516:	e7ca      	b.n	80074ae <_free_r+0x26>
 8007518:	b003      	add	sp, #12
 800751a:	bd30      	pop	{r4, r5, pc}
 800751c:	20004c70 	.word	0x20004c70

08007520 <sbrk_aligned>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	4e0e      	ldr	r6, [pc, #56]	; (800755c <sbrk_aligned+0x3c>)
 8007524:	460c      	mov	r4, r1
 8007526:	6831      	ldr	r1, [r6, #0]
 8007528:	4605      	mov	r5, r0
 800752a:	b911      	cbnz	r1, 8007532 <sbrk_aligned+0x12>
 800752c:	f000 f9c6 	bl	80078bc <_sbrk_r>
 8007530:	6030      	str	r0, [r6, #0]
 8007532:	4621      	mov	r1, r4
 8007534:	4628      	mov	r0, r5
 8007536:	f000 f9c1 	bl	80078bc <_sbrk_r>
 800753a:	1c43      	adds	r3, r0, #1
 800753c:	d00a      	beq.n	8007554 <sbrk_aligned+0x34>
 800753e:	1cc4      	adds	r4, r0, #3
 8007540:	f024 0403 	bic.w	r4, r4, #3
 8007544:	42a0      	cmp	r0, r4
 8007546:	d007      	beq.n	8007558 <sbrk_aligned+0x38>
 8007548:	1a21      	subs	r1, r4, r0
 800754a:	4628      	mov	r0, r5
 800754c:	f000 f9b6 	bl	80078bc <_sbrk_r>
 8007550:	3001      	adds	r0, #1
 8007552:	d101      	bne.n	8007558 <sbrk_aligned+0x38>
 8007554:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007558:	4620      	mov	r0, r4
 800755a:	bd70      	pop	{r4, r5, r6, pc}
 800755c:	20004c74 	.word	0x20004c74

08007560 <_malloc_r>:
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	1ccd      	adds	r5, r1, #3
 8007566:	f025 0503 	bic.w	r5, r5, #3
 800756a:	3508      	adds	r5, #8
 800756c:	2d0c      	cmp	r5, #12
 800756e:	bf38      	it	cc
 8007570:	250c      	movcc	r5, #12
 8007572:	2d00      	cmp	r5, #0
 8007574:	4607      	mov	r7, r0
 8007576:	db01      	blt.n	800757c <_malloc_r+0x1c>
 8007578:	42a9      	cmp	r1, r5
 800757a:	d905      	bls.n	8007588 <_malloc_r+0x28>
 800757c:	230c      	movs	r3, #12
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	2600      	movs	r6, #0
 8007582:	4630      	mov	r0, r6
 8007584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007588:	4e2e      	ldr	r6, [pc, #184]	; (8007644 <_malloc_r+0xe4>)
 800758a:	f000 fc7b 	bl	8007e84 <__malloc_lock>
 800758e:	6833      	ldr	r3, [r6, #0]
 8007590:	461c      	mov	r4, r3
 8007592:	bb34      	cbnz	r4, 80075e2 <_malloc_r+0x82>
 8007594:	4629      	mov	r1, r5
 8007596:	4638      	mov	r0, r7
 8007598:	f7ff ffc2 	bl	8007520 <sbrk_aligned>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	4604      	mov	r4, r0
 80075a0:	d14d      	bne.n	800763e <_malloc_r+0xde>
 80075a2:	6834      	ldr	r4, [r6, #0]
 80075a4:	4626      	mov	r6, r4
 80075a6:	2e00      	cmp	r6, #0
 80075a8:	d140      	bne.n	800762c <_malloc_r+0xcc>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	4631      	mov	r1, r6
 80075ae:	4638      	mov	r0, r7
 80075b0:	eb04 0803 	add.w	r8, r4, r3
 80075b4:	f000 f982 	bl	80078bc <_sbrk_r>
 80075b8:	4580      	cmp	r8, r0
 80075ba:	d13a      	bne.n	8007632 <_malloc_r+0xd2>
 80075bc:	6821      	ldr	r1, [r4, #0]
 80075be:	3503      	adds	r5, #3
 80075c0:	1a6d      	subs	r5, r5, r1
 80075c2:	f025 0503 	bic.w	r5, r5, #3
 80075c6:	3508      	adds	r5, #8
 80075c8:	2d0c      	cmp	r5, #12
 80075ca:	bf38      	it	cc
 80075cc:	250c      	movcc	r5, #12
 80075ce:	4629      	mov	r1, r5
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff ffa5 	bl	8007520 <sbrk_aligned>
 80075d6:	3001      	adds	r0, #1
 80075d8:	d02b      	beq.n	8007632 <_malloc_r+0xd2>
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	442b      	add	r3, r5
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	e00e      	b.n	8007600 <_malloc_r+0xa0>
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	1b52      	subs	r2, r2, r5
 80075e6:	d41e      	bmi.n	8007626 <_malloc_r+0xc6>
 80075e8:	2a0b      	cmp	r2, #11
 80075ea:	d916      	bls.n	800761a <_malloc_r+0xba>
 80075ec:	1961      	adds	r1, r4, r5
 80075ee:	42a3      	cmp	r3, r4
 80075f0:	6025      	str	r5, [r4, #0]
 80075f2:	bf18      	it	ne
 80075f4:	6059      	strne	r1, [r3, #4]
 80075f6:	6863      	ldr	r3, [r4, #4]
 80075f8:	bf08      	it	eq
 80075fa:	6031      	streq	r1, [r6, #0]
 80075fc:	5162      	str	r2, [r4, r5]
 80075fe:	604b      	str	r3, [r1, #4]
 8007600:	4638      	mov	r0, r7
 8007602:	f104 060b 	add.w	r6, r4, #11
 8007606:	f000 fc43 	bl	8007e90 <__malloc_unlock>
 800760a:	f026 0607 	bic.w	r6, r6, #7
 800760e:	1d23      	adds	r3, r4, #4
 8007610:	1af2      	subs	r2, r6, r3
 8007612:	d0b6      	beq.n	8007582 <_malloc_r+0x22>
 8007614:	1b9b      	subs	r3, r3, r6
 8007616:	50a3      	str	r3, [r4, r2]
 8007618:	e7b3      	b.n	8007582 <_malloc_r+0x22>
 800761a:	6862      	ldr	r2, [r4, #4]
 800761c:	42a3      	cmp	r3, r4
 800761e:	bf0c      	ite	eq
 8007620:	6032      	streq	r2, [r6, #0]
 8007622:	605a      	strne	r2, [r3, #4]
 8007624:	e7ec      	b.n	8007600 <_malloc_r+0xa0>
 8007626:	4623      	mov	r3, r4
 8007628:	6864      	ldr	r4, [r4, #4]
 800762a:	e7b2      	b.n	8007592 <_malloc_r+0x32>
 800762c:	4634      	mov	r4, r6
 800762e:	6876      	ldr	r6, [r6, #4]
 8007630:	e7b9      	b.n	80075a6 <_malloc_r+0x46>
 8007632:	230c      	movs	r3, #12
 8007634:	603b      	str	r3, [r7, #0]
 8007636:	4638      	mov	r0, r7
 8007638:	f000 fc2a 	bl	8007e90 <__malloc_unlock>
 800763c:	e7a1      	b.n	8007582 <_malloc_r+0x22>
 800763e:	6025      	str	r5, [r4, #0]
 8007640:	e7de      	b.n	8007600 <_malloc_r+0xa0>
 8007642:	bf00      	nop
 8007644:	20004c70 	.word	0x20004c70

08007648 <_perror_r>:
 8007648:	6983      	ldr	r3, [r0, #24]
 800764a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800764c:	68c4      	ldr	r4, [r0, #12]
 800764e:	4605      	mov	r5, r0
 8007650:	460e      	mov	r6, r1
 8007652:	b90b      	cbnz	r3, 8007658 <_perror_r+0x10>
 8007654:	f7ff fe20 	bl	8007298 <__sinit>
 8007658:	4b43      	ldr	r3, [pc, #268]	; (8007768 <_perror_r+0x120>)
 800765a:	429c      	cmp	r4, r3
 800765c:	d132      	bne.n	80076c4 <_perror_r+0x7c>
 800765e:	686c      	ldr	r4, [r5, #4]
 8007660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007662:	07d8      	lsls	r0, r3, #31
 8007664:	d405      	bmi.n	8007672 <_perror_r+0x2a>
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	0599      	lsls	r1, r3, #22
 800766a:	d402      	bmi.n	8007672 <_perror_r+0x2a>
 800766c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800766e:	f7ff fef2 	bl	8007456 <__retarget_lock_acquire_recursive>
 8007672:	4621      	mov	r1, r4
 8007674:	4628      	mov	r0, r5
 8007676:	f7ff fd69 	bl	800714c <_fflush_r>
 800767a:	bb6e      	cbnz	r6, 80076d8 <_perror_r+0x90>
 800767c:	6829      	ldr	r1, [r5, #0]
 800767e:	ab01      	add	r3, sp, #4
 8007680:	2201      	movs	r2, #1
 8007682:	4628      	mov	r0, r5
 8007684:	f000 f986 	bl	8007994 <_strerror_r>
 8007688:	4607      	mov	r7, r0
 800768a:	2800      	cmp	r0, #0
 800768c:	d14f      	bne.n	800772e <_perror_r+0xe6>
 800768e:	4837      	ldr	r0, [pc, #220]	; (800776c <_perror_r+0x124>)
 8007690:	4f36      	ldr	r7, [pc, #216]	; (800776c <_perror_r+0x124>)
 8007692:	f7f8 fdaf 	bl	80001f4 <strlen>
 8007696:	4606      	mov	r6, r0
 8007698:	b156      	cbz	r6, 80076b0 <_perror_r+0x68>
 800769a:	4620      	mov	r0, r4
 800769c:	f000 fba2 	bl	8007de4 <fileno>
 80076a0:	4633      	mov	r3, r6
 80076a2:	4601      	mov	r1, r0
 80076a4:	463a      	mov	r2, r7
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 fb7a 	bl	8007da0 <_write_r>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	da51      	bge.n	8007754 <_perror_r+0x10c>
 80076b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076ba:	07d2      	lsls	r2, r2, #31
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	d54c      	bpl.n	800775a <_perror_r+0x112>
 80076c0:	b003      	add	sp, #12
 80076c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c4:	4b2a      	ldr	r3, [pc, #168]	; (8007770 <_perror_r+0x128>)
 80076c6:	429c      	cmp	r4, r3
 80076c8:	d101      	bne.n	80076ce <_perror_r+0x86>
 80076ca:	68ac      	ldr	r4, [r5, #8]
 80076cc:	e7c8      	b.n	8007660 <_perror_r+0x18>
 80076ce:	4b29      	ldr	r3, [pc, #164]	; (8007774 <_perror_r+0x12c>)
 80076d0:	429c      	cmp	r4, r3
 80076d2:	bf08      	it	eq
 80076d4:	68ec      	ldreq	r4, [r5, #12]
 80076d6:	e7c3      	b.n	8007660 <_perror_r+0x18>
 80076d8:	7833      	ldrb	r3, [r6, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0ce      	beq.n	800767c <_perror_r+0x34>
 80076de:	4630      	mov	r0, r6
 80076e0:	f7f8 fd88 	bl	80001f4 <strlen>
 80076e4:	4607      	mov	r7, r0
 80076e6:	b157      	cbz	r7, 80076fe <_perror_r+0xb6>
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 fb7b 	bl	8007de4 <fileno>
 80076ee:	463b      	mov	r3, r7
 80076f0:	4601      	mov	r1, r0
 80076f2:	4632      	mov	r2, r6
 80076f4:	4628      	mov	r0, r5
 80076f6:	f000 fb53 	bl	8007da0 <_write_r>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	da14      	bge.n	8007728 <_perror_r+0xe0>
 80076fe:	481e      	ldr	r0, [pc, #120]	; (8007778 <_perror_r+0x130>)
 8007700:	4f1d      	ldr	r7, [pc, #116]	; (8007778 <_perror_r+0x130>)
 8007702:	f7f8 fd77 	bl	80001f4 <strlen>
 8007706:	4606      	mov	r6, r0
 8007708:	2e00      	cmp	r6, #0
 800770a:	d0b7      	beq.n	800767c <_perror_r+0x34>
 800770c:	4620      	mov	r0, r4
 800770e:	f000 fb69 	bl	8007de4 <fileno>
 8007712:	4633      	mov	r3, r6
 8007714:	4601      	mov	r1, r0
 8007716:	463a      	mov	r2, r7
 8007718:	4628      	mov	r0, r5
 800771a:	f000 fb41 	bl	8007da0 <_write_r>
 800771e:	2800      	cmp	r0, #0
 8007720:	dbac      	blt.n	800767c <_perror_r+0x34>
 8007722:	1a36      	subs	r6, r6, r0
 8007724:	4407      	add	r7, r0
 8007726:	e7ef      	b.n	8007708 <_perror_r+0xc0>
 8007728:	1a3f      	subs	r7, r7, r0
 800772a:	4406      	add	r6, r0
 800772c:	e7db      	b.n	80076e6 <_perror_r+0x9e>
 800772e:	f7f8 fd61 	bl	80001f4 <strlen>
 8007732:	4606      	mov	r6, r0
 8007734:	2e00      	cmp	r6, #0
 8007736:	d0aa      	beq.n	800768e <_perror_r+0x46>
 8007738:	4620      	mov	r0, r4
 800773a:	f000 fb53 	bl	8007de4 <fileno>
 800773e:	4633      	mov	r3, r6
 8007740:	4601      	mov	r1, r0
 8007742:	463a      	mov	r2, r7
 8007744:	4628      	mov	r0, r5
 8007746:	f000 fb2b 	bl	8007da0 <_write_r>
 800774a:	2800      	cmp	r0, #0
 800774c:	db9f      	blt.n	800768e <_perror_r+0x46>
 800774e:	1a36      	subs	r6, r6, r0
 8007750:	4407      	add	r7, r0
 8007752:	e7ef      	b.n	8007734 <_perror_r+0xec>
 8007754:	1a36      	subs	r6, r6, r0
 8007756:	4407      	add	r7, r0
 8007758:	e79e      	b.n	8007698 <_perror_r+0x50>
 800775a:	059b      	lsls	r3, r3, #22
 800775c:	d4b0      	bmi.n	80076c0 <_perror_r+0x78>
 800775e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007760:	f7ff fe7a 	bl	8007458 <__retarget_lock_release_recursive>
 8007764:	e7ac      	b.n	80076c0 <_perror_r+0x78>
 8007766:	bf00      	nop
 8007768:	08009578 	.word	0x08009578
 800776c:	080095bf 	.word	0x080095bf
 8007770:	08009598 	.word	0x08009598
 8007774:	08009558 	.word	0x08009558
 8007778:	080095bc 	.word	0x080095bc

0800777c <perror>:
 800777c:	4b02      	ldr	r3, [pc, #8]	; (8007788 <perror+0xc>)
 800777e:	4601      	mov	r1, r0
 8007780:	6818      	ldr	r0, [r3, #0]
 8007782:	f7ff bf61 	b.w	8007648 <_perror_r>
 8007786:	bf00      	nop
 8007788:	20000018 	.word	0x20000018

0800778c <iprintf>:
 800778c:	b40f      	push	{r0, r1, r2, r3}
 800778e:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <iprintf+0x2c>)
 8007790:	b513      	push	{r0, r1, r4, lr}
 8007792:	681c      	ldr	r4, [r3, #0]
 8007794:	b124      	cbz	r4, 80077a0 <iprintf+0x14>
 8007796:	69a3      	ldr	r3, [r4, #24]
 8007798:	b913      	cbnz	r3, 80077a0 <iprintf+0x14>
 800779a:	4620      	mov	r0, r4
 800779c:	f7ff fd7c 	bl	8007298 <__sinit>
 80077a0:	ab05      	add	r3, sp, #20
 80077a2:	9a04      	ldr	r2, [sp, #16]
 80077a4:	68a1      	ldr	r1, [r4, #8]
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 fba1 	bl	8007ef0 <_vfiprintf_r>
 80077ae:	b002      	add	sp, #8
 80077b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b4:	b004      	add	sp, #16
 80077b6:	4770      	bx	lr
 80077b8:	20000018 	.word	0x20000018

080077bc <putchar>:
 80077bc:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <putchar+0x28>)
 80077be:	b513      	push	{r0, r1, r4, lr}
 80077c0:	681c      	ldr	r4, [r3, #0]
 80077c2:	4601      	mov	r1, r0
 80077c4:	b134      	cbz	r4, 80077d4 <putchar+0x18>
 80077c6:	69a3      	ldr	r3, [r4, #24]
 80077c8:	b923      	cbnz	r3, 80077d4 <putchar+0x18>
 80077ca:	9001      	str	r0, [sp, #4]
 80077cc:	4620      	mov	r0, r4
 80077ce:	f7ff fd63 	bl	8007298 <__sinit>
 80077d2:	9901      	ldr	r1, [sp, #4]
 80077d4:	68a2      	ldr	r2, [r4, #8]
 80077d6:	4620      	mov	r0, r4
 80077d8:	b002      	add	sp, #8
 80077da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077de:	f001 b96b 	b.w	8008ab8 <_putc_r>
 80077e2:	bf00      	nop
 80077e4:	20000018 	.word	0x20000018

080077e8 <cleanup_glue>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	460c      	mov	r4, r1
 80077ec:	6809      	ldr	r1, [r1, #0]
 80077ee:	4605      	mov	r5, r0
 80077f0:	b109      	cbz	r1, 80077f6 <cleanup_glue+0xe>
 80077f2:	f7ff fff9 	bl	80077e8 <cleanup_glue>
 80077f6:	4621      	mov	r1, r4
 80077f8:	4628      	mov	r0, r5
 80077fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077fe:	f7ff be43 	b.w	8007488 <_free_r>
	...

08007804 <_reclaim_reent>:
 8007804:	4b2c      	ldr	r3, [pc, #176]	; (80078b8 <_reclaim_reent+0xb4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4283      	cmp	r3, r0
 800780a:	b570      	push	{r4, r5, r6, lr}
 800780c:	4604      	mov	r4, r0
 800780e:	d051      	beq.n	80078b4 <_reclaim_reent+0xb0>
 8007810:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007812:	b143      	cbz	r3, 8007826 <_reclaim_reent+0x22>
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d14a      	bne.n	80078b0 <_reclaim_reent+0xac>
 800781a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800781c:	6819      	ldr	r1, [r3, #0]
 800781e:	b111      	cbz	r1, 8007826 <_reclaim_reent+0x22>
 8007820:	4620      	mov	r0, r4
 8007822:	f7ff fe31 	bl	8007488 <_free_r>
 8007826:	6961      	ldr	r1, [r4, #20]
 8007828:	b111      	cbz	r1, 8007830 <_reclaim_reent+0x2c>
 800782a:	4620      	mov	r0, r4
 800782c:	f7ff fe2c 	bl	8007488 <_free_r>
 8007830:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007832:	b111      	cbz	r1, 800783a <_reclaim_reent+0x36>
 8007834:	4620      	mov	r0, r4
 8007836:	f7ff fe27 	bl	8007488 <_free_r>
 800783a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800783c:	b111      	cbz	r1, 8007844 <_reclaim_reent+0x40>
 800783e:	4620      	mov	r0, r4
 8007840:	f7ff fe22 	bl	8007488 <_free_r>
 8007844:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007846:	b111      	cbz	r1, 800784e <_reclaim_reent+0x4a>
 8007848:	4620      	mov	r0, r4
 800784a:	f7ff fe1d 	bl	8007488 <_free_r>
 800784e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007850:	b111      	cbz	r1, 8007858 <_reclaim_reent+0x54>
 8007852:	4620      	mov	r0, r4
 8007854:	f7ff fe18 	bl	8007488 <_free_r>
 8007858:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800785a:	b111      	cbz	r1, 8007862 <_reclaim_reent+0x5e>
 800785c:	4620      	mov	r0, r4
 800785e:	f7ff fe13 	bl	8007488 <_free_r>
 8007862:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007864:	b111      	cbz	r1, 800786c <_reclaim_reent+0x68>
 8007866:	4620      	mov	r0, r4
 8007868:	f7ff fe0e 	bl	8007488 <_free_r>
 800786c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800786e:	b111      	cbz	r1, 8007876 <_reclaim_reent+0x72>
 8007870:	4620      	mov	r0, r4
 8007872:	f7ff fe09 	bl	8007488 <_free_r>
 8007876:	69a3      	ldr	r3, [r4, #24]
 8007878:	b1e3      	cbz	r3, 80078b4 <_reclaim_reent+0xb0>
 800787a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800787c:	4620      	mov	r0, r4
 800787e:	4798      	blx	r3
 8007880:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007882:	b1b9      	cbz	r1, 80078b4 <_reclaim_reent+0xb0>
 8007884:	4620      	mov	r0, r4
 8007886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800788a:	f7ff bfad 	b.w	80077e8 <cleanup_glue>
 800788e:	5949      	ldr	r1, [r1, r5]
 8007890:	b941      	cbnz	r1, 80078a4 <_reclaim_reent+0xa0>
 8007892:	3504      	adds	r5, #4
 8007894:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007896:	2d80      	cmp	r5, #128	; 0x80
 8007898:	68d9      	ldr	r1, [r3, #12]
 800789a:	d1f8      	bne.n	800788e <_reclaim_reent+0x8a>
 800789c:	4620      	mov	r0, r4
 800789e:	f7ff fdf3 	bl	8007488 <_free_r>
 80078a2:	e7ba      	b.n	800781a <_reclaim_reent+0x16>
 80078a4:	680e      	ldr	r6, [r1, #0]
 80078a6:	4620      	mov	r0, r4
 80078a8:	f7ff fdee 	bl	8007488 <_free_r>
 80078ac:	4631      	mov	r1, r6
 80078ae:	e7ef      	b.n	8007890 <_reclaim_reent+0x8c>
 80078b0:	2500      	movs	r5, #0
 80078b2:	e7ef      	b.n	8007894 <_reclaim_reent+0x90>
 80078b4:	bd70      	pop	{r4, r5, r6, pc}
 80078b6:	bf00      	nop
 80078b8:	20000018 	.word	0x20000018

080078bc <_sbrk_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d06      	ldr	r5, [pc, #24]	; (80078d8 <_sbrk_r+0x1c>)
 80078c0:	2300      	movs	r3, #0
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	f7f9 fa6a 	bl	8000da0 <_sbrk>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_sbrk_r+0x1a>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_sbrk_r+0x1a>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	20004c78 	.word	0x20004c78

080078dc <iscanf>:
 80078dc:	b40f      	push	{r0, r1, r2, r3}
 80078de:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <iscanf+0x2c>)
 80078e0:	b513      	push	{r0, r1, r4, lr}
 80078e2:	681c      	ldr	r4, [r3, #0]
 80078e4:	b124      	cbz	r4, 80078f0 <iscanf+0x14>
 80078e6:	69a3      	ldr	r3, [r4, #24]
 80078e8:	b913      	cbnz	r3, 80078f0 <iscanf+0x14>
 80078ea:	4620      	mov	r0, r4
 80078ec:	f7ff fcd4 	bl	8007298 <__sinit>
 80078f0:	ab05      	add	r3, sp, #20
 80078f2:	9a04      	ldr	r2, [sp, #16]
 80078f4:	6861      	ldr	r1, [r4, #4]
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	4620      	mov	r0, r4
 80078fa:	f000 ff63 	bl	80087c4 <_vfiscanf_r>
 80078fe:	b002      	add	sp, #8
 8007900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007904:	b004      	add	sp, #16
 8007906:	4770      	bx	lr
 8007908:	20000018 	.word	0x20000018

0800790c <__sread>:
 800790c:	b510      	push	{r4, lr}
 800790e:	460c      	mov	r4, r1
 8007910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007914:	f001 f918 	bl	8008b48 <_read_r>
 8007918:	2800      	cmp	r0, #0
 800791a:	bfab      	itete	ge
 800791c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800791e:	89a3      	ldrhlt	r3, [r4, #12]
 8007920:	181b      	addge	r3, r3, r0
 8007922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007926:	bfac      	ite	ge
 8007928:	6563      	strge	r3, [r4, #84]	; 0x54
 800792a:	81a3      	strhlt	r3, [r4, #12]
 800792c:	bd10      	pop	{r4, pc}

0800792e <__swrite>:
 800792e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007932:	461f      	mov	r7, r3
 8007934:	898b      	ldrh	r3, [r1, #12]
 8007936:	05db      	lsls	r3, r3, #23
 8007938:	4605      	mov	r5, r0
 800793a:	460c      	mov	r4, r1
 800793c:	4616      	mov	r6, r2
 800793e:	d505      	bpl.n	800794c <__swrite+0x1e>
 8007940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007944:	2302      	movs	r3, #2
 8007946:	2200      	movs	r2, #0
 8007948:	f000 fa8a 	bl	8007e60 <_lseek_r>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007956:	81a3      	strh	r3, [r4, #12]
 8007958:	4632      	mov	r2, r6
 800795a:	463b      	mov	r3, r7
 800795c:	4628      	mov	r0, r5
 800795e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007962:	f000 ba1d 	b.w	8007da0 <_write_r>

08007966 <__sseek>:
 8007966:	b510      	push	{r4, lr}
 8007968:	460c      	mov	r4, r1
 800796a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796e:	f000 fa77 	bl	8007e60 <_lseek_r>
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	bf15      	itete	ne
 8007978:	6560      	strne	r0, [r4, #84]	; 0x54
 800797a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800797e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007982:	81a3      	strheq	r3, [r4, #12]
 8007984:	bf18      	it	ne
 8007986:	81a3      	strhne	r3, [r4, #12]
 8007988:	bd10      	pop	{r4, pc}

0800798a <__sclose>:
 800798a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798e:	f000 ba19 	b.w	8007dc4 <_close_r>
	...

08007994 <_strerror_r>:
 8007994:	b510      	push	{r4, lr}
 8007996:	4604      	mov	r4, r0
 8007998:	4608      	mov	r0, r1
 800799a:	4611      	mov	r1, r2
 800799c:	288e      	cmp	r0, #142	; 0x8e
 800799e:	f200 8130 	bhi.w	8007c02 <_strerror_r+0x26e>
 80079a2:	e8df f010 	tbh	[pc, r0, lsl #1]
 80079a6:	0139      	.short	0x0139
 80079a8:	0092008f 	.word	0x0092008f
 80079ac:	00960094 	.word	0x00960094
 80079b0:	009a0098 	.word	0x009a0098
 80079b4:	009e009c 	.word	0x009e009c
 80079b8:	00a400a2 	.word	0x00a400a2
 80079bc:	00aa00a8 	.word	0x00aa00a8
 80079c0:	00ae00ac 	.word	0x00ae00ac
 80079c4:	00b0012e 	.word	0x00b0012e
 80079c8:	00b400b2 	.word	0x00b400b2
 80079cc:	00b800b6 	.word	0x00b800b6
 80079d0:	00c000be 	.word	0x00c000be
 80079d4:	00c800c6 	.word	0x00c800c6
 80079d8:	00cc00ca 	.word	0x00cc00ca
 80079dc:	00d200ce 	.word	0x00d200ce
 80079e0:	00d800d6 	.word	0x00d800d6
 80079e4:	00dc00da 	.word	0x00dc00da
 80079e8:	00e000de 	.word	0x00e000de
 80079ec:	00e400e2 	.word	0x00e400e2
 80079f0:	012e012e 	.word	0x012e012e
 80079f4:	012e012e 	.word	0x012e012e
 80079f8:	012e012e 	.word	0x012e012e
 80079fc:	012e012e 	.word	0x012e012e
 8007a00:	00ec00e8 	.word	0x00ec00e8
 8007a04:	012e012e 	.word	0x012e012e
 8007a08:	012e012e 	.word	0x012e012e
 8007a0c:	012e012e 	.word	0x012e012e
 8007a10:	012e012e 	.word	0x012e012e
 8007a14:	012e012e 	.word	0x012e012e
 8007a18:	012e012e 	.word	0x012e012e
 8007a1c:	00ee012e 	.word	0x00ee012e
 8007a20:	00f00108 	.word	0x00f00108
 8007a24:	012e00f2 	.word	0x012e00f2
 8007a28:	012e012e 	.word	0x012e012e
 8007a2c:	012e00f4 	.word	0x012e00f4
 8007a30:	012e012e 	.word	0x012e012e
 8007a34:	012e00f6 	.word	0x012e00f6
 8007a38:	00fa012e 	.word	0x00fa012e
 8007a3c:	012e012e 	.word	0x012e012e
 8007a40:	012e00fc 	.word	0x012e00fc
 8007a44:	012e012e 	.word	0x012e012e
 8007a48:	012e012e 	.word	0x012e012e
 8007a4c:	012e012e 	.word	0x012e012e
 8007a50:	012e012e 	.word	0x012e012e
 8007a54:	00fe012e 	.word	0x00fe012e
 8007a58:	0100012e 	.word	0x0100012e
 8007a5c:	01040102 	.word	0x01040102
 8007a60:	012e012e 	.word	0x012e012e
 8007a64:	012e0126 	.word	0x012e0126
 8007a68:	012e012e 	.word	0x012e012e
 8007a6c:	012e012e 	.word	0x012e012e
 8007a70:	012e012e 	.word	0x012e012e
 8007a74:	0114012e 	.word	0x0114012e
 8007a78:	010a0106 	.word	0x010a0106
 8007a7c:	010e010c 	.word	0x010e010c
 8007a80:	012e0110 	.word	0x012e0110
 8007a84:	01160112 	.word	0x01160112
 8007a88:	00ea011a 	.word	0x00ea011a
 8007a8c:	012c00c2 	.word	0x012c00c2
 8007a90:	00d000ba 	.word	0x00d000ba
 8007a94:	00a000bc 	.word	0x00a000bc
 8007a98:	012a00a6 	.word	0x012a00a6
 8007a9c:	012e00f8 	.word	0x012e00f8
 8007aa0:	00c40118 	.word	0x00c40118
 8007aa4:	011c011e 	.word	0x011c011e
 8007aa8:	012e012e 	.word	0x012e012e
 8007aac:	012e012e 	.word	0x012e012e
 8007ab0:	00d4012e 	.word	0x00d4012e
 8007ab4:	012e012e 	.word	0x012e012e
 8007ab8:	00e6012e 	.word	0x00e6012e
 8007abc:	01200128 	.word	0x01200128
 8007ac0:	01240122 	.word	0x01240122
 8007ac4:	4b55      	ldr	r3, [pc, #340]	; (8007c1c <_strerror_r+0x288>)
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	bd10      	pop	{r4, pc}
 8007aca:	4b55      	ldr	r3, [pc, #340]	; (8007c20 <_strerror_r+0x28c>)
 8007acc:	e7fb      	b.n	8007ac6 <_strerror_r+0x132>
 8007ace:	4b55      	ldr	r3, [pc, #340]	; (8007c24 <_strerror_r+0x290>)
 8007ad0:	e7f9      	b.n	8007ac6 <_strerror_r+0x132>
 8007ad2:	4b55      	ldr	r3, [pc, #340]	; (8007c28 <_strerror_r+0x294>)
 8007ad4:	e7f7      	b.n	8007ac6 <_strerror_r+0x132>
 8007ad6:	4b55      	ldr	r3, [pc, #340]	; (8007c2c <_strerror_r+0x298>)
 8007ad8:	e7f5      	b.n	8007ac6 <_strerror_r+0x132>
 8007ada:	4b55      	ldr	r3, [pc, #340]	; (8007c30 <_strerror_r+0x29c>)
 8007adc:	e7f3      	b.n	8007ac6 <_strerror_r+0x132>
 8007ade:	4b55      	ldr	r3, [pc, #340]	; (8007c34 <_strerror_r+0x2a0>)
 8007ae0:	e7f1      	b.n	8007ac6 <_strerror_r+0x132>
 8007ae2:	4b55      	ldr	r3, [pc, #340]	; (8007c38 <_strerror_r+0x2a4>)
 8007ae4:	e7ef      	b.n	8007ac6 <_strerror_r+0x132>
 8007ae6:	4b55      	ldr	r3, [pc, #340]	; (8007c3c <_strerror_r+0x2a8>)
 8007ae8:	e7ed      	b.n	8007ac6 <_strerror_r+0x132>
 8007aea:	4b55      	ldr	r3, [pc, #340]	; (8007c40 <_strerror_r+0x2ac>)
 8007aec:	e7eb      	b.n	8007ac6 <_strerror_r+0x132>
 8007aee:	4b55      	ldr	r3, [pc, #340]	; (8007c44 <_strerror_r+0x2b0>)
 8007af0:	e7e9      	b.n	8007ac6 <_strerror_r+0x132>
 8007af2:	4b55      	ldr	r3, [pc, #340]	; (8007c48 <_strerror_r+0x2b4>)
 8007af4:	e7e7      	b.n	8007ac6 <_strerror_r+0x132>
 8007af6:	4b55      	ldr	r3, [pc, #340]	; (8007c4c <_strerror_r+0x2b8>)
 8007af8:	e7e5      	b.n	8007ac6 <_strerror_r+0x132>
 8007afa:	4b55      	ldr	r3, [pc, #340]	; (8007c50 <_strerror_r+0x2bc>)
 8007afc:	e7e3      	b.n	8007ac6 <_strerror_r+0x132>
 8007afe:	4b55      	ldr	r3, [pc, #340]	; (8007c54 <_strerror_r+0x2c0>)
 8007b00:	e7e1      	b.n	8007ac6 <_strerror_r+0x132>
 8007b02:	4b55      	ldr	r3, [pc, #340]	; (8007c58 <_strerror_r+0x2c4>)
 8007b04:	e7df      	b.n	8007ac6 <_strerror_r+0x132>
 8007b06:	4b55      	ldr	r3, [pc, #340]	; (8007c5c <_strerror_r+0x2c8>)
 8007b08:	e7dd      	b.n	8007ac6 <_strerror_r+0x132>
 8007b0a:	4b55      	ldr	r3, [pc, #340]	; (8007c60 <_strerror_r+0x2cc>)
 8007b0c:	e7db      	b.n	8007ac6 <_strerror_r+0x132>
 8007b0e:	4b55      	ldr	r3, [pc, #340]	; (8007c64 <_strerror_r+0x2d0>)
 8007b10:	e7d9      	b.n	8007ac6 <_strerror_r+0x132>
 8007b12:	4b55      	ldr	r3, [pc, #340]	; (8007c68 <_strerror_r+0x2d4>)
 8007b14:	e7d7      	b.n	8007ac6 <_strerror_r+0x132>
 8007b16:	4b55      	ldr	r3, [pc, #340]	; (8007c6c <_strerror_r+0x2d8>)
 8007b18:	e7d5      	b.n	8007ac6 <_strerror_r+0x132>
 8007b1a:	4b55      	ldr	r3, [pc, #340]	; (8007c70 <_strerror_r+0x2dc>)
 8007b1c:	e7d3      	b.n	8007ac6 <_strerror_r+0x132>
 8007b1e:	4b55      	ldr	r3, [pc, #340]	; (8007c74 <_strerror_r+0x2e0>)
 8007b20:	e7d1      	b.n	8007ac6 <_strerror_r+0x132>
 8007b22:	4b55      	ldr	r3, [pc, #340]	; (8007c78 <_strerror_r+0x2e4>)
 8007b24:	e7cf      	b.n	8007ac6 <_strerror_r+0x132>
 8007b26:	4b55      	ldr	r3, [pc, #340]	; (8007c7c <_strerror_r+0x2e8>)
 8007b28:	e7cd      	b.n	8007ac6 <_strerror_r+0x132>
 8007b2a:	4b55      	ldr	r3, [pc, #340]	; (8007c80 <_strerror_r+0x2ec>)
 8007b2c:	e7cb      	b.n	8007ac6 <_strerror_r+0x132>
 8007b2e:	4b55      	ldr	r3, [pc, #340]	; (8007c84 <_strerror_r+0x2f0>)
 8007b30:	e7c9      	b.n	8007ac6 <_strerror_r+0x132>
 8007b32:	4b55      	ldr	r3, [pc, #340]	; (8007c88 <_strerror_r+0x2f4>)
 8007b34:	e7c7      	b.n	8007ac6 <_strerror_r+0x132>
 8007b36:	4b55      	ldr	r3, [pc, #340]	; (8007c8c <_strerror_r+0x2f8>)
 8007b38:	e7c5      	b.n	8007ac6 <_strerror_r+0x132>
 8007b3a:	4b55      	ldr	r3, [pc, #340]	; (8007c90 <_strerror_r+0x2fc>)
 8007b3c:	e7c3      	b.n	8007ac6 <_strerror_r+0x132>
 8007b3e:	4b55      	ldr	r3, [pc, #340]	; (8007c94 <_strerror_r+0x300>)
 8007b40:	e7c1      	b.n	8007ac6 <_strerror_r+0x132>
 8007b42:	4b55      	ldr	r3, [pc, #340]	; (8007c98 <_strerror_r+0x304>)
 8007b44:	e7bf      	b.n	8007ac6 <_strerror_r+0x132>
 8007b46:	4b55      	ldr	r3, [pc, #340]	; (8007c9c <_strerror_r+0x308>)
 8007b48:	e7bd      	b.n	8007ac6 <_strerror_r+0x132>
 8007b4a:	4b55      	ldr	r3, [pc, #340]	; (8007ca0 <_strerror_r+0x30c>)
 8007b4c:	e7bb      	b.n	8007ac6 <_strerror_r+0x132>
 8007b4e:	4b55      	ldr	r3, [pc, #340]	; (8007ca4 <_strerror_r+0x310>)
 8007b50:	e7b9      	b.n	8007ac6 <_strerror_r+0x132>
 8007b52:	4b55      	ldr	r3, [pc, #340]	; (8007ca8 <_strerror_r+0x314>)
 8007b54:	e7b7      	b.n	8007ac6 <_strerror_r+0x132>
 8007b56:	4b55      	ldr	r3, [pc, #340]	; (8007cac <_strerror_r+0x318>)
 8007b58:	e7b5      	b.n	8007ac6 <_strerror_r+0x132>
 8007b5a:	4b55      	ldr	r3, [pc, #340]	; (8007cb0 <_strerror_r+0x31c>)
 8007b5c:	e7b3      	b.n	8007ac6 <_strerror_r+0x132>
 8007b5e:	4b55      	ldr	r3, [pc, #340]	; (8007cb4 <_strerror_r+0x320>)
 8007b60:	e7b1      	b.n	8007ac6 <_strerror_r+0x132>
 8007b62:	4b55      	ldr	r3, [pc, #340]	; (8007cb8 <_strerror_r+0x324>)
 8007b64:	e7af      	b.n	8007ac6 <_strerror_r+0x132>
 8007b66:	4b55      	ldr	r3, [pc, #340]	; (8007cbc <_strerror_r+0x328>)
 8007b68:	e7ad      	b.n	8007ac6 <_strerror_r+0x132>
 8007b6a:	4b55      	ldr	r3, [pc, #340]	; (8007cc0 <_strerror_r+0x32c>)
 8007b6c:	e7ab      	b.n	8007ac6 <_strerror_r+0x132>
 8007b6e:	4b55      	ldr	r3, [pc, #340]	; (8007cc4 <_strerror_r+0x330>)
 8007b70:	e7a9      	b.n	8007ac6 <_strerror_r+0x132>
 8007b72:	4b55      	ldr	r3, [pc, #340]	; (8007cc8 <_strerror_r+0x334>)
 8007b74:	e7a7      	b.n	8007ac6 <_strerror_r+0x132>
 8007b76:	4b55      	ldr	r3, [pc, #340]	; (8007ccc <_strerror_r+0x338>)
 8007b78:	e7a5      	b.n	8007ac6 <_strerror_r+0x132>
 8007b7a:	4b55      	ldr	r3, [pc, #340]	; (8007cd0 <_strerror_r+0x33c>)
 8007b7c:	e7a3      	b.n	8007ac6 <_strerror_r+0x132>
 8007b7e:	4b55      	ldr	r3, [pc, #340]	; (8007cd4 <_strerror_r+0x340>)
 8007b80:	e7a1      	b.n	8007ac6 <_strerror_r+0x132>
 8007b82:	4b55      	ldr	r3, [pc, #340]	; (8007cd8 <_strerror_r+0x344>)
 8007b84:	e79f      	b.n	8007ac6 <_strerror_r+0x132>
 8007b86:	4b55      	ldr	r3, [pc, #340]	; (8007cdc <_strerror_r+0x348>)
 8007b88:	e79d      	b.n	8007ac6 <_strerror_r+0x132>
 8007b8a:	4b55      	ldr	r3, [pc, #340]	; (8007ce0 <_strerror_r+0x34c>)
 8007b8c:	e79b      	b.n	8007ac6 <_strerror_r+0x132>
 8007b8e:	4b55      	ldr	r3, [pc, #340]	; (8007ce4 <_strerror_r+0x350>)
 8007b90:	e799      	b.n	8007ac6 <_strerror_r+0x132>
 8007b92:	4b55      	ldr	r3, [pc, #340]	; (8007ce8 <_strerror_r+0x354>)
 8007b94:	e797      	b.n	8007ac6 <_strerror_r+0x132>
 8007b96:	4b55      	ldr	r3, [pc, #340]	; (8007cec <_strerror_r+0x358>)
 8007b98:	e795      	b.n	8007ac6 <_strerror_r+0x132>
 8007b9a:	4b55      	ldr	r3, [pc, #340]	; (8007cf0 <_strerror_r+0x35c>)
 8007b9c:	e793      	b.n	8007ac6 <_strerror_r+0x132>
 8007b9e:	4b55      	ldr	r3, [pc, #340]	; (8007cf4 <_strerror_r+0x360>)
 8007ba0:	e791      	b.n	8007ac6 <_strerror_r+0x132>
 8007ba2:	4b55      	ldr	r3, [pc, #340]	; (8007cf8 <_strerror_r+0x364>)
 8007ba4:	e78f      	b.n	8007ac6 <_strerror_r+0x132>
 8007ba6:	4b55      	ldr	r3, [pc, #340]	; (8007cfc <_strerror_r+0x368>)
 8007ba8:	e78d      	b.n	8007ac6 <_strerror_r+0x132>
 8007baa:	4b55      	ldr	r3, [pc, #340]	; (8007d00 <_strerror_r+0x36c>)
 8007bac:	e78b      	b.n	8007ac6 <_strerror_r+0x132>
 8007bae:	4b55      	ldr	r3, [pc, #340]	; (8007d04 <_strerror_r+0x370>)
 8007bb0:	e789      	b.n	8007ac6 <_strerror_r+0x132>
 8007bb2:	4b55      	ldr	r3, [pc, #340]	; (8007d08 <_strerror_r+0x374>)
 8007bb4:	e787      	b.n	8007ac6 <_strerror_r+0x132>
 8007bb6:	4b55      	ldr	r3, [pc, #340]	; (8007d0c <_strerror_r+0x378>)
 8007bb8:	e785      	b.n	8007ac6 <_strerror_r+0x132>
 8007bba:	4b55      	ldr	r3, [pc, #340]	; (8007d10 <_strerror_r+0x37c>)
 8007bbc:	e783      	b.n	8007ac6 <_strerror_r+0x132>
 8007bbe:	4b55      	ldr	r3, [pc, #340]	; (8007d14 <_strerror_r+0x380>)
 8007bc0:	e781      	b.n	8007ac6 <_strerror_r+0x132>
 8007bc2:	4b55      	ldr	r3, [pc, #340]	; (8007d18 <_strerror_r+0x384>)
 8007bc4:	e77f      	b.n	8007ac6 <_strerror_r+0x132>
 8007bc6:	4b55      	ldr	r3, [pc, #340]	; (8007d1c <_strerror_r+0x388>)
 8007bc8:	e77d      	b.n	8007ac6 <_strerror_r+0x132>
 8007bca:	4b55      	ldr	r3, [pc, #340]	; (8007d20 <_strerror_r+0x38c>)
 8007bcc:	e77b      	b.n	8007ac6 <_strerror_r+0x132>
 8007bce:	4b55      	ldr	r3, [pc, #340]	; (8007d24 <_strerror_r+0x390>)
 8007bd0:	e779      	b.n	8007ac6 <_strerror_r+0x132>
 8007bd2:	4b55      	ldr	r3, [pc, #340]	; (8007d28 <_strerror_r+0x394>)
 8007bd4:	e777      	b.n	8007ac6 <_strerror_r+0x132>
 8007bd6:	4b55      	ldr	r3, [pc, #340]	; (8007d2c <_strerror_r+0x398>)
 8007bd8:	e775      	b.n	8007ac6 <_strerror_r+0x132>
 8007bda:	4b55      	ldr	r3, [pc, #340]	; (8007d30 <_strerror_r+0x39c>)
 8007bdc:	e773      	b.n	8007ac6 <_strerror_r+0x132>
 8007bde:	4b55      	ldr	r3, [pc, #340]	; (8007d34 <_strerror_r+0x3a0>)
 8007be0:	e771      	b.n	8007ac6 <_strerror_r+0x132>
 8007be2:	4b55      	ldr	r3, [pc, #340]	; (8007d38 <_strerror_r+0x3a4>)
 8007be4:	e76f      	b.n	8007ac6 <_strerror_r+0x132>
 8007be6:	4b55      	ldr	r3, [pc, #340]	; (8007d3c <_strerror_r+0x3a8>)
 8007be8:	e76d      	b.n	8007ac6 <_strerror_r+0x132>
 8007bea:	4b55      	ldr	r3, [pc, #340]	; (8007d40 <_strerror_r+0x3ac>)
 8007bec:	e76b      	b.n	8007ac6 <_strerror_r+0x132>
 8007bee:	4b55      	ldr	r3, [pc, #340]	; (8007d44 <_strerror_r+0x3b0>)
 8007bf0:	e769      	b.n	8007ac6 <_strerror_r+0x132>
 8007bf2:	4b55      	ldr	r3, [pc, #340]	; (8007d48 <_strerror_r+0x3b4>)
 8007bf4:	e767      	b.n	8007ac6 <_strerror_r+0x132>
 8007bf6:	4b55      	ldr	r3, [pc, #340]	; (8007d4c <_strerror_r+0x3b8>)
 8007bf8:	e765      	b.n	8007ac6 <_strerror_r+0x132>
 8007bfa:	4b55      	ldr	r3, [pc, #340]	; (8007d50 <_strerror_r+0x3bc>)
 8007bfc:	e763      	b.n	8007ac6 <_strerror_r+0x132>
 8007bfe:	4b55      	ldr	r3, [pc, #340]	; (8007d54 <_strerror_r+0x3c0>)
 8007c00:	e761      	b.n	8007ac6 <_strerror_r+0x132>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bf14      	ite	ne
 8007c06:	461a      	movne	r2, r3
 8007c08:	4622      	moveq	r2, r4
 8007c0a:	f000 f8c6 	bl	8007d9a <_user_strerror>
 8007c0e:	4b52      	ldr	r3, [pc, #328]	; (8007d58 <_strerror_r+0x3c4>)
 8007c10:	2800      	cmp	r0, #0
 8007c12:	bf18      	it	ne
 8007c14:	4603      	movne	r3, r0
 8007c16:	e756      	b.n	8007ac6 <_strerror_r+0x132>
 8007c18:	4b50      	ldr	r3, [pc, #320]	; (8007d5c <_strerror_r+0x3c8>)
 8007c1a:	e754      	b.n	8007ac6 <_strerror_r+0x132>
 8007c1c:	080095c1 	.word	0x080095c1
 8007c20:	080095cb 	.word	0x080095cb
 8007c24:	080095e5 	.word	0x080095e5
 8007c28:	080095f5 	.word	0x080095f5
 8007c2c:	0800960d 	.word	0x0800960d
 8007c30:	08009617 	.word	0x08009617
 8007c34:	08009631 	.word	0x08009631
 8007c38:	08009643 	.word	0x08009643
 8007c3c:	08009655 	.word	0x08009655
 8007c40:	0800966e 	.word	0x0800966e
 8007c44:	0800967e 	.word	0x0800967e
 8007c48:	0800968a 	.word	0x0800968a
 8007c4c:	080096a7 	.word	0x080096a7
 8007c50:	080096b9 	.word	0x080096b9
 8007c54:	080096ca 	.word	0x080096ca
 8007c58:	080096dc 	.word	0x080096dc
 8007c5c:	080096e8 	.word	0x080096e8
 8007c60:	08009700 	.word	0x08009700
 8007c64:	0800970c 	.word	0x0800970c
 8007c68:	0800971e 	.word	0x0800971e
 8007c6c:	0800972d 	.word	0x0800972d
 8007c70:	0800973d 	.word	0x0800973d
 8007c74:	0800974a 	.word	0x0800974a
 8007c78:	08009769 	.word	0x08009769
 8007c7c:	08009778 	.word	0x08009778
 8007c80:	08009789 	.word	0x08009789
 8007c84:	080097ad 	.word	0x080097ad
 8007c88:	080097cb 	.word	0x080097cb
 8007c8c:	080097e9 	.word	0x080097e9
 8007c90:	08009809 	.word	0x08009809
 8007c94:	08009820 	.word	0x08009820
 8007c98:	0800982f 	.word	0x0800982f
 8007c9c:	0800983e 	.word	0x0800983e
 8007ca0:	08009852 	.word	0x08009852
 8007ca4:	0800986a 	.word	0x0800986a
 8007ca8:	08009878 	.word	0x08009878
 8007cac:	08009885 	.word	0x08009885
 8007cb0:	0800989b 	.word	0x0800989b
 8007cb4:	080098aa 	.word	0x080098aa
 8007cb8:	080098b6 	.word	0x080098b6
 8007cbc:	080098e5 	.word	0x080098e5
 8007cc0:	080098f6 	.word	0x080098f6
 8007cc4:	08009911 	.word	0x08009911
 8007cc8:	08009924 	.word	0x08009924
 8007ccc:	0800993a 	.word	0x0800993a
 8007cd0:	08009943 	.word	0x08009943
 8007cd4:	0800995a 	.word	0x0800995a
 8007cd8:	08009962 	.word	0x08009962
 8007cdc:	0800996f 	.word	0x0800996f
 8007ce0:	08009984 	.word	0x08009984
 8007ce4:	08009998 	.word	0x08009998
 8007ce8:	080099b0 	.word	0x080099b0
 8007cec:	080099bf 	.word	0x080099bf
 8007cf0:	080099d0 	.word	0x080099d0
 8007cf4:	080099e3 	.word	0x080099e3
 8007cf8:	080099ef 	.word	0x080099ef
 8007cfc:	08009a08 	.word	0x08009a08
 8007d00:	08009a1c 	.word	0x08009a1c
 8007d04:	08009a37 	.word	0x08009a37
 8007d08:	08009a4f 	.word	0x08009a4f
 8007d0c:	08009a69 	.word	0x08009a69
 8007d10:	08009a71 	.word	0x08009a71
 8007d14:	08009aa1 	.word	0x08009aa1
 8007d18:	08009ac0 	.word	0x08009ac0
 8007d1c:	08009adf 	.word	0x08009adf
 8007d20:	08009af6 	.word	0x08009af6
 8007d24:	08009b09 	.word	0x08009b09
 8007d28:	08009b22 	.word	0x08009b22
 8007d2c:	08009b39 	.word	0x08009b39
 8007d30:	08009b4f 	.word	0x08009b4f
 8007d34:	08009b70 	.word	0x08009b70
 8007d38:	08009b88 	.word	0x08009b88
 8007d3c:	08009ba4 	.word	0x08009ba4
 8007d40:	08009bb7 	.word	0x08009bb7
 8007d44:	08009bcd 	.word	0x08009bcd
 8007d48:	08009be1 	.word	0x08009be1
 8007d4c:	08009c03 	.word	0x08009c03
 8007d50:	08009c29 	.word	0x08009c29
 8007d54:	08009c3a 	.word	0x08009c3a
 8007d58:	080095c0 	.word	0x080095c0
 8007d5c:	08009c4f 	.word	0x08009c4f

08007d60 <strerror>:
 8007d60:	4601      	mov	r1, r0
 8007d62:	4803      	ldr	r0, [pc, #12]	; (8007d70 <strerror+0x10>)
 8007d64:	2300      	movs	r3, #0
 8007d66:	6800      	ldr	r0, [r0, #0]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	f7ff be13 	b.w	8007994 <_strerror_r>
 8007d6e:	bf00      	nop
 8007d70:	20000018 	.word	0x20000018

08007d74 <strncpy>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	3901      	subs	r1, #1
 8007d78:	4603      	mov	r3, r0
 8007d7a:	b132      	cbz	r2, 8007d8a <strncpy+0x16>
 8007d7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d80:	f803 4b01 	strb.w	r4, [r3], #1
 8007d84:	3a01      	subs	r2, #1
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	d1f7      	bne.n	8007d7a <strncpy+0x6>
 8007d8a:	441a      	add	r2, r3
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d100      	bne.n	8007d94 <strncpy+0x20>
 8007d92:	bd10      	pop	{r4, pc}
 8007d94:	f803 1b01 	strb.w	r1, [r3], #1
 8007d98:	e7f9      	b.n	8007d8e <strncpy+0x1a>

08007d9a <_user_strerror>:
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	4770      	bx	lr
	...

08007da0 <_write_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d07      	ldr	r5, [pc, #28]	; (8007dc0 <_write_r+0x20>)
 8007da4:	4604      	mov	r4, r0
 8007da6:	4608      	mov	r0, r1
 8007da8:	4611      	mov	r1, r2
 8007daa:	2200      	movs	r2, #0
 8007dac:	602a      	str	r2, [r5, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	f7fe ff45 	bl	8006c3e <_write>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_write_r+0x1e>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_write_r+0x1e>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	20004c78 	.word	0x20004c78

08007dc4 <_close_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d06      	ldr	r5, [pc, #24]	; (8007de0 <_close_r+0x1c>)
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4604      	mov	r4, r0
 8007dcc:	4608      	mov	r0, r1
 8007dce:	602b      	str	r3, [r5, #0]
 8007dd0:	f7fe ff66 	bl	8006ca0 <_close>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_close_r+0x1a>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_close_r+0x1a>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	20004c78 	.word	0x20004c78

08007de4 <fileno>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	4e1a      	ldr	r6, [pc, #104]	; (8007e50 <fileno+0x6c>)
 8007de8:	6835      	ldr	r5, [r6, #0]
 8007dea:	4604      	mov	r4, r0
 8007dec:	b125      	cbz	r5, 8007df8 <fileno+0x14>
 8007dee:	69ab      	ldr	r3, [r5, #24]
 8007df0:	b913      	cbnz	r3, 8007df8 <fileno+0x14>
 8007df2:	4628      	mov	r0, r5
 8007df4:	f7ff fa50 	bl	8007298 <__sinit>
 8007df8:	4b16      	ldr	r3, [pc, #88]	; (8007e54 <fileno+0x70>)
 8007dfa:	429c      	cmp	r4, r3
 8007dfc:	d118      	bne.n	8007e30 <fileno+0x4c>
 8007dfe:	686c      	ldr	r4, [r5, #4]
 8007e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e02:	07d8      	lsls	r0, r3, #31
 8007e04:	d405      	bmi.n	8007e12 <fileno+0x2e>
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	0599      	lsls	r1, r3, #22
 8007e0a:	d402      	bmi.n	8007e12 <fileno+0x2e>
 8007e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e0e:	f7ff fb22 	bl	8007456 <__retarget_lock_acquire_recursive>
 8007e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e16:	b1ab      	cbz	r3, 8007e44 <fileno+0x60>
 8007e18:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8007e1c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e1e:	07d2      	lsls	r2, r2, #31
 8007e20:	d404      	bmi.n	8007e2c <fileno+0x48>
 8007e22:	059b      	lsls	r3, r3, #22
 8007e24:	d402      	bmi.n	8007e2c <fileno+0x48>
 8007e26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e28:	f7ff fb16 	bl	8007458 <__retarget_lock_release_recursive>
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <fileno+0x74>)
 8007e32:	429c      	cmp	r4, r3
 8007e34:	d101      	bne.n	8007e3a <fileno+0x56>
 8007e36:	68ac      	ldr	r4, [r5, #8]
 8007e38:	e7e2      	b.n	8007e00 <fileno+0x1c>
 8007e3a:	4b08      	ldr	r3, [pc, #32]	; (8007e5c <fileno+0x78>)
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	bf08      	it	eq
 8007e40:	68ec      	ldreq	r4, [r5, #12]
 8007e42:	e7dd      	b.n	8007e00 <fileno+0x1c>
 8007e44:	6832      	ldr	r2, [r6, #0]
 8007e46:	2109      	movs	r1, #9
 8007e48:	6011      	str	r1, [r2, #0]
 8007e4a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007e4e:	e7e5      	b.n	8007e1c <fileno+0x38>
 8007e50:	20000018 	.word	0x20000018
 8007e54:	08009578 	.word	0x08009578
 8007e58:	08009598 	.word	0x08009598
 8007e5c:	08009558 	.word	0x08009558

08007e60 <_lseek_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4d07      	ldr	r5, [pc, #28]	; (8007e80 <_lseek_r+0x20>)
 8007e64:	4604      	mov	r4, r0
 8007e66:	4608      	mov	r0, r1
 8007e68:	4611      	mov	r1, r2
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	602a      	str	r2, [r5, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f7fe fed3 	bl	8006c1a <_lseek>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d102      	bne.n	8007e7e <_lseek_r+0x1e>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	b103      	cbz	r3, 8007e7e <_lseek_r+0x1e>
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	20004c78 	.word	0x20004c78

08007e84 <__malloc_lock>:
 8007e84:	4801      	ldr	r0, [pc, #4]	; (8007e8c <__malloc_lock+0x8>)
 8007e86:	f7ff bae6 	b.w	8007456 <__retarget_lock_acquire_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	20004c6c 	.word	0x20004c6c

08007e90 <__malloc_unlock>:
 8007e90:	4801      	ldr	r0, [pc, #4]	; (8007e98 <__malloc_unlock+0x8>)
 8007e92:	f7ff bae1 	b.w	8007458 <__retarget_lock_release_recursive>
 8007e96:	bf00      	nop
 8007e98:	20004c6c 	.word	0x20004c6c

08007e9c <__sfputc_r>:
 8007e9c:	6893      	ldr	r3, [r2, #8]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	b410      	push	{r4}
 8007ea4:	6093      	str	r3, [r2, #8]
 8007ea6:	da08      	bge.n	8007eba <__sfputc_r+0x1e>
 8007ea8:	6994      	ldr	r4, [r2, #24]
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	db01      	blt.n	8007eb2 <__sfputc_r+0x16>
 8007eae:	290a      	cmp	r1, #10
 8007eb0:	d103      	bne.n	8007eba <__sfputc_r+0x1e>
 8007eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb6:	f001 b8ef 	b.w	8009098 <__swbuf_r>
 8007eba:	6813      	ldr	r3, [r2, #0]
 8007ebc:	1c58      	adds	r0, r3, #1
 8007ebe:	6010      	str	r0, [r2, #0]
 8007ec0:	7019      	strb	r1, [r3, #0]
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <__sfputs_r>:
 8007eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ecc:	4606      	mov	r6, r0
 8007ece:	460f      	mov	r7, r1
 8007ed0:	4614      	mov	r4, r2
 8007ed2:	18d5      	adds	r5, r2, r3
 8007ed4:	42ac      	cmp	r4, r5
 8007ed6:	d101      	bne.n	8007edc <__sfputs_r+0x12>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e007      	b.n	8007eec <__sfputs_r+0x22>
 8007edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee0:	463a      	mov	r2, r7
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7ff ffda 	bl	8007e9c <__sfputc_r>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	d1f3      	bne.n	8007ed4 <__sfputs_r+0xa>
 8007eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ef0 <_vfiprintf_r>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	460d      	mov	r5, r1
 8007ef6:	b09d      	sub	sp, #116	; 0x74
 8007ef8:	4614      	mov	r4, r2
 8007efa:	4698      	mov	r8, r3
 8007efc:	4606      	mov	r6, r0
 8007efe:	b118      	cbz	r0, 8007f08 <_vfiprintf_r+0x18>
 8007f00:	6983      	ldr	r3, [r0, #24]
 8007f02:	b90b      	cbnz	r3, 8007f08 <_vfiprintf_r+0x18>
 8007f04:	f7ff f9c8 	bl	8007298 <__sinit>
 8007f08:	4b89      	ldr	r3, [pc, #548]	; (8008130 <_vfiprintf_r+0x240>)
 8007f0a:	429d      	cmp	r5, r3
 8007f0c:	d11b      	bne.n	8007f46 <_vfiprintf_r+0x56>
 8007f0e:	6875      	ldr	r5, [r6, #4]
 8007f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f12:	07d9      	lsls	r1, r3, #31
 8007f14:	d405      	bmi.n	8007f22 <_vfiprintf_r+0x32>
 8007f16:	89ab      	ldrh	r3, [r5, #12]
 8007f18:	059a      	lsls	r2, r3, #22
 8007f1a:	d402      	bmi.n	8007f22 <_vfiprintf_r+0x32>
 8007f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f1e:	f7ff fa9a 	bl	8007456 <__retarget_lock_acquire_recursive>
 8007f22:	89ab      	ldrh	r3, [r5, #12]
 8007f24:	071b      	lsls	r3, r3, #28
 8007f26:	d501      	bpl.n	8007f2c <_vfiprintf_r+0x3c>
 8007f28:	692b      	ldr	r3, [r5, #16]
 8007f2a:	b9eb      	cbnz	r3, 8007f68 <_vfiprintf_r+0x78>
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f001 f904 	bl	800913c <__swsetup_r>
 8007f34:	b1c0      	cbz	r0, 8007f68 <_vfiprintf_r+0x78>
 8007f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f38:	07dc      	lsls	r4, r3, #31
 8007f3a:	d50e      	bpl.n	8007f5a <_vfiprintf_r+0x6a>
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f40:	b01d      	add	sp, #116	; 0x74
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	4b7b      	ldr	r3, [pc, #492]	; (8008134 <_vfiprintf_r+0x244>)
 8007f48:	429d      	cmp	r5, r3
 8007f4a:	d101      	bne.n	8007f50 <_vfiprintf_r+0x60>
 8007f4c:	68b5      	ldr	r5, [r6, #8]
 8007f4e:	e7df      	b.n	8007f10 <_vfiprintf_r+0x20>
 8007f50:	4b79      	ldr	r3, [pc, #484]	; (8008138 <_vfiprintf_r+0x248>)
 8007f52:	429d      	cmp	r5, r3
 8007f54:	bf08      	it	eq
 8007f56:	68f5      	ldreq	r5, [r6, #12]
 8007f58:	e7da      	b.n	8007f10 <_vfiprintf_r+0x20>
 8007f5a:	89ab      	ldrh	r3, [r5, #12]
 8007f5c:	0598      	lsls	r0, r3, #22
 8007f5e:	d4ed      	bmi.n	8007f3c <_vfiprintf_r+0x4c>
 8007f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f62:	f7ff fa79 	bl	8007458 <__retarget_lock_release_recursive>
 8007f66:	e7e9      	b.n	8007f3c <_vfiprintf_r+0x4c>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f76:	2330      	movs	r3, #48	; 0x30
 8007f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800813c <_vfiprintf_r+0x24c>
 8007f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f80:	f04f 0901 	mov.w	r9, #1
 8007f84:	4623      	mov	r3, r4
 8007f86:	469a      	mov	sl, r3
 8007f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f8c:	b10a      	cbz	r2, 8007f92 <_vfiprintf_r+0xa2>
 8007f8e:	2a25      	cmp	r2, #37	; 0x25
 8007f90:	d1f9      	bne.n	8007f86 <_vfiprintf_r+0x96>
 8007f92:	ebba 0b04 	subs.w	fp, sl, r4
 8007f96:	d00b      	beq.n	8007fb0 <_vfiprintf_r+0xc0>
 8007f98:	465b      	mov	r3, fp
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f7ff ff93 	bl	8007eca <__sfputs_r>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f000 80aa 	beq.w	80080fe <_vfiprintf_r+0x20e>
 8007faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fac:	445a      	add	r2, fp
 8007fae:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 80a2 	beq.w	80080fe <_vfiprintf_r+0x20e>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fc4:	f10a 0a01 	add.w	sl, sl, #1
 8007fc8:	9304      	str	r3, [sp, #16]
 8007fca:	9307      	str	r3, [sp, #28]
 8007fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8007fd2:	4654      	mov	r4, sl
 8007fd4:	2205      	movs	r2, #5
 8007fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fda:	4858      	ldr	r0, [pc, #352]	; (800813c <_vfiprintf_r+0x24c>)
 8007fdc:	f7f8 f918 	bl	8000210 <memchr>
 8007fe0:	9a04      	ldr	r2, [sp, #16]
 8007fe2:	b9d8      	cbnz	r0, 800801c <_vfiprintf_r+0x12c>
 8007fe4:	06d1      	lsls	r1, r2, #27
 8007fe6:	bf44      	itt	mi
 8007fe8:	2320      	movmi	r3, #32
 8007fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fee:	0713      	lsls	r3, r2, #28
 8007ff0:	bf44      	itt	mi
 8007ff2:	232b      	movmi	r3, #43	; 0x2b
 8007ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffe:	d015      	beq.n	800802c <_vfiprintf_r+0x13c>
 8008000:	9a07      	ldr	r2, [sp, #28]
 8008002:	4654      	mov	r4, sl
 8008004:	2000      	movs	r0, #0
 8008006:	f04f 0c0a 	mov.w	ip, #10
 800800a:	4621      	mov	r1, r4
 800800c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008010:	3b30      	subs	r3, #48	; 0x30
 8008012:	2b09      	cmp	r3, #9
 8008014:	d94e      	bls.n	80080b4 <_vfiprintf_r+0x1c4>
 8008016:	b1b0      	cbz	r0, 8008046 <_vfiprintf_r+0x156>
 8008018:	9207      	str	r2, [sp, #28]
 800801a:	e014      	b.n	8008046 <_vfiprintf_r+0x156>
 800801c:	eba0 0308 	sub.w	r3, r0, r8
 8008020:	fa09 f303 	lsl.w	r3, r9, r3
 8008024:	4313      	orrs	r3, r2
 8008026:	9304      	str	r3, [sp, #16]
 8008028:	46a2      	mov	sl, r4
 800802a:	e7d2      	b.n	8007fd2 <_vfiprintf_r+0xe2>
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	1d19      	adds	r1, r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	9103      	str	r1, [sp, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	bfbb      	ittet	lt
 8008038:	425b      	neglt	r3, r3
 800803a:	f042 0202 	orrlt.w	r2, r2, #2
 800803e:	9307      	strge	r3, [sp, #28]
 8008040:	9307      	strlt	r3, [sp, #28]
 8008042:	bfb8      	it	lt
 8008044:	9204      	strlt	r2, [sp, #16]
 8008046:	7823      	ldrb	r3, [r4, #0]
 8008048:	2b2e      	cmp	r3, #46	; 0x2e
 800804a:	d10c      	bne.n	8008066 <_vfiprintf_r+0x176>
 800804c:	7863      	ldrb	r3, [r4, #1]
 800804e:	2b2a      	cmp	r3, #42	; 0x2a
 8008050:	d135      	bne.n	80080be <_vfiprintf_r+0x1ce>
 8008052:	9b03      	ldr	r3, [sp, #12]
 8008054:	1d1a      	adds	r2, r3, #4
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	9203      	str	r2, [sp, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	bfb8      	it	lt
 800805e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008062:	3402      	adds	r4, #2
 8008064:	9305      	str	r3, [sp, #20]
 8008066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800814c <_vfiprintf_r+0x25c>
 800806a:	7821      	ldrb	r1, [r4, #0]
 800806c:	2203      	movs	r2, #3
 800806e:	4650      	mov	r0, sl
 8008070:	f7f8 f8ce 	bl	8000210 <memchr>
 8008074:	b140      	cbz	r0, 8008088 <_vfiprintf_r+0x198>
 8008076:	2340      	movs	r3, #64	; 0x40
 8008078:	eba0 000a 	sub.w	r0, r0, sl
 800807c:	fa03 f000 	lsl.w	r0, r3, r0
 8008080:	9b04      	ldr	r3, [sp, #16]
 8008082:	4303      	orrs	r3, r0
 8008084:	3401      	adds	r4, #1
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808c:	482c      	ldr	r0, [pc, #176]	; (8008140 <_vfiprintf_r+0x250>)
 800808e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008092:	2206      	movs	r2, #6
 8008094:	f7f8 f8bc 	bl	8000210 <memchr>
 8008098:	2800      	cmp	r0, #0
 800809a:	d03f      	beq.n	800811c <_vfiprintf_r+0x22c>
 800809c:	4b29      	ldr	r3, [pc, #164]	; (8008144 <_vfiprintf_r+0x254>)
 800809e:	bb1b      	cbnz	r3, 80080e8 <_vfiprintf_r+0x1f8>
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	3307      	adds	r3, #7
 80080a4:	f023 0307 	bic.w	r3, r3, #7
 80080a8:	3308      	adds	r3, #8
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ae:	443b      	add	r3, r7
 80080b0:	9309      	str	r3, [sp, #36]	; 0x24
 80080b2:	e767      	b.n	8007f84 <_vfiprintf_r+0x94>
 80080b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080b8:	460c      	mov	r4, r1
 80080ba:	2001      	movs	r0, #1
 80080bc:	e7a5      	b.n	800800a <_vfiprintf_r+0x11a>
 80080be:	2300      	movs	r3, #0
 80080c0:	3401      	adds	r4, #1
 80080c2:	9305      	str	r3, [sp, #20]
 80080c4:	4619      	mov	r1, r3
 80080c6:	f04f 0c0a 	mov.w	ip, #10
 80080ca:	4620      	mov	r0, r4
 80080cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080d0:	3a30      	subs	r2, #48	; 0x30
 80080d2:	2a09      	cmp	r2, #9
 80080d4:	d903      	bls.n	80080de <_vfiprintf_r+0x1ee>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0c5      	beq.n	8008066 <_vfiprintf_r+0x176>
 80080da:	9105      	str	r1, [sp, #20]
 80080dc:	e7c3      	b.n	8008066 <_vfiprintf_r+0x176>
 80080de:	fb0c 2101 	mla	r1, ip, r1, r2
 80080e2:	4604      	mov	r4, r0
 80080e4:	2301      	movs	r3, #1
 80080e6:	e7f0      	b.n	80080ca <_vfiprintf_r+0x1da>
 80080e8:	ab03      	add	r3, sp, #12
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	462a      	mov	r2, r5
 80080ee:	4b16      	ldr	r3, [pc, #88]	; (8008148 <_vfiprintf_r+0x258>)
 80080f0:	a904      	add	r1, sp, #16
 80080f2:	4630      	mov	r0, r6
 80080f4:	f3af 8000 	nop.w
 80080f8:	4607      	mov	r7, r0
 80080fa:	1c78      	adds	r0, r7, #1
 80080fc:	d1d6      	bne.n	80080ac <_vfiprintf_r+0x1bc>
 80080fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008100:	07d9      	lsls	r1, r3, #31
 8008102:	d405      	bmi.n	8008110 <_vfiprintf_r+0x220>
 8008104:	89ab      	ldrh	r3, [r5, #12]
 8008106:	059a      	lsls	r2, r3, #22
 8008108:	d402      	bmi.n	8008110 <_vfiprintf_r+0x220>
 800810a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800810c:	f7ff f9a4 	bl	8007458 <__retarget_lock_release_recursive>
 8008110:	89ab      	ldrh	r3, [r5, #12]
 8008112:	065b      	lsls	r3, r3, #25
 8008114:	f53f af12 	bmi.w	8007f3c <_vfiprintf_r+0x4c>
 8008118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800811a:	e711      	b.n	8007f40 <_vfiprintf_r+0x50>
 800811c:	ab03      	add	r3, sp, #12
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	462a      	mov	r2, r5
 8008122:	4b09      	ldr	r3, [pc, #36]	; (8008148 <_vfiprintf_r+0x258>)
 8008124:	a904      	add	r1, sp, #16
 8008126:	4630      	mov	r0, r6
 8008128:	f000 f880 	bl	800822c <_printf_i>
 800812c:	e7e4      	b.n	80080f8 <_vfiprintf_r+0x208>
 800812e:	bf00      	nop
 8008130:	08009578 	.word	0x08009578
 8008134:	08009598 	.word	0x08009598
 8008138:	08009558 	.word	0x08009558
 800813c:	08009c57 	.word	0x08009c57
 8008140:	08009c61 	.word	0x08009c61
 8008144:	00000000 	.word	0x00000000
 8008148:	08007ecb 	.word	0x08007ecb
 800814c:	08009c5d 	.word	0x08009c5d

08008150 <_printf_common>:
 8008150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008154:	4616      	mov	r6, r2
 8008156:	4699      	mov	r9, r3
 8008158:	688a      	ldr	r2, [r1, #8]
 800815a:	690b      	ldr	r3, [r1, #16]
 800815c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008160:	4293      	cmp	r3, r2
 8008162:	bfb8      	it	lt
 8008164:	4613      	movlt	r3, r2
 8008166:	6033      	str	r3, [r6, #0]
 8008168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800816c:	4607      	mov	r7, r0
 800816e:	460c      	mov	r4, r1
 8008170:	b10a      	cbz	r2, 8008176 <_printf_common+0x26>
 8008172:	3301      	adds	r3, #1
 8008174:	6033      	str	r3, [r6, #0]
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	0699      	lsls	r1, r3, #26
 800817a:	bf42      	ittt	mi
 800817c:	6833      	ldrmi	r3, [r6, #0]
 800817e:	3302      	addmi	r3, #2
 8008180:	6033      	strmi	r3, [r6, #0]
 8008182:	6825      	ldr	r5, [r4, #0]
 8008184:	f015 0506 	ands.w	r5, r5, #6
 8008188:	d106      	bne.n	8008198 <_printf_common+0x48>
 800818a:	f104 0a19 	add.w	sl, r4, #25
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	6832      	ldr	r2, [r6, #0]
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	42ab      	cmp	r3, r5
 8008196:	dc26      	bgt.n	80081e6 <_printf_common+0x96>
 8008198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800819c:	1e13      	subs	r3, r2, #0
 800819e:	6822      	ldr	r2, [r4, #0]
 80081a0:	bf18      	it	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	0692      	lsls	r2, r2, #26
 80081a6:	d42b      	bmi.n	8008200 <_printf_common+0xb0>
 80081a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ac:	4649      	mov	r1, r9
 80081ae:	4638      	mov	r0, r7
 80081b0:	47c0      	blx	r8
 80081b2:	3001      	adds	r0, #1
 80081b4:	d01e      	beq.n	80081f4 <_printf_common+0xa4>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	68e5      	ldr	r5, [r4, #12]
 80081ba:	6832      	ldr	r2, [r6, #0]
 80081bc:	f003 0306 	and.w	r3, r3, #6
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	bf08      	it	eq
 80081c4:	1aad      	subeq	r5, r5, r2
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	6922      	ldr	r2, [r4, #16]
 80081ca:	bf0c      	ite	eq
 80081cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081d0:	2500      	movne	r5, #0
 80081d2:	4293      	cmp	r3, r2
 80081d4:	bfc4      	itt	gt
 80081d6:	1a9b      	subgt	r3, r3, r2
 80081d8:	18ed      	addgt	r5, r5, r3
 80081da:	2600      	movs	r6, #0
 80081dc:	341a      	adds	r4, #26
 80081de:	42b5      	cmp	r5, r6
 80081e0:	d11a      	bne.n	8008218 <_printf_common+0xc8>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e008      	b.n	80081f8 <_printf_common+0xa8>
 80081e6:	2301      	movs	r3, #1
 80081e8:	4652      	mov	r2, sl
 80081ea:	4649      	mov	r1, r9
 80081ec:	4638      	mov	r0, r7
 80081ee:	47c0      	blx	r8
 80081f0:	3001      	adds	r0, #1
 80081f2:	d103      	bne.n	80081fc <_printf_common+0xac>
 80081f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fc:	3501      	adds	r5, #1
 80081fe:	e7c6      	b.n	800818e <_printf_common+0x3e>
 8008200:	18e1      	adds	r1, r4, r3
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	2030      	movs	r0, #48	; 0x30
 8008206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800820a:	4422      	add	r2, r4
 800820c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008214:	3302      	adds	r3, #2
 8008216:	e7c7      	b.n	80081a8 <_printf_common+0x58>
 8008218:	2301      	movs	r3, #1
 800821a:	4622      	mov	r2, r4
 800821c:	4649      	mov	r1, r9
 800821e:	4638      	mov	r0, r7
 8008220:	47c0      	blx	r8
 8008222:	3001      	adds	r0, #1
 8008224:	d0e6      	beq.n	80081f4 <_printf_common+0xa4>
 8008226:	3601      	adds	r6, #1
 8008228:	e7d9      	b.n	80081de <_printf_common+0x8e>
	...

0800822c <_printf_i>:
 800822c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008230:	7e0f      	ldrb	r7, [r1, #24]
 8008232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008234:	2f78      	cmp	r7, #120	; 0x78
 8008236:	4691      	mov	r9, r2
 8008238:	4680      	mov	r8, r0
 800823a:	460c      	mov	r4, r1
 800823c:	469a      	mov	sl, r3
 800823e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008242:	d807      	bhi.n	8008254 <_printf_i+0x28>
 8008244:	2f62      	cmp	r7, #98	; 0x62
 8008246:	d80a      	bhi.n	800825e <_printf_i+0x32>
 8008248:	2f00      	cmp	r7, #0
 800824a:	f000 80d8 	beq.w	80083fe <_printf_i+0x1d2>
 800824e:	2f58      	cmp	r7, #88	; 0x58
 8008250:	f000 80a3 	beq.w	800839a <_printf_i+0x16e>
 8008254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800825c:	e03a      	b.n	80082d4 <_printf_i+0xa8>
 800825e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008262:	2b15      	cmp	r3, #21
 8008264:	d8f6      	bhi.n	8008254 <_printf_i+0x28>
 8008266:	a101      	add	r1, pc, #4	; (adr r1, 800826c <_printf_i+0x40>)
 8008268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800826c:	080082c5 	.word	0x080082c5
 8008270:	080082d9 	.word	0x080082d9
 8008274:	08008255 	.word	0x08008255
 8008278:	08008255 	.word	0x08008255
 800827c:	08008255 	.word	0x08008255
 8008280:	08008255 	.word	0x08008255
 8008284:	080082d9 	.word	0x080082d9
 8008288:	08008255 	.word	0x08008255
 800828c:	08008255 	.word	0x08008255
 8008290:	08008255 	.word	0x08008255
 8008294:	08008255 	.word	0x08008255
 8008298:	080083e5 	.word	0x080083e5
 800829c:	08008309 	.word	0x08008309
 80082a0:	080083c7 	.word	0x080083c7
 80082a4:	08008255 	.word	0x08008255
 80082a8:	08008255 	.word	0x08008255
 80082ac:	08008407 	.word	0x08008407
 80082b0:	08008255 	.word	0x08008255
 80082b4:	08008309 	.word	0x08008309
 80082b8:	08008255 	.word	0x08008255
 80082bc:	08008255 	.word	0x08008255
 80082c0:	080083cf 	.word	0x080083cf
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	602a      	str	r2, [r5, #0]
 80082cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082d4:	2301      	movs	r3, #1
 80082d6:	e0a3      	b.n	8008420 <_printf_i+0x1f4>
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	6829      	ldr	r1, [r5, #0]
 80082dc:	0606      	lsls	r6, r0, #24
 80082de:	f101 0304 	add.w	r3, r1, #4
 80082e2:	d50a      	bpl.n	80082fa <_printf_i+0xce>
 80082e4:	680e      	ldr	r6, [r1, #0]
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	da03      	bge.n	80082f4 <_printf_i+0xc8>
 80082ec:	232d      	movs	r3, #45	; 0x2d
 80082ee:	4276      	negs	r6, r6
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f4:	485e      	ldr	r0, [pc, #376]	; (8008470 <_printf_i+0x244>)
 80082f6:	230a      	movs	r3, #10
 80082f8:	e019      	b.n	800832e <_printf_i+0x102>
 80082fa:	680e      	ldr	r6, [r1, #0]
 80082fc:	602b      	str	r3, [r5, #0]
 80082fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008302:	bf18      	it	ne
 8008304:	b236      	sxthne	r6, r6
 8008306:	e7ef      	b.n	80082e8 <_printf_i+0xbc>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	1d19      	adds	r1, r3, #4
 800830e:	6029      	str	r1, [r5, #0]
 8008310:	0601      	lsls	r1, r0, #24
 8008312:	d501      	bpl.n	8008318 <_printf_i+0xec>
 8008314:	681e      	ldr	r6, [r3, #0]
 8008316:	e002      	b.n	800831e <_printf_i+0xf2>
 8008318:	0646      	lsls	r6, r0, #25
 800831a:	d5fb      	bpl.n	8008314 <_printf_i+0xe8>
 800831c:	881e      	ldrh	r6, [r3, #0]
 800831e:	4854      	ldr	r0, [pc, #336]	; (8008470 <_printf_i+0x244>)
 8008320:	2f6f      	cmp	r7, #111	; 0x6f
 8008322:	bf0c      	ite	eq
 8008324:	2308      	moveq	r3, #8
 8008326:	230a      	movne	r3, #10
 8008328:	2100      	movs	r1, #0
 800832a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800832e:	6865      	ldr	r5, [r4, #4]
 8008330:	60a5      	str	r5, [r4, #8]
 8008332:	2d00      	cmp	r5, #0
 8008334:	bfa2      	ittt	ge
 8008336:	6821      	ldrge	r1, [r4, #0]
 8008338:	f021 0104 	bicge.w	r1, r1, #4
 800833c:	6021      	strge	r1, [r4, #0]
 800833e:	b90e      	cbnz	r6, 8008344 <_printf_i+0x118>
 8008340:	2d00      	cmp	r5, #0
 8008342:	d04d      	beq.n	80083e0 <_printf_i+0x1b4>
 8008344:	4615      	mov	r5, r2
 8008346:	fbb6 f1f3 	udiv	r1, r6, r3
 800834a:	fb03 6711 	mls	r7, r3, r1, r6
 800834e:	5dc7      	ldrb	r7, [r0, r7]
 8008350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008354:	4637      	mov	r7, r6
 8008356:	42bb      	cmp	r3, r7
 8008358:	460e      	mov	r6, r1
 800835a:	d9f4      	bls.n	8008346 <_printf_i+0x11a>
 800835c:	2b08      	cmp	r3, #8
 800835e:	d10b      	bne.n	8008378 <_printf_i+0x14c>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	07de      	lsls	r6, r3, #31
 8008364:	d508      	bpl.n	8008378 <_printf_i+0x14c>
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	6861      	ldr	r1, [r4, #4]
 800836a:	4299      	cmp	r1, r3
 800836c:	bfde      	ittt	le
 800836e:	2330      	movle	r3, #48	; 0x30
 8008370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008374:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008378:	1b52      	subs	r2, r2, r5
 800837a:	6122      	str	r2, [r4, #16]
 800837c:	f8cd a000 	str.w	sl, [sp]
 8008380:	464b      	mov	r3, r9
 8008382:	aa03      	add	r2, sp, #12
 8008384:	4621      	mov	r1, r4
 8008386:	4640      	mov	r0, r8
 8008388:	f7ff fee2 	bl	8008150 <_printf_common>
 800838c:	3001      	adds	r0, #1
 800838e:	d14c      	bne.n	800842a <_printf_i+0x1fe>
 8008390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008394:	b004      	add	sp, #16
 8008396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839a:	4835      	ldr	r0, [pc, #212]	; (8008470 <_printf_i+0x244>)
 800839c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083a0:	6829      	ldr	r1, [r5, #0]
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80083a8:	6029      	str	r1, [r5, #0]
 80083aa:	061d      	lsls	r5, r3, #24
 80083ac:	d514      	bpl.n	80083d8 <_printf_i+0x1ac>
 80083ae:	07df      	lsls	r7, r3, #31
 80083b0:	bf44      	itt	mi
 80083b2:	f043 0320 	orrmi.w	r3, r3, #32
 80083b6:	6023      	strmi	r3, [r4, #0]
 80083b8:	b91e      	cbnz	r6, 80083c2 <_printf_i+0x196>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	f023 0320 	bic.w	r3, r3, #32
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	2310      	movs	r3, #16
 80083c4:	e7b0      	b.n	8008328 <_printf_i+0xfc>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	f043 0320 	orr.w	r3, r3, #32
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	2378      	movs	r3, #120	; 0x78
 80083d0:	4828      	ldr	r0, [pc, #160]	; (8008474 <_printf_i+0x248>)
 80083d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083d6:	e7e3      	b.n	80083a0 <_printf_i+0x174>
 80083d8:	0659      	lsls	r1, r3, #25
 80083da:	bf48      	it	mi
 80083dc:	b2b6      	uxthmi	r6, r6
 80083de:	e7e6      	b.n	80083ae <_printf_i+0x182>
 80083e0:	4615      	mov	r5, r2
 80083e2:	e7bb      	b.n	800835c <_printf_i+0x130>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	6826      	ldr	r6, [r4, #0]
 80083e8:	6961      	ldr	r1, [r4, #20]
 80083ea:	1d18      	adds	r0, r3, #4
 80083ec:	6028      	str	r0, [r5, #0]
 80083ee:	0635      	lsls	r5, r6, #24
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	d501      	bpl.n	80083f8 <_printf_i+0x1cc>
 80083f4:	6019      	str	r1, [r3, #0]
 80083f6:	e002      	b.n	80083fe <_printf_i+0x1d2>
 80083f8:	0670      	lsls	r0, r6, #25
 80083fa:	d5fb      	bpl.n	80083f4 <_printf_i+0x1c8>
 80083fc:	8019      	strh	r1, [r3, #0]
 80083fe:	2300      	movs	r3, #0
 8008400:	6123      	str	r3, [r4, #16]
 8008402:	4615      	mov	r5, r2
 8008404:	e7ba      	b.n	800837c <_printf_i+0x150>
 8008406:	682b      	ldr	r3, [r5, #0]
 8008408:	1d1a      	adds	r2, r3, #4
 800840a:	602a      	str	r2, [r5, #0]
 800840c:	681d      	ldr	r5, [r3, #0]
 800840e:	6862      	ldr	r2, [r4, #4]
 8008410:	2100      	movs	r1, #0
 8008412:	4628      	mov	r0, r5
 8008414:	f7f7 fefc 	bl	8000210 <memchr>
 8008418:	b108      	cbz	r0, 800841e <_printf_i+0x1f2>
 800841a:	1b40      	subs	r0, r0, r5
 800841c:	6060      	str	r0, [r4, #4]
 800841e:	6863      	ldr	r3, [r4, #4]
 8008420:	6123      	str	r3, [r4, #16]
 8008422:	2300      	movs	r3, #0
 8008424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008428:	e7a8      	b.n	800837c <_printf_i+0x150>
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	462a      	mov	r2, r5
 800842e:	4649      	mov	r1, r9
 8008430:	4640      	mov	r0, r8
 8008432:	47d0      	blx	sl
 8008434:	3001      	adds	r0, #1
 8008436:	d0ab      	beq.n	8008390 <_printf_i+0x164>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	079b      	lsls	r3, r3, #30
 800843c:	d413      	bmi.n	8008466 <_printf_i+0x23a>
 800843e:	68e0      	ldr	r0, [r4, #12]
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	4298      	cmp	r0, r3
 8008444:	bfb8      	it	lt
 8008446:	4618      	movlt	r0, r3
 8008448:	e7a4      	b.n	8008394 <_printf_i+0x168>
 800844a:	2301      	movs	r3, #1
 800844c:	4632      	mov	r2, r6
 800844e:	4649      	mov	r1, r9
 8008450:	4640      	mov	r0, r8
 8008452:	47d0      	blx	sl
 8008454:	3001      	adds	r0, #1
 8008456:	d09b      	beq.n	8008390 <_printf_i+0x164>
 8008458:	3501      	adds	r5, #1
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	9903      	ldr	r1, [sp, #12]
 800845e:	1a5b      	subs	r3, r3, r1
 8008460:	42ab      	cmp	r3, r5
 8008462:	dcf2      	bgt.n	800844a <_printf_i+0x21e>
 8008464:	e7eb      	b.n	800843e <_printf_i+0x212>
 8008466:	2500      	movs	r5, #0
 8008468:	f104 0619 	add.w	r6, r4, #25
 800846c:	e7f5      	b.n	800845a <_printf_i+0x22e>
 800846e:	bf00      	nop
 8008470:	08009c68 	.word	0x08009c68
 8008474:	08009c79 	.word	0x08009c79

08008478 <__svfiscanf_r>:
 8008478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800847c:	461d      	mov	r5, r3
 800847e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008480:	07df      	lsls	r7, r3, #31
 8008482:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008486:	4606      	mov	r6, r0
 8008488:	460c      	mov	r4, r1
 800848a:	4692      	mov	sl, r2
 800848c:	d405      	bmi.n	800849a <__svfiscanf_r+0x22>
 800848e:	898b      	ldrh	r3, [r1, #12]
 8008490:	0598      	lsls	r0, r3, #22
 8008492:	d402      	bmi.n	800849a <__svfiscanf_r+0x22>
 8008494:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8008496:	f7fe ffde 	bl	8007456 <__retarget_lock_acquire_recursive>
 800849a:	2300      	movs	r3, #0
 800849c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80084a0:	4ba6      	ldr	r3, [pc, #664]	; (800873c <__svfiscanf_r+0x2c4>)
 80084a2:	93a0      	str	r3, [sp, #640]	; 0x280
 80084a4:	f10d 0804 	add.w	r8, sp, #4
 80084a8:	4ba5      	ldr	r3, [pc, #660]	; (8008740 <__svfiscanf_r+0x2c8>)
 80084aa:	4fa6      	ldr	r7, [pc, #664]	; (8008744 <__svfiscanf_r+0x2cc>)
 80084ac:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008748 <__svfiscanf_r+0x2d0>
 80084b0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80084b4:	93a1      	str	r3, [sp, #644]	; 0x284
 80084b6:	9500      	str	r5, [sp, #0]
 80084b8:	f89a 3000 	ldrb.w	r3, [sl]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 8173 	beq.w	80087a8 <__svfiscanf_r+0x330>
 80084c2:	5dd9      	ldrb	r1, [r3, r7]
 80084c4:	f011 0108 	ands.w	r1, r1, #8
 80084c8:	f10a 0501 	add.w	r5, sl, #1
 80084cc:	d019      	beq.n	8008502 <__svfiscanf_r+0x8a>
 80084ce:	6863      	ldr	r3, [r4, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	dd0f      	ble.n	80084f4 <__svfiscanf_r+0x7c>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	781a      	ldrb	r2, [r3, #0]
 80084d8:	5cba      	ldrb	r2, [r7, r2]
 80084da:	0711      	lsls	r1, r2, #28
 80084dc:	d401      	bmi.n	80084e2 <__svfiscanf_r+0x6a>
 80084de:	46aa      	mov	sl, r5
 80084e0:	e7ea      	b.n	80084b8 <__svfiscanf_r+0x40>
 80084e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80084e4:	3201      	adds	r2, #1
 80084e6:	9245      	str	r2, [sp, #276]	; 0x114
 80084e8:	6862      	ldr	r2, [r4, #4]
 80084ea:	3301      	adds	r3, #1
 80084ec:	3a01      	subs	r2, #1
 80084ee:	6062      	str	r2, [r4, #4]
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	e7ec      	b.n	80084ce <__svfiscanf_r+0x56>
 80084f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80084f6:	4621      	mov	r1, r4
 80084f8:	4630      	mov	r0, r6
 80084fa:	4798      	blx	r3
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d0e9      	beq.n	80084d4 <__svfiscanf_r+0x5c>
 8008500:	e7ed      	b.n	80084de <__svfiscanf_r+0x66>
 8008502:	2b25      	cmp	r3, #37	; 0x25
 8008504:	d012      	beq.n	800852c <__svfiscanf_r+0xb4>
 8008506:	469a      	mov	sl, r3
 8008508:	6863      	ldr	r3, [r4, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	f340 8095 	ble.w	800863a <__svfiscanf_r+0x1c2>
 8008510:	6822      	ldr	r2, [r4, #0]
 8008512:	7813      	ldrb	r3, [r2, #0]
 8008514:	4553      	cmp	r3, sl
 8008516:	f040 8147 	bne.w	80087a8 <__svfiscanf_r+0x330>
 800851a:	6863      	ldr	r3, [r4, #4]
 800851c:	3b01      	subs	r3, #1
 800851e:	6063      	str	r3, [r4, #4]
 8008520:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008522:	3201      	adds	r2, #1
 8008524:	3301      	adds	r3, #1
 8008526:	6022      	str	r2, [r4, #0]
 8008528:	9345      	str	r3, [sp, #276]	; 0x114
 800852a:	e7d8      	b.n	80084de <__svfiscanf_r+0x66>
 800852c:	9141      	str	r1, [sp, #260]	; 0x104
 800852e:	9143      	str	r1, [sp, #268]	; 0x10c
 8008530:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008534:	2b2a      	cmp	r3, #42	; 0x2a
 8008536:	bf02      	ittt	eq
 8008538:	2310      	moveq	r3, #16
 800853a:	9341      	streq	r3, [sp, #260]	; 0x104
 800853c:	f10a 0502 	addeq.w	r5, sl, #2
 8008540:	220a      	movs	r2, #10
 8008542:	46aa      	mov	sl, r5
 8008544:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008548:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800854c:	2b09      	cmp	r3, #9
 800854e:	d91e      	bls.n	800858e <__svfiscanf_r+0x116>
 8008550:	487d      	ldr	r0, [pc, #500]	; (8008748 <__svfiscanf_r+0x2d0>)
 8008552:	2203      	movs	r2, #3
 8008554:	f7f7 fe5c 	bl	8000210 <memchr>
 8008558:	b140      	cbz	r0, 800856c <__svfiscanf_r+0xf4>
 800855a:	2301      	movs	r3, #1
 800855c:	eba0 0009 	sub.w	r0, r0, r9
 8008560:	fa03 f000 	lsl.w	r0, r3, r0
 8008564:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008566:	4318      	orrs	r0, r3
 8008568:	9041      	str	r0, [sp, #260]	; 0x104
 800856a:	4655      	mov	r5, sl
 800856c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008570:	2b78      	cmp	r3, #120	; 0x78
 8008572:	d807      	bhi.n	8008584 <__svfiscanf_r+0x10c>
 8008574:	2b57      	cmp	r3, #87	; 0x57
 8008576:	d811      	bhi.n	800859c <__svfiscanf_r+0x124>
 8008578:	2b25      	cmp	r3, #37	; 0x25
 800857a:	d0c4      	beq.n	8008506 <__svfiscanf_r+0x8e>
 800857c:	d858      	bhi.n	8008630 <__svfiscanf_r+0x1b8>
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80c8 	beq.w	8008714 <__svfiscanf_r+0x29c>
 8008584:	2303      	movs	r3, #3
 8008586:	9347      	str	r3, [sp, #284]	; 0x11c
 8008588:	230a      	movs	r3, #10
 800858a:	9342      	str	r3, [sp, #264]	; 0x108
 800858c:	e07c      	b.n	8008688 <__svfiscanf_r+0x210>
 800858e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008590:	fb02 1103 	mla	r1, r2, r3, r1
 8008594:	3930      	subs	r1, #48	; 0x30
 8008596:	9143      	str	r1, [sp, #268]	; 0x10c
 8008598:	4655      	mov	r5, sl
 800859a:	e7d2      	b.n	8008542 <__svfiscanf_r+0xca>
 800859c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80085a0:	2a20      	cmp	r2, #32
 80085a2:	d8ef      	bhi.n	8008584 <__svfiscanf_r+0x10c>
 80085a4:	a101      	add	r1, pc, #4	; (adr r1, 80085ac <__svfiscanf_r+0x134>)
 80085a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	08008673 	.word	0x08008673
 80085b0:	08008585 	.word	0x08008585
 80085b4:	08008585 	.word	0x08008585
 80085b8:	080086d1 	.word	0x080086d1
 80085bc:	08008585 	.word	0x08008585
 80085c0:	08008585 	.word	0x08008585
 80085c4:	08008585 	.word	0x08008585
 80085c8:	08008585 	.word	0x08008585
 80085cc:	08008585 	.word	0x08008585
 80085d0:	08008585 	.word	0x08008585
 80085d4:	08008585 	.word	0x08008585
 80085d8:	080086e7 	.word	0x080086e7
 80085dc:	080086bd 	.word	0x080086bd
 80085e0:	08008637 	.word	0x08008637
 80085e4:	08008637 	.word	0x08008637
 80085e8:	08008637 	.word	0x08008637
 80085ec:	08008585 	.word	0x08008585
 80085f0:	080086c1 	.word	0x080086c1
 80085f4:	08008585 	.word	0x08008585
 80085f8:	08008585 	.word	0x08008585
 80085fc:	08008585 	.word	0x08008585
 8008600:	08008585 	.word	0x08008585
 8008604:	080086f7 	.word	0x080086f7
 8008608:	080086c9 	.word	0x080086c9
 800860c:	0800866b 	.word	0x0800866b
 8008610:	08008585 	.word	0x08008585
 8008614:	08008585 	.word	0x08008585
 8008618:	080086f3 	.word	0x080086f3
 800861c:	08008585 	.word	0x08008585
 8008620:	080086bd 	.word	0x080086bd
 8008624:	08008585 	.word	0x08008585
 8008628:	08008585 	.word	0x08008585
 800862c:	08008673 	.word	0x08008673
 8008630:	3b45      	subs	r3, #69	; 0x45
 8008632:	2b02      	cmp	r3, #2
 8008634:	d8a6      	bhi.n	8008584 <__svfiscanf_r+0x10c>
 8008636:	2305      	movs	r3, #5
 8008638:	e025      	b.n	8008686 <__svfiscanf_r+0x20e>
 800863a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800863c:	4621      	mov	r1, r4
 800863e:	4630      	mov	r0, r6
 8008640:	4798      	blx	r3
 8008642:	2800      	cmp	r0, #0
 8008644:	f43f af64 	beq.w	8008510 <__svfiscanf_r+0x98>
 8008648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800864a:	07da      	lsls	r2, r3, #31
 800864c:	f140 80a4 	bpl.w	8008798 <__svfiscanf_r+0x320>
 8008650:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008652:	2800      	cmp	r0, #0
 8008654:	d067      	beq.n	8008726 <__svfiscanf_r+0x2ae>
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	f013 0f40 	tst.w	r3, #64	; 0x40
 800865c:	bf18      	it	ne
 800865e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008662:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800866c:	f042 0220 	orr.w	r2, r2, #32
 8008670:	9241      	str	r2, [sp, #260]	; 0x104
 8008672:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008678:	9241      	str	r2, [sp, #260]	; 0x104
 800867a:	2210      	movs	r2, #16
 800867c:	2b6f      	cmp	r3, #111	; 0x6f
 800867e:	9242      	str	r2, [sp, #264]	; 0x108
 8008680:	bf34      	ite	cc
 8008682:	2303      	movcc	r3, #3
 8008684:	2304      	movcs	r3, #4
 8008686:	9347      	str	r3, [sp, #284]	; 0x11c
 8008688:	6863      	ldr	r3, [r4, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	dd4e      	ble.n	800872c <__svfiscanf_r+0x2b4>
 800868e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008690:	065b      	lsls	r3, r3, #25
 8008692:	d404      	bmi.n	800869e <__svfiscanf_r+0x226>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	781a      	ldrb	r2, [r3, #0]
 8008698:	5cba      	ldrb	r2, [r7, r2]
 800869a:	0710      	lsls	r0, r2, #28
 800869c:	d456      	bmi.n	800874c <__svfiscanf_r+0x2d4>
 800869e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	dc65      	bgt.n	8008770 <__svfiscanf_r+0x2f8>
 80086a4:	466b      	mov	r3, sp
 80086a6:	4622      	mov	r2, r4
 80086a8:	a941      	add	r1, sp, #260	; 0x104
 80086aa:	4630      	mov	r0, r6
 80086ac:	f000 f8b2 	bl	8008814 <_scanf_chars>
 80086b0:	2801      	cmp	r0, #1
 80086b2:	d079      	beq.n	80087a8 <__svfiscanf_r+0x330>
 80086b4:	2802      	cmp	r0, #2
 80086b6:	f47f af12 	bne.w	80084de <__svfiscanf_r+0x66>
 80086ba:	e7c5      	b.n	8008648 <__svfiscanf_r+0x1d0>
 80086bc:	220a      	movs	r2, #10
 80086be:	e7dd      	b.n	800867c <__svfiscanf_r+0x204>
 80086c0:	2300      	movs	r3, #0
 80086c2:	9342      	str	r3, [sp, #264]	; 0x108
 80086c4:	2303      	movs	r3, #3
 80086c6:	e7de      	b.n	8008686 <__svfiscanf_r+0x20e>
 80086c8:	2308      	movs	r3, #8
 80086ca:	9342      	str	r3, [sp, #264]	; 0x108
 80086cc:	2304      	movs	r3, #4
 80086ce:	e7da      	b.n	8008686 <__svfiscanf_r+0x20e>
 80086d0:	4629      	mov	r1, r5
 80086d2:	4640      	mov	r0, r8
 80086d4:	f000 fade 	bl	8008c94 <__sccl>
 80086d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80086da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086de:	9341      	str	r3, [sp, #260]	; 0x104
 80086e0:	4605      	mov	r5, r0
 80086e2:	2301      	movs	r3, #1
 80086e4:	e7cf      	b.n	8008686 <__svfiscanf_r+0x20e>
 80086e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80086e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ec:	9341      	str	r3, [sp, #260]	; 0x104
 80086ee:	2300      	movs	r3, #0
 80086f0:	e7c9      	b.n	8008686 <__svfiscanf_r+0x20e>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e7c7      	b.n	8008686 <__svfiscanf_r+0x20e>
 80086f6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80086f8:	06c3      	lsls	r3, r0, #27
 80086fa:	f53f aef0 	bmi.w	80084de <__svfiscanf_r+0x66>
 80086fe:	9b00      	ldr	r3, [sp, #0]
 8008700:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008702:	1d19      	adds	r1, r3, #4
 8008704:	9100      	str	r1, [sp, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f010 0f01 	tst.w	r0, #1
 800870c:	bf14      	ite	ne
 800870e:	801a      	strhne	r2, [r3, #0]
 8008710:	601a      	streq	r2, [r3, #0]
 8008712:	e6e4      	b.n	80084de <__svfiscanf_r+0x66>
 8008714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008716:	07d8      	lsls	r0, r3, #31
 8008718:	d405      	bmi.n	8008726 <__svfiscanf_r+0x2ae>
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	0599      	lsls	r1, r3, #22
 800871e:	d402      	bmi.n	8008726 <__svfiscanf_r+0x2ae>
 8008720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008722:	f7fe fe99 	bl	8007458 <__retarget_lock_release_recursive>
 8008726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800872a:	e79a      	b.n	8008662 <__svfiscanf_r+0x1ea>
 800872c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800872e:	4621      	mov	r1, r4
 8008730:	4630      	mov	r0, r6
 8008732:	4798      	blx	r3
 8008734:	2800      	cmp	r0, #0
 8008736:	d0aa      	beq.n	800868e <__svfiscanf_r+0x216>
 8008738:	e786      	b.n	8008648 <__svfiscanf_r+0x1d0>
 800873a:	bf00      	nop
 800873c:	08008f69 	.word	0x08008f69
 8008740:	08008b81 	.word	0x08008b81
 8008744:	08009ca6 	.word	0x08009ca6
 8008748:	08009c5d 	.word	0x08009c5d
 800874c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800874e:	3201      	adds	r2, #1
 8008750:	9245      	str	r2, [sp, #276]	; 0x114
 8008752:	6862      	ldr	r2, [r4, #4]
 8008754:	3a01      	subs	r2, #1
 8008756:	2a00      	cmp	r2, #0
 8008758:	6062      	str	r2, [r4, #4]
 800875a:	dd02      	ble.n	8008762 <__svfiscanf_r+0x2ea>
 800875c:	3301      	adds	r3, #1
 800875e:	6023      	str	r3, [r4, #0]
 8008760:	e798      	b.n	8008694 <__svfiscanf_r+0x21c>
 8008762:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008764:	4621      	mov	r1, r4
 8008766:	4630      	mov	r0, r6
 8008768:	4798      	blx	r3
 800876a:	2800      	cmp	r0, #0
 800876c:	d092      	beq.n	8008694 <__svfiscanf_r+0x21c>
 800876e:	e76b      	b.n	8008648 <__svfiscanf_r+0x1d0>
 8008770:	2b04      	cmp	r3, #4
 8008772:	dc06      	bgt.n	8008782 <__svfiscanf_r+0x30a>
 8008774:	466b      	mov	r3, sp
 8008776:	4622      	mov	r2, r4
 8008778:	a941      	add	r1, sp, #260	; 0x104
 800877a:	4630      	mov	r0, r6
 800877c:	f000 f8a4 	bl	80088c8 <_scanf_i>
 8008780:	e796      	b.n	80086b0 <__svfiscanf_r+0x238>
 8008782:	4b0f      	ldr	r3, [pc, #60]	; (80087c0 <__svfiscanf_r+0x348>)
 8008784:	2b00      	cmp	r3, #0
 8008786:	f43f aeaa 	beq.w	80084de <__svfiscanf_r+0x66>
 800878a:	466b      	mov	r3, sp
 800878c:	4622      	mov	r2, r4
 800878e:	a941      	add	r1, sp, #260	; 0x104
 8008790:	4630      	mov	r0, r6
 8008792:	f3af 8000 	nop.w
 8008796:	e78b      	b.n	80086b0 <__svfiscanf_r+0x238>
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	0599      	lsls	r1, r3, #22
 800879c:	f53f af58 	bmi.w	8008650 <__svfiscanf_r+0x1d8>
 80087a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087a2:	f7fe fe59 	bl	8007458 <__retarget_lock_release_recursive>
 80087a6:	e753      	b.n	8008650 <__svfiscanf_r+0x1d8>
 80087a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087aa:	07da      	lsls	r2, r3, #31
 80087ac:	d405      	bmi.n	80087ba <__svfiscanf_r+0x342>
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	059b      	lsls	r3, r3, #22
 80087b2:	d402      	bmi.n	80087ba <__svfiscanf_r+0x342>
 80087b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087b6:	f7fe fe4f 	bl	8007458 <__retarget_lock_release_recursive>
 80087ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 80087bc:	e751      	b.n	8008662 <__svfiscanf_r+0x1ea>
 80087be:	bf00      	nop
 80087c0:	00000000 	.word	0x00000000

080087c4 <_vfiscanf_r>:
 80087c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087c6:	460c      	mov	r4, r1
 80087c8:	4605      	mov	r5, r0
 80087ca:	b138      	cbz	r0, 80087dc <_vfiscanf_r+0x18>
 80087cc:	6981      	ldr	r1, [r0, #24]
 80087ce:	b929      	cbnz	r1, 80087dc <_vfiscanf_r+0x18>
 80087d0:	e9cd 2300 	strd	r2, r3, [sp]
 80087d4:	f7fe fd60 	bl	8007298 <__sinit>
 80087d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087dc:	490a      	ldr	r1, [pc, #40]	; (8008808 <_vfiscanf_r+0x44>)
 80087de:	428c      	cmp	r4, r1
 80087e0:	d107      	bne.n	80087f2 <_vfiscanf_r+0x2e>
 80087e2:	686c      	ldr	r4, [r5, #4]
 80087e4:	4621      	mov	r1, r4
 80087e6:	4628      	mov	r0, r5
 80087e8:	b003      	add	sp, #12
 80087ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087ee:	f7ff be43 	b.w	8008478 <__svfiscanf_r>
 80087f2:	4906      	ldr	r1, [pc, #24]	; (800880c <_vfiscanf_r+0x48>)
 80087f4:	428c      	cmp	r4, r1
 80087f6:	d101      	bne.n	80087fc <_vfiscanf_r+0x38>
 80087f8:	68ac      	ldr	r4, [r5, #8]
 80087fa:	e7f3      	b.n	80087e4 <_vfiscanf_r+0x20>
 80087fc:	4904      	ldr	r1, [pc, #16]	; (8008810 <_vfiscanf_r+0x4c>)
 80087fe:	428c      	cmp	r4, r1
 8008800:	bf08      	it	eq
 8008802:	68ec      	ldreq	r4, [r5, #12]
 8008804:	e7ee      	b.n	80087e4 <_vfiscanf_r+0x20>
 8008806:	bf00      	nop
 8008808:	08009578 	.word	0x08009578
 800880c:	08009598 	.word	0x08009598
 8008810:	08009558 	.word	0x08009558

08008814 <_scanf_chars>:
 8008814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008818:	4615      	mov	r5, r2
 800881a:	688a      	ldr	r2, [r1, #8]
 800881c:	4680      	mov	r8, r0
 800881e:	460c      	mov	r4, r1
 8008820:	b932      	cbnz	r2, 8008830 <_scanf_chars+0x1c>
 8008822:	698a      	ldr	r2, [r1, #24]
 8008824:	2a00      	cmp	r2, #0
 8008826:	bf0c      	ite	eq
 8008828:	2201      	moveq	r2, #1
 800882a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800882e:	608a      	str	r2, [r1, #8]
 8008830:	6822      	ldr	r2, [r4, #0]
 8008832:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80088c4 <_scanf_chars+0xb0>
 8008836:	06d1      	lsls	r1, r2, #27
 8008838:	bf5f      	itttt	pl
 800883a:	681a      	ldrpl	r2, [r3, #0]
 800883c:	1d11      	addpl	r1, r2, #4
 800883e:	6019      	strpl	r1, [r3, #0]
 8008840:	6816      	ldrpl	r6, [r2, #0]
 8008842:	2700      	movs	r7, #0
 8008844:	69a0      	ldr	r0, [r4, #24]
 8008846:	b188      	cbz	r0, 800886c <_scanf_chars+0x58>
 8008848:	2801      	cmp	r0, #1
 800884a:	d107      	bne.n	800885c <_scanf_chars+0x48>
 800884c:	682a      	ldr	r2, [r5, #0]
 800884e:	7811      	ldrb	r1, [r2, #0]
 8008850:	6962      	ldr	r2, [r4, #20]
 8008852:	5c52      	ldrb	r2, [r2, r1]
 8008854:	b952      	cbnz	r2, 800886c <_scanf_chars+0x58>
 8008856:	2f00      	cmp	r7, #0
 8008858:	d031      	beq.n	80088be <_scanf_chars+0xaa>
 800885a:	e022      	b.n	80088a2 <_scanf_chars+0x8e>
 800885c:	2802      	cmp	r0, #2
 800885e:	d120      	bne.n	80088a2 <_scanf_chars+0x8e>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008868:	071b      	lsls	r3, r3, #28
 800886a:	d41a      	bmi.n	80088a2 <_scanf_chars+0x8e>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	06da      	lsls	r2, r3, #27
 8008870:	bf5e      	ittt	pl
 8008872:	682b      	ldrpl	r3, [r5, #0]
 8008874:	781b      	ldrbpl	r3, [r3, #0]
 8008876:	f806 3b01 	strbpl.w	r3, [r6], #1
 800887a:	682a      	ldr	r2, [r5, #0]
 800887c:	686b      	ldr	r3, [r5, #4]
 800887e:	3201      	adds	r2, #1
 8008880:	602a      	str	r2, [r5, #0]
 8008882:	68a2      	ldr	r2, [r4, #8]
 8008884:	3b01      	subs	r3, #1
 8008886:	3a01      	subs	r2, #1
 8008888:	606b      	str	r3, [r5, #4]
 800888a:	3701      	adds	r7, #1
 800888c:	60a2      	str	r2, [r4, #8]
 800888e:	b142      	cbz	r2, 80088a2 <_scanf_chars+0x8e>
 8008890:	2b00      	cmp	r3, #0
 8008892:	dcd7      	bgt.n	8008844 <_scanf_chars+0x30>
 8008894:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008898:	4629      	mov	r1, r5
 800889a:	4640      	mov	r0, r8
 800889c:	4798      	blx	r3
 800889e:	2800      	cmp	r0, #0
 80088a0:	d0d0      	beq.n	8008844 <_scanf_chars+0x30>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	f013 0310 	ands.w	r3, r3, #16
 80088a8:	d105      	bne.n	80088b6 <_scanf_chars+0xa2>
 80088aa:	68e2      	ldr	r2, [r4, #12]
 80088ac:	3201      	adds	r2, #1
 80088ae:	60e2      	str	r2, [r4, #12]
 80088b0:	69a2      	ldr	r2, [r4, #24]
 80088b2:	b102      	cbz	r2, 80088b6 <_scanf_chars+0xa2>
 80088b4:	7033      	strb	r3, [r6, #0]
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	443b      	add	r3, r7
 80088ba:	6123      	str	r3, [r4, #16]
 80088bc:	2000      	movs	r0, #0
 80088be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c2:	bf00      	nop
 80088c4:	08009ca6 	.word	0x08009ca6

080088c8 <_scanf_i>:
 80088c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088cc:	4698      	mov	r8, r3
 80088ce:	4b76      	ldr	r3, [pc, #472]	; (8008aa8 <_scanf_i+0x1e0>)
 80088d0:	460c      	mov	r4, r1
 80088d2:	4682      	mov	sl, r0
 80088d4:	4616      	mov	r6, r2
 80088d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088da:	b087      	sub	sp, #28
 80088dc:	ab03      	add	r3, sp, #12
 80088de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80088e2:	4b72      	ldr	r3, [pc, #456]	; (8008aac <_scanf_i+0x1e4>)
 80088e4:	69a1      	ldr	r1, [r4, #24]
 80088e6:	4a72      	ldr	r2, [pc, #456]	; (8008ab0 <_scanf_i+0x1e8>)
 80088e8:	2903      	cmp	r1, #3
 80088ea:	bf18      	it	ne
 80088ec:	461a      	movne	r2, r3
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	9201      	str	r2, [sp, #4]
 80088f2:	1e5a      	subs	r2, r3, #1
 80088f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80088f8:	bf88      	it	hi
 80088fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80088fe:	4627      	mov	r7, r4
 8008900:	bf82      	ittt	hi
 8008902:	eb03 0905 	addhi.w	r9, r3, r5
 8008906:	f240 135d 	movwhi	r3, #349	; 0x15d
 800890a:	60a3      	strhi	r3, [r4, #8]
 800890c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008910:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008914:	bf98      	it	ls
 8008916:	f04f 0900 	movls.w	r9, #0
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	463d      	mov	r5, r7
 800891e:	f04f 0b00 	mov.w	fp, #0
 8008922:	6831      	ldr	r1, [r6, #0]
 8008924:	ab03      	add	r3, sp, #12
 8008926:	7809      	ldrb	r1, [r1, #0]
 8008928:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800892c:	2202      	movs	r2, #2
 800892e:	f7f7 fc6f 	bl	8000210 <memchr>
 8008932:	b328      	cbz	r0, 8008980 <_scanf_i+0xb8>
 8008934:	f1bb 0f01 	cmp.w	fp, #1
 8008938:	d159      	bne.n	80089ee <_scanf_i+0x126>
 800893a:	6862      	ldr	r2, [r4, #4]
 800893c:	b92a      	cbnz	r2, 800894a <_scanf_i+0x82>
 800893e:	6822      	ldr	r2, [r4, #0]
 8008940:	2308      	movs	r3, #8
 8008942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008946:	6063      	str	r3, [r4, #4]
 8008948:	6022      	str	r2, [r4, #0]
 800894a:	6822      	ldr	r2, [r4, #0]
 800894c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008950:	6022      	str	r2, [r4, #0]
 8008952:	68a2      	ldr	r2, [r4, #8]
 8008954:	1e51      	subs	r1, r2, #1
 8008956:	60a1      	str	r1, [r4, #8]
 8008958:	b192      	cbz	r2, 8008980 <_scanf_i+0xb8>
 800895a:	6832      	ldr	r2, [r6, #0]
 800895c:	1c51      	adds	r1, r2, #1
 800895e:	6031      	str	r1, [r6, #0]
 8008960:	7812      	ldrb	r2, [r2, #0]
 8008962:	f805 2b01 	strb.w	r2, [r5], #1
 8008966:	6872      	ldr	r2, [r6, #4]
 8008968:	3a01      	subs	r2, #1
 800896a:	2a00      	cmp	r2, #0
 800896c:	6072      	str	r2, [r6, #4]
 800896e:	dc07      	bgt.n	8008980 <_scanf_i+0xb8>
 8008970:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008974:	4631      	mov	r1, r6
 8008976:	4650      	mov	r0, sl
 8008978:	4790      	blx	r2
 800897a:	2800      	cmp	r0, #0
 800897c:	f040 8085 	bne.w	8008a8a <_scanf_i+0x1c2>
 8008980:	f10b 0b01 	add.w	fp, fp, #1
 8008984:	f1bb 0f03 	cmp.w	fp, #3
 8008988:	d1cb      	bne.n	8008922 <_scanf_i+0x5a>
 800898a:	6863      	ldr	r3, [r4, #4]
 800898c:	b90b      	cbnz	r3, 8008992 <_scanf_i+0xca>
 800898e:	230a      	movs	r3, #10
 8008990:	6063      	str	r3, [r4, #4]
 8008992:	6863      	ldr	r3, [r4, #4]
 8008994:	4947      	ldr	r1, [pc, #284]	; (8008ab4 <_scanf_i+0x1ec>)
 8008996:	6960      	ldr	r0, [r4, #20]
 8008998:	1ac9      	subs	r1, r1, r3
 800899a:	f000 f97b 	bl	8008c94 <__sccl>
 800899e:	f04f 0b00 	mov.w	fp, #0
 80089a2:	68a3      	ldr	r3, [r4, #8]
 80089a4:	6822      	ldr	r2, [r4, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d03d      	beq.n	8008a26 <_scanf_i+0x15e>
 80089aa:	6831      	ldr	r1, [r6, #0]
 80089ac:	6960      	ldr	r0, [r4, #20]
 80089ae:	f891 c000 	ldrb.w	ip, [r1]
 80089b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d035      	beq.n	8008a26 <_scanf_i+0x15e>
 80089ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80089be:	d124      	bne.n	8008a0a <_scanf_i+0x142>
 80089c0:	0510      	lsls	r0, r2, #20
 80089c2:	d522      	bpl.n	8008a0a <_scanf_i+0x142>
 80089c4:	f10b 0b01 	add.w	fp, fp, #1
 80089c8:	f1b9 0f00 	cmp.w	r9, #0
 80089cc:	d003      	beq.n	80089d6 <_scanf_i+0x10e>
 80089ce:	3301      	adds	r3, #1
 80089d0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80089d4:	60a3      	str	r3, [r4, #8]
 80089d6:	6873      	ldr	r3, [r6, #4]
 80089d8:	3b01      	subs	r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	6073      	str	r3, [r6, #4]
 80089de:	dd1b      	ble.n	8008a18 <_scanf_i+0x150>
 80089e0:	6833      	ldr	r3, [r6, #0]
 80089e2:	3301      	adds	r3, #1
 80089e4:	6033      	str	r3, [r6, #0]
 80089e6:	68a3      	ldr	r3, [r4, #8]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	60a3      	str	r3, [r4, #8]
 80089ec:	e7d9      	b.n	80089a2 <_scanf_i+0xda>
 80089ee:	f1bb 0f02 	cmp.w	fp, #2
 80089f2:	d1ae      	bne.n	8008952 <_scanf_i+0x8a>
 80089f4:	6822      	ldr	r2, [r4, #0]
 80089f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80089fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80089fe:	d1bf      	bne.n	8008980 <_scanf_i+0xb8>
 8008a00:	2310      	movs	r3, #16
 8008a02:	6063      	str	r3, [r4, #4]
 8008a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a08:	e7a2      	b.n	8008950 <_scanf_i+0x88>
 8008a0a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008a0e:	6022      	str	r2, [r4, #0]
 8008a10:	780b      	ldrb	r3, [r1, #0]
 8008a12:	f805 3b01 	strb.w	r3, [r5], #1
 8008a16:	e7de      	b.n	80089d6 <_scanf_i+0x10e>
 8008a18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4650      	mov	r0, sl
 8008a20:	4798      	blx	r3
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d0df      	beq.n	80089e6 <_scanf_i+0x11e>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	05db      	lsls	r3, r3, #23
 8008a2a:	d50d      	bpl.n	8008a48 <_scanf_i+0x180>
 8008a2c:	42bd      	cmp	r5, r7
 8008a2e:	d909      	bls.n	8008a44 <_scanf_i+0x17c>
 8008a30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008a34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a38:	4632      	mov	r2, r6
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	4798      	blx	r3
 8008a3e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008a42:	464d      	mov	r5, r9
 8008a44:	42bd      	cmp	r5, r7
 8008a46:	d02d      	beq.n	8008aa4 <_scanf_i+0x1dc>
 8008a48:	6822      	ldr	r2, [r4, #0]
 8008a4a:	f012 0210 	ands.w	r2, r2, #16
 8008a4e:	d113      	bne.n	8008a78 <_scanf_i+0x1b0>
 8008a50:	702a      	strb	r2, [r5, #0]
 8008a52:	6863      	ldr	r3, [r4, #4]
 8008a54:	9e01      	ldr	r6, [sp, #4]
 8008a56:	4639      	mov	r1, r7
 8008a58:	4650      	mov	r0, sl
 8008a5a:	47b0      	blx	r6
 8008a5c:	6821      	ldr	r1, [r4, #0]
 8008a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a62:	f011 0f20 	tst.w	r1, #32
 8008a66:	d013      	beq.n	8008a90 <_scanf_i+0x1c8>
 8008a68:	1d1a      	adds	r2, r3, #4
 8008a6a:	f8c8 2000 	str.w	r2, [r8]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6018      	str	r0, [r3, #0]
 8008a72:	68e3      	ldr	r3, [r4, #12]
 8008a74:	3301      	adds	r3, #1
 8008a76:	60e3      	str	r3, [r4, #12]
 8008a78:	1bed      	subs	r5, r5, r7
 8008a7a:	44ab      	add	fp, r5
 8008a7c:	6925      	ldr	r5, [r4, #16]
 8008a7e:	445d      	add	r5, fp
 8008a80:	6125      	str	r5, [r4, #16]
 8008a82:	2000      	movs	r0, #0
 8008a84:	b007      	add	sp, #28
 8008a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8a:	f04f 0b00 	mov.w	fp, #0
 8008a8e:	e7ca      	b.n	8008a26 <_scanf_i+0x15e>
 8008a90:	1d1a      	adds	r2, r3, #4
 8008a92:	f8c8 2000 	str.w	r2, [r8]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f011 0f01 	tst.w	r1, #1
 8008a9c:	bf14      	ite	ne
 8008a9e:	8018      	strhne	r0, [r3, #0]
 8008aa0:	6018      	streq	r0, [r3, #0]
 8008aa2:	e7e6      	b.n	8008a72 <_scanf_i+0x1aa>
 8008aa4:	2001      	movs	r0, #1
 8008aa6:	e7ed      	b.n	8008a84 <_scanf_i+0x1bc>
 8008aa8:	08009514 	.word	0x08009514
 8008aac:	08008ef1 	.word	0x08008ef1
 8008ab0:	08008e09 	.word	0x08008e09
 8008ab4:	08009ca3 	.word	0x08009ca3

08008ab8 <_putc_r>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	460d      	mov	r5, r1
 8008abc:	4614      	mov	r4, r2
 8008abe:	4606      	mov	r6, r0
 8008ac0:	b118      	cbz	r0, 8008aca <_putc_r+0x12>
 8008ac2:	6983      	ldr	r3, [r0, #24]
 8008ac4:	b90b      	cbnz	r3, 8008aca <_putc_r+0x12>
 8008ac6:	f7fe fbe7 	bl	8007298 <__sinit>
 8008aca:	4b1c      	ldr	r3, [pc, #112]	; (8008b3c <_putc_r+0x84>)
 8008acc:	429c      	cmp	r4, r3
 8008ace:	d124      	bne.n	8008b1a <_putc_r+0x62>
 8008ad0:	6874      	ldr	r4, [r6, #4]
 8008ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ad4:	07d8      	lsls	r0, r3, #31
 8008ad6:	d405      	bmi.n	8008ae4 <_putc_r+0x2c>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	0599      	lsls	r1, r3, #22
 8008adc:	d402      	bmi.n	8008ae4 <_putc_r+0x2c>
 8008ade:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ae0:	f7fe fcb9 	bl	8007456 <__retarget_lock_acquire_recursive>
 8008ae4:	68a3      	ldr	r3, [r4, #8]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	60a3      	str	r3, [r4, #8]
 8008aec:	da05      	bge.n	8008afa <_putc_r+0x42>
 8008aee:	69a2      	ldr	r2, [r4, #24]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	db1c      	blt.n	8008b2e <_putc_r+0x76>
 8008af4:	b2eb      	uxtb	r3, r5
 8008af6:	2b0a      	cmp	r3, #10
 8008af8:	d019      	beq.n	8008b2e <_putc_r+0x76>
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	6022      	str	r2, [r4, #0]
 8008b00:	701d      	strb	r5, [r3, #0]
 8008b02:	b2ed      	uxtb	r5, r5
 8008b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b06:	07da      	lsls	r2, r3, #31
 8008b08:	d405      	bmi.n	8008b16 <_putc_r+0x5e>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	059b      	lsls	r3, r3, #22
 8008b0e:	d402      	bmi.n	8008b16 <_putc_r+0x5e>
 8008b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b12:	f7fe fca1 	bl	8007458 <__retarget_lock_release_recursive>
 8008b16:	4628      	mov	r0, r5
 8008b18:	bd70      	pop	{r4, r5, r6, pc}
 8008b1a:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <_putc_r+0x88>)
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	d101      	bne.n	8008b24 <_putc_r+0x6c>
 8008b20:	68b4      	ldr	r4, [r6, #8]
 8008b22:	e7d6      	b.n	8008ad2 <_putc_r+0x1a>
 8008b24:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <_putc_r+0x8c>)
 8008b26:	429c      	cmp	r4, r3
 8008b28:	bf08      	it	eq
 8008b2a:	68f4      	ldreq	r4, [r6, #12]
 8008b2c:	e7d1      	b.n	8008ad2 <_putc_r+0x1a>
 8008b2e:	4629      	mov	r1, r5
 8008b30:	4622      	mov	r2, r4
 8008b32:	4630      	mov	r0, r6
 8008b34:	f000 fab0 	bl	8009098 <__swbuf_r>
 8008b38:	4605      	mov	r5, r0
 8008b3a:	e7e3      	b.n	8008b04 <_putc_r+0x4c>
 8008b3c:	08009578 	.word	0x08009578
 8008b40:	08009598 	.word	0x08009598
 8008b44:	08009558 	.word	0x08009558

08008b48 <_read_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	4d07      	ldr	r5, [pc, #28]	; (8008b68 <_read_r+0x20>)
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	4608      	mov	r0, r1
 8008b50:	4611      	mov	r1, r2
 8008b52:	2200      	movs	r2, #0
 8008b54:	602a      	str	r2, [r5, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	f7fe f807 	bl	8006b6a <_read>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_read_r+0x1e>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_read_r+0x1e>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	20004c78 	.word	0x20004c78

08008b6c <lflush>:
 8008b6c:	8983      	ldrh	r3, [r0, #12]
 8008b6e:	f003 0309 	and.w	r3, r3, #9
 8008b72:	2b09      	cmp	r3, #9
 8008b74:	d101      	bne.n	8008b7a <lflush+0xe>
 8008b76:	f7fe bb25 	b.w	80071c4 <fflush>
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	4770      	bx	lr
	...

08008b80 <__srefill_r>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	460c      	mov	r4, r1
 8008b84:	4605      	mov	r5, r0
 8008b86:	b118      	cbz	r0, 8008b90 <__srefill_r+0x10>
 8008b88:	6983      	ldr	r3, [r0, #24]
 8008b8a:	b90b      	cbnz	r3, 8008b90 <__srefill_r+0x10>
 8008b8c:	f7fe fb84 	bl	8007298 <__sinit>
 8008b90:	4b3b      	ldr	r3, [pc, #236]	; (8008c80 <__srefill_r+0x100>)
 8008b92:	429c      	cmp	r4, r3
 8008b94:	d10a      	bne.n	8008bac <__srefill_r+0x2c>
 8008b96:	686c      	ldr	r4, [r5, #4]
 8008b98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	6063      	str	r3, [r4, #4]
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	069e      	lsls	r6, r3, #26
 8008ba4:	d50c      	bpl.n	8008bc0 <__srefill_r+0x40>
 8008ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008baa:	e066      	b.n	8008c7a <__srefill_r+0xfa>
 8008bac:	4b35      	ldr	r3, [pc, #212]	; (8008c84 <__srefill_r+0x104>)
 8008bae:	429c      	cmp	r4, r3
 8008bb0:	d101      	bne.n	8008bb6 <__srefill_r+0x36>
 8008bb2:	68ac      	ldr	r4, [r5, #8]
 8008bb4:	e7f0      	b.n	8008b98 <__srefill_r+0x18>
 8008bb6:	4b34      	ldr	r3, [pc, #208]	; (8008c88 <__srefill_r+0x108>)
 8008bb8:	429c      	cmp	r4, r3
 8008bba:	bf08      	it	eq
 8008bbc:	68ec      	ldreq	r4, [r5, #12]
 8008bbe:	e7eb      	b.n	8008b98 <__srefill_r+0x18>
 8008bc0:	0758      	lsls	r0, r3, #29
 8008bc2:	d448      	bmi.n	8008c56 <__srefill_r+0xd6>
 8008bc4:	06d9      	lsls	r1, r3, #27
 8008bc6:	d405      	bmi.n	8008bd4 <__srefill_r+0x54>
 8008bc8:	2309      	movs	r3, #9
 8008bca:	602b      	str	r3, [r5, #0]
 8008bcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bd0:	81a3      	strh	r3, [r4, #12]
 8008bd2:	e7e8      	b.n	8008ba6 <__srefill_r+0x26>
 8008bd4:	071a      	lsls	r2, r3, #28
 8008bd6:	d50b      	bpl.n	8008bf0 <__srefill_r+0x70>
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f7fe fab6 	bl	800714c <_fflush_r>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d1e0      	bne.n	8008ba6 <__srefill_r+0x26>
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	60a0      	str	r0, [r4, #8]
 8008be8:	f023 0308 	bic.w	r3, r3, #8
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	61a0      	str	r0, [r4, #24]
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f043 0304 	orr.w	r3, r3, #4
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	b91b      	cbnz	r3, 8008c04 <__srefill_r+0x84>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4628      	mov	r0, r5
 8008c00:	f000 fb30 	bl	8009264 <__smakebuf_r>
 8008c04:	89a6      	ldrh	r6, [r4, #12]
 8008c06:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008c0a:	07b3      	lsls	r3, r6, #30
 8008c0c:	d00f      	beq.n	8008c2e <__srefill_r+0xae>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	81a3      	strh	r3, [r4, #12]
 8008c12:	4b1e      	ldr	r3, [pc, #120]	; (8008c8c <__srefill_r+0x10c>)
 8008c14:	491e      	ldr	r1, [pc, #120]	; (8008c90 <__srefill_r+0x110>)
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	f006 0609 	and.w	r6, r6, #9
 8008c1c:	f7fe fbba 	bl	8007394 <_fwalk>
 8008c20:	2e09      	cmp	r6, #9
 8008c22:	81a7      	strh	r7, [r4, #12]
 8008c24:	d103      	bne.n	8008c2e <__srefill_r+0xae>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f7fe fa09 	bl	8007040 <__sflush_r>
 8008c2e:	6922      	ldr	r2, [r4, #16]
 8008c30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c32:	6963      	ldr	r3, [r4, #20]
 8008c34:	6a21      	ldr	r1, [r4, #32]
 8008c36:	6022      	str	r2, [r4, #0]
 8008c38:	4628      	mov	r0, r5
 8008c3a:	47b0      	blx	r6
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	6060      	str	r0, [r4, #4]
 8008c40:	dc1c      	bgt.n	8008c7c <__srefill_r+0xfc>
 8008c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c46:	bf17      	itett	ne
 8008c48:	2200      	movne	r2, #0
 8008c4a:	f043 0320 	orreq.w	r3, r3, #32
 8008c4e:	6062      	strne	r2, [r4, #4]
 8008c50:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008c54:	e7bc      	b.n	8008bd0 <__srefill_r+0x50>
 8008c56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c58:	2900      	cmp	r1, #0
 8008c5a:	d0cd      	beq.n	8008bf8 <__srefill_r+0x78>
 8008c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c60:	4299      	cmp	r1, r3
 8008c62:	d002      	beq.n	8008c6a <__srefill_r+0xea>
 8008c64:	4628      	mov	r0, r5
 8008c66:	f7fe fc0f 	bl	8007488 <_free_r>
 8008c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c6c:	6063      	str	r3, [r4, #4]
 8008c6e:	2000      	movs	r0, #0
 8008c70:	6360      	str	r0, [r4, #52]	; 0x34
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0c0      	beq.n	8008bf8 <__srefill_r+0x78>
 8008c76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	e7fc      	b.n	8008c7a <__srefill_r+0xfa>
 8008c80:	08009578 	.word	0x08009578
 8008c84:	08009598 	.word	0x08009598
 8008c88:	08009558 	.word	0x08009558
 8008c8c:	080095b8 	.word	0x080095b8
 8008c90:	08008b6d 	.word	0x08008b6d

08008c94 <__sccl>:
 8008c94:	b570      	push	{r4, r5, r6, lr}
 8008c96:	780b      	ldrb	r3, [r1, #0]
 8008c98:	4604      	mov	r4, r0
 8008c9a:	2b5e      	cmp	r3, #94	; 0x5e
 8008c9c:	bf0b      	itete	eq
 8008c9e:	784b      	ldrbeq	r3, [r1, #1]
 8008ca0:	1c48      	addne	r0, r1, #1
 8008ca2:	1c88      	addeq	r0, r1, #2
 8008ca4:	2200      	movne	r2, #0
 8008ca6:	bf08      	it	eq
 8008ca8:	2201      	moveq	r2, #1
 8008caa:	1e61      	subs	r1, r4, #1
 8008cac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008cb0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008cb4:	42a9      	cmp	r1, r5
 8008cb6:	d1fb      	bne.n	8008cb0 <__sccl+0x1c>
 8008cb8:	b90b      	cbnz	r3, 8008cbe <__sccl+0x2a>
 8008cba:	3801      	subs	r0, #1
 8008cbc:	bd70      	pop	{r4, r5, r6, pc}
 8008cbe:	f082 0201 	eor.w	r2, r2, #1
 8008cc2:	54e2      	strb	r2, [r4, r3]
 8008cc4:	4605      	mov	r5, r0
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008ccc:	292d      	cmp	r1, #45	; 0x2d
 8008cce:	d006      	beq.n	8008cde <__sccl+0x4a>
 8008cd0:	295d      	cmp	r1, #93	; 0x5d
 8008cd2:	d0f3      	beq.n	8008cbc <__sccl+0x28>
 8008cd4:	b909      	cbnz	r1, 8008cda <__sccl+0x46>
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	e7f0      	b.n	8008cbc <__sccl+0x28>
 8008cda:	460b      	mov	r3, r1
 8008cdc:	e7f1      	b.n	8008cc2 <__sccl+0x2e>
 8008cde:	786e      	ldrb	r6, [r5, #1]
 8008ce0:	2e5d      	cmp	r6, #93	; 0x5d
 8008ce2:	d0fa      	beq.n	8008cda <__sccl+0x46>
 8008ce4:	42b3      	cmp	r3, r6
 8008ce6:	dcf8      	bgt.n	8008cda <__sccl+0x46>
 8008ce8:	3502      	adds	r5, #2
 8008cea:	4619      	mov	r1, r3
 8008cec:	3101      	adds	r1, #1
 8008cee:	428e      	cmp	r6, r1
 8008cf0:	5462      	strb	r2, [r4, r1]
 8008cf2:	dcfb      	bgt.n	8008cec <__sccl+0x58>
 8008cf4:	1af1      	subs	r1, r6, r3
 8008cf6:	3901      	subs	r1, #1
 8008cf8:	1c58      	adds	r0, r3, #1
 8008cfa:	42b3      	cmp	r3, r6
 8008cfc:	bfa8      	it	ge
 8008cfe:	2100      	movge	r1, #0
 8008d00:	1843      	adds	r3, r0, r1
 8008d02:	e7e0      	b.n	8008cc6 <__sccl+0x32>

08008d04 <_strtol_l.constprop.0>:
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d0a:	d001      	beq.n	8008d10 <_strtol_l.constprop.0+0xc>
 8008d0c:	2b24      	cmp	r3, #36	; 0x24
 8008d0e:	d906      	bls.n	8008d1e <_strtol_l.constprop.0+0x1a>
 8008d10:	f7fe f990 	bl	8007034 <__errno>
 8008d14:	2316      	movs	r3, #22
 8008d16:	6003      	str	r3, [r0, #0]
 8008d18:	2000      	movs	r0, #0
 8008d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e04 <_strtol_l.constprop.0+0x100>
 8008d22:	460d      	mov	r5, r1
 8008d24:	462e      	mov	r6, r5
 8008d26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008d2e:	f017 0708 	ands.w	r7, r7, #8
 8008d32:	d1f7      	bne.n	8008d24 <_strtol_l.constprop.0+0x20>
 8008d34:	2c2d      	cmp	r4, #45	; 0x2d
 8008d36:	d132      	bne.n	8008d9e <_strtol_l.constprop.0+0x9a>
 8008d38:	782c      	ldrb	r4, [r5, #0]
 8008d3a:	2701      	movs	r7, #1
 8008d3c:	1cb5      	adds	r5, r6, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d05b      	beq.n	8008dfa <_strtol_l.constprop.0+0xf6>
 8008d42:	2b10      	cmp	r3, #16
 8008d44:	d109      	bne.n	8008d5a <_strtol_l.constprop.0+0x56>
 8008d46:	2c30      	cmp	r4, #48	; 0x30
 8008d48:	d107      	bne.n	8008d5a <_strtol_l.constprop.0+0x56>
 8008d4a:	782c      	ldrb	r4, [r5, #0]
 8008d4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008d50:	2c58      	cmp	r4, #88	; 0x58
 8008d52:	d14d      	bne.n	8008df0 <_strtol_l.constprop.0+0xec>
 8008d54:	786c      	ldrb	r4, [r5, #1]
 8008d56:	2310      	movs	r3, #16
 8008d58:	3502      	adds	r5, #2
 8008d5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008d5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008d62:	f04f 0c00 	mov.w	ip, #0
 8008d66:	fbb8 f9f3 	udiv	r9, r8, r3
 8008d6a:	4666      	mov	r6, ip
 8008d6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008d70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008d74:	f1be 0f09 	cmp.w	lr, #9
 8008d78:	d816      	bhi.n	8008da8 <_strtol_l.constprop.0+0xa4>
 8008d7a:	4674      	mov	r4, lr
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	dd24      	ble.n	8008dca <_strtol_l.constprop.0+0xc6>
 8008d80:	f1bc 0f00 	cmp.w	ip, #0
 8008d84:	db1e      	blt.n	8008dc4 <_strtol_l.constprop.0+0xc0>
 8008d86:	45b1      	cmp	r9, r6
 8008d88:	d31c      	bcc.n	8008dc4 <_strtol_l.constprop.0+0xc0>
 8008d8a:	d101      	bne.n	8008d90 <_strtol_l.constprop.0+0x8c>
 8008d8c:	45a2      	cmp	sl, r4
 8008d8e:	db19      	blt.n	8008dc4 <_strtol_l.constprop.0+0xc0>
 8008d90:	fb06 4603 	mla	r6, r6, r3, r4
 8008d94:	f04f 0c01 	mov.w	ip, #1
 8008d98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d9c:	e7e8      	b.n	8008d70 <_strtol_l.constprop.0+0x6c>
 8008d9e:	2c2b      	cmp	r4, #43	; 0x2b
 8008da0:	bf04      	itt	eq
 8008da2:	782c      	ldrbeq	r4, [r5, #0]
 8008da4:	1cb5      	addeq	r5, r6, #2
 8008da6:	e7ca      	b.n	8008d3e <_strtol_l.constprop.0+0x3a>
 8008da8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008dac:	f1be 0f19 	cmp.w	lr, #25
 8008db0:	d801      	bhi.n	8008db6 <_strtol_l.constprop.0+0xb2>
 8008db2:	3c37      	subs	r4, #55	; 0x37
 8008db4:	e7e2      	b.n	8008d7c <_strtol_l.constprop.0+0x78>
 8008db6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008dba:	f1be 0f19 	cmp.w	lr, #25
 8008dbe:	d804      	bhi.n	8008dca <_strtol_l.constprop.0+0xc6>
 8008dc0:	3c57      	subs	r4, #87	; 0x57
 8008dc2:	e7db      	b.n	8008d7c <_strtol_l.constprop.0+0x78>
 8008dc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008dc8:	e7e6      	b.n	8008d98 <_strtol_l.constprop.0+0x94>
 8008dca:	f1bc 0f00 	cmp.w	ip, #0
 8008dce:	da05      	bge.n	8008ddc <_strtol_l.constprop.0+0xd8>
 8008dd0:	2322      	movs	r3, #34	; 0x22
 8008dd2:	6003      	str	r3, [r0, #0]
 8008dd4:	4646      	mov	r6, r8
 8008dd6:	b942      	cbnz	r2, 8008dea <_strtol_l.constprop.0+0xe6>
 8008dd8:	4630      	mov	r0, r6
 8008dda:	e79e      	b.n	8008d1a <_strtol_l.constprop.0+0x16>
 8008ddc:	b107      	cbz	r7, 8008de0 <_strtol_l.constprop.0+0xdc>
 8008dde:	4276      	negs	r6, r6
 8008de0:	2a00      	cmp	r2, #0
 8008de2:	d0f9      	beq.n	8008dd8 <_strtol_l.constprop.0+0xd4>
 8008de4:	f1bc 0f00 	cmp.w	ip, #0
 8008de8:	d000      	beq.n	8008dec <_strtol_l.constprop.0+0xe8>
 8008dea:	1e69      	subs	r1, r5, #1
 8008dec:	6011      	str	r1, [r2, #0]
 8008dee:	e7f3      	b.n	8008dd8 <_strtol_l.constprop.0+0xd4>
 8008df0:	2430      	movs	r4, #48	; 0x30
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1b1      	bne.n	8008d5a <_strtol_l.constprop.0+0x56>
 8008df6:	2308      	movs	r3, #8
 8008df8:	e7af      	b.n	8008d5a <_strtol_l.constprop.0+0x56>
 8008dfa:	2c30      	cmp	r4, #48	; 0x30
 8008dfc:	d0a5      	beq.n	8008d4a <_strtol_l.constprop.0+0x46>
 8008dfe:	230a      	movs	r3, #10
 8008e00:	e7ab      	b.n	8008d5a <_strtol_l.constprop.0+0x56>
 8008e02:	bf00      	nop
 8008e04:	08009ca6 	.word	0x08009ca6

08008e08 <_strtol_r>:
 8008e08:	f7ff bf7c 	b.w	8008d04 <_strtol_l.constprop.0>

08008e0c <_strtoul_l.constprop.0>:
 8008e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e10:	4f36      	ldr	r7, [pc, #216]	; (8008eec <_strtoul_l.constprop.0+0xe0>)
 8008e12:	4686      	mov	lr, r0
 8008e14:	460d      	mov	r5, r1
 8008e16:	4628      	mov	r0, r5
 8008e18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e1c:	5de6      	ldrb	r6, [r4, r7]
 8008e1e:	f016 0608 	ands.w	r6, r6, #8
 8008e22:	d1f8      	bne.n	8008e16 <_strtoul_l.constprop.0+0xa>
 8008e24:	2c2d      	cmp	r4, #45	; 0x2d
 8008e26:	d12f      	bne.n	8008e88 <_strtoul_l.constprop.0+0x7c>
 8008e28:	782c      	ldrb	r4, [r5, #0]
 8008e2a:	2601      	movs	r6, #1
 8008e2c:	1c85      	adds	r5, r0, #2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d057      	beq.n	8008ee2 <_strtoul_l.constprop.0+0xd6>
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d109      	bne.n	8008e4a <_strtoul_l.constprop.0+0x3e>
 8008e36:	2c30      	cmp	r4, #48	; 0x30
 8008e38:	d107      	bne.n	8008e4a <_strtoul_l.constprop.0+0x3e>
 8008e3a:	7828      	ldrb	r0, [r5, #0]
 8008e3c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008e40:	2858      	cmp	r0, #88	; 0x58
 8008e42:	d149      	bne.n	8008ed8 <_strtoul_l.constprop.0+0xcc>
 8008e44:	786c      	ldrb	r4, [r5, #1]
 8008e46:	2310      	movs	r3, #16
 8008e48:	3502      	adds	r5, #2
 8008e4a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008e4e:	2700      	movs	r7, #0
 8008e50:	fbb8 f8f3 	udiv	r8, r8, r3
 8008e54:	fb03 f908 	mul.w	r9, r3, r8
 8008e58:	ea6f 0909 	mvn.w	r9, r9
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008e62:	f1bc 0f09 	cmp.w	ip, #9
 8008e66:	d814      	bhi.n	8008e92 <_strtoul_l.constprop.0+0x86>
 8008e68:	4664      	mov	r4, ip
 8008e6a:	42a3      	cmp	r3, r4
 8008e6c:	dd22      	ble.n	8008eb4 <_strtoul_l.constprop.0+0xa8>
 8008e6e:	2f00      	cmp	r7, #0
 8008e70:	db1d      	blt.n	8008eae <_strtoul_l.constprop.0+0xa2>
 8008e72:	4580      	cmp	r8, r0
 8008e74:	d31b      	bcc.n	8008eae <_strtoul_l.constprop.0+0xa2>
 8008e76:	d101      	bne.n	8008e7c <_strtoul_l.constprop.0+0x70>
 8008e78:	45a1      	cmp	r9, r4
 8008e7a:	db18      	blt.n	8008eae <_strtoul_l.constprop.0+0xa2>
 8008e7c:	fb00 4003 	mla	r0, r0, r3, r4
 8008e80:	2701      	movs	r7, #1
 8008e82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e86:	e7ea      	b.n	8008e5e <_strtoul_l.constprop.0+0x52>
 8008e88:	2c2b      	cmp	r4, #43	; 0x2b
 8008e8a:	bf04      	itt	eq
 8008e8c:	782c      	ldrbeq	r4, [r5, #0]
 8008e8e:	1c85      	addeq	r5, r0, #2
 8008e90:	e7cd      	b.n	8008e2e <_strtoul_l.constprop.0+0x22>
 8008e92:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008e96:	f1bc 0f19 	cmp.w	ip, #25
 8008e9a:	d801      	bhi.n	8008ea0 <_strtoul_l.constprop.0+0x94>
 8008e9c:	3c37      	subs	r4, #55	; 0x37
 8008e9e:	e7e4      	b.n	8008e6a <_strtoul_l.constprop.0+0x5e>
 8008ea0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008ea4:	f1bc 0f19 	cmp.w	ip, #25
 8008ea8:	d804      	bhi.n	8008eb4 <_strtoul_l.constprop.0+0xa8>
 8008eaa:	3c57      	subs	r4, #87	; 0x57
 8008eac:	e7dd      	b.n	8008e6a <_strtoul_l.constprop.0+0x5e>
 8008eae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008eb2:	e7e6      	b.n	8008e82 <_strtoul_l.constprop.0+0x76>
 8008eb4:	2f00      	cmp	r7, #0
 8008eb6:	da07      	bge.n	8008ec8 <_strtoul_l.constprop.0+0xbc>
 8008eb8:	2322      	movs	r3, #34	; 0x22
 8008eba:	f8ce 3000 	str.w	r3, [lr]
 8008ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ec2:	b932      	cbnz	r2, 8008ed2 <_strtoul_l.constprop.0+0xc6>
 8008ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ec8:	b106      	cbz	r6, 8008ecc <_strtoul_l.constprop.0+0xc0>
 8008eca:	4240      	negs	r0, r0
 8008ecc:	2a00      	cmp	r2, #0
 8008ece:	d0f9      	beq.n	8008ec4 <_strtoul_l.constprop.0+0xb8>
 8008ed0:	b107      	cbz	r7, 8008ed4 <_strtoul_l.constprop.0+0xc8>
 8008ed2:	1e69      	subs	r1, r5, #1
 8008ed4:	6011      	str	r1, [r2, #0]
 8008ed6:	e7f5      	b.n	8008ec4 <_strtoul_l.constprop.0+0xb8>
 8008ed8:	2430      	movs	r4, #48	; 0x30
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1b5      	bne.n	8008e4a <_strtoul_l.constprop.0+0x3e>
 8008ede:	2308      	movs	r3, #8
 8008ee0:	e7b3      	b.n	8008e4a <_strtoul_l.constprop.0+0x3e>
 8008ee2:	2c30      	cmp	r4, #48	; 0x30
 8008ee4:	d0a9      	beq.n	8008e3a <_strtoul_l.constprop.0+0x2e>
 8008ee6:	230a      	movs	r3, #10
 8008ee8:	e7af      	b.n	8008e4a <_strtoul_l.constprop.0+0x3e>
 8008eea:	bf00      	nop
 8008eec:	08009ca6 	.word	0x08009ca6

08008ef0 <_strtoul_r>:
 8008ef0:	f7ff bf8c 	b.w	8008e0c <_strtoul_l.constprop.0>

08008ef4 <__submore>:
 8008ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	460c      	mov	r4, r1
 8008efa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f00:	4299      	cmp	r1, r3
 8008f02:	d11d      	bne.n	8008f40 <__submore+0x4c>
 8008f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f08:	f7fe fb2a 	bl	8007560 <_malloc_r>
 8008f0c:	b918      	cbnz	r0, 8008f16 <__submore+0x22>
 8008f0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f1c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008f20:	6360      	str	r0, [r4, #52]	; 0x34
 8008f22:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008f26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008f2a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008f2e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008f32:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008f36:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008f3a:	6020      	str	r0, [r4, #0]
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	e7e8      	b.n	8008f12 <__submore+0x1e>
 8008f40:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008f42:	0077      	lsls	r7, r6, #1
 8008f44:	463a      	mov	r2, r7
 8008f46:	f000 f9cd 	bl	80092e4 <_realloc_r>
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d0de      	beq.n	8008f0e <__submore+0x1a>
 8008f50:	eb00 0806 	add.w	r8, r0, r6
 8008f54:	4601      	mov	r1, r0
 8008f56:	4632      	mov	r2, r6
 8008f58:	4640      	mov	r0, r8
 8008f5a:	f7fe fa7e 	bl	800745a <memcpy>
 8008f5e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008f62:	f8c4 8000 	str.w	r8, [r4]
 8008f66:	e7e9      	b.n	8008f3c <__submore+0x48>

08008f68 <_ungetc_r>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4614      	mov	r4, r2
 8008f6c:	1c4a      	adds	r2, r1, #1
 8008f6e:	4606      	mov	r6, r0
 8008f70:	460d      	mov	r5, r1
 8008f72:	d103      	bne.n	8008f7c <_ungetc_r+0x14>
 8008f74:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008f78:	4628      	mov	r0, r5
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	b118      	cbz	r0, 8008f86 <_ungetc_r+0x1e>
 8008f7e:	6983      	ldr	r3, [r0, #24]
 8008f80:	b90b      	cbnz	r3, 8008f86 <_ungetc_r+0x1e>
 8008f82:	f7fe f989 	bl	8007298 <__sinit>
 8008f86:	4b41      	ldr	r3, [pc, #260]	; (800908c <_ungetc_r+0x124>)
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	d11d      	bne.n	8008fc8 <_ungetc_r+0x60>
 8008f8c:	6874      	ldr	r4, [r6, #4]
 8008f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f90:	07db      	lsls	r3, r3, #31
 8008f92:	d405      	bmi.n	8008fa0 <_ungetc_r+0x38>
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	0598      	lsls	r0, r3, #22
 8008f98:	d402      	bmi.n	8008fa0 <_ungetc_r+0x38>
 8008f9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f9c:	f7fe fa5b 	bl	8007456 <__retarget_lock_acquire_recursive>
 8008fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa4:	f023 0320 	bic.w	r3, r3, #32
 8008fa8:	0759      	lsls	r1, r3, #29
 8008faa:	81a3      	strh	r3, [r4, #12]
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	d42d      	bmi.n	800900c <_ungetc_r+0xa4>
 8008fb0:	06d3      	lsls	r3, r2, #27
 8008fb2:	d413      	bmi.n	8008fdc <_ungetc_r+0x74>
 8008fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fb6:	07dd      	lsls	r5, r3, #31
 8008fb8:	d4dc      	bmi.n	8008f74 <_ungetc_r+0xc>
 8008fba:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008fbe:	d1d9      	bne.n	8008f74 <_ungetc_r+0xc>
 8008fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fc2:	f7fe fa49 	bl	8007458 <__retarget_lock_release_recursive>
 8008fc6:	e7d5      	b.n	8008f74 <_ungetc_r+0xc>
 8008fc8:	4b31      	ldr	r3, [pc, #196]	; (8009090 <_ungetc_r+0x128>)
 8008fca:	429c      	cmp	r4, r3
 8008fcc:	d101      	bne.n	8008fd2 <_ungetc_r+0x6a>
 8008fce:	68b4      	ldr	r4, [r6, #8]
 8008fd0:	e7dd      	b.n	8008f8e <_ungetc_r+0x26>
 8008fd2:	4b30      	ldr	r3, [pc, #192]	; (8009094 <_ungetc_r+0x12c>)
 8008fd4:	429c      	cmp	r4, r3
 8008fd6:	bf08      	it	eq
 8008fd8:	68f4      	ldreq	r4, [r6, #12]
 8008fda:	e7d8      	b.n	8008f8e <_ungetc_r+0x26>
 8008fdc:	0710      	lsls	r0, r2, #28
 8008fde:	d511      	bpl.n	8009004 <_ungetc_r+0x9c>
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f7fe f8b2 	bl	800714c <_fflush_r>
 8008fe8:	b130      	cbz	r0, 8008ff8 <_ungetc_r+0x90>
 8008fea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fec:	07d9      	lsls	r1, r3, #31
 8008fee:	d4c1      	bmi.n	8008f74 <_ungetc_r+0xc>
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008ff6:	e7e2      	b.n	8008fbe <_ungetc_r+0x56>
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	60a0      	str	r0, [r4, #8]
 8008ffc:	f023 0308 	bic.w	r3, r3, #8
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	61a0      	str	r0, [r4, #24]
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	f043 0304 	orr.w	r3, r3, #4
 800900a:	81a3      	strh	r3, [r4, #12]
 800900c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800900e:	6862      	ldr	r2, [r4, #4]
 8009010:	b2ed      	uxtb	r5, r5
 8009012:	b1d3      	cbz	r3, 800904a <_ungetc_r+0xe2>
 8009014:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009016:	4293      	cmp	r3, r2
 8009018:	dc05      	bgt.n	8009026 <_ungetc_r+0xbe>
 800901a:	4621      	mov	r1, r4
 800901c:	4630      	mov	r0, r6
 800901e:	f7ff ff69 	bl	8008ef4 <__submore>
 8009022:	2800      	cmp	r0, #0
 8009024:	d1e1      	bne.n	8008fea <_ungetc_r+0x82>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	1e5a      	subs	r2, r3, #1
 800902a:	6022      	str	r2, [r4, #0]
 800902c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009030:	6863      	ldr	r3, [r4, #4]
 8009032:	3301      	adds	r3, #1
 8009034:	6063      	str	r3, [r4, #4]
 8009036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009038:	07da      	lsls	r2, r3, #31
 800903a:	d49d      	bmi.n	8008f78 <_ungetc_r+0x10>
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	059b      	lsls	r3, r3, #22
 8009040:	d49a      	bmi.n	8008f78 <_ungetc_r+0x10>
 8009042:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009044:	f7fe fa08 	bl	8007458 <__retarget_lock_release_recursive>
 8009048:	e796      	b.n	8008f78 <_ungetc_r+0x10>
 800904a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800904c:	6920      	ldr	r0, [r4, #16]
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	f001 0101 	and.w	r1, r1, #1
 8009054:	b160      	cbz	r0, 8009070 <_ungetc_r+0x108>
 8009056:	4298      	cmp	r0, r3
 8009058:	d20a      	bcs.n	8009070 <_ungetc_r+0x108>
 800905a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800905e:	42a8      	cmp	r0, r5
 8009060:	d106      	bne.n	8009070 <_ungetc_r+0x108>
 8009062:	3b01      	subs	r3, #1
 8009064:	3201      	adds	r2, #1
 8009066:	6023      	str	r3, [r4, #0]
 8009068:	6062      	str	r2, [r4, #4]
 800906a:	2900      	cmp	r1, #0
 800906c:	d184      	bne.n	8008f78 <_ungetc_r+0x10>
 800906e:	e7e5      	b.n	800903c <_ungetc_r+0xd4>
 8009070:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009078:	6363      	str	r3, [r4, #52]	; 0x34
 800907a:	2303      	movs	r3, #3
 800907c:	63a3      	str	r3, [r4, #56]	; 0x38
 800907e:	4623      	mov	r3, r4
 8009080:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	2301      	movs	r3, #1
 8009088:	6063      	str	r3, [r4, #4]
 800908a:	e7ee      	b.n	800906a <_ungetc_r+0x102>
 800908c:	08009578 	.word	0x08009578
 8009090:	08009598 	.word	0x08009598
 8009094:	08009558 	.word	0x08009558

08009098 <__swbuf_r>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	460e      	mov	r6, r1
 800909c:	4614      	mov	r4, r2
 800909e:	4605      	mov	r5, r0
 80090a0:	b118      	cbz	r0, 80090aa <__swbuf_r+0x12>
 80090a2:	6983      	ldr	r3, [r0, #24]
 80090a4:	b90b      	cbnz	r3, 80090aa <__swbuf_r+0x12>
 80090a6:	f7fe f8f7 	bl	8007298 <__sinit>
 80090aa:	4b21      	ldr	r3, [pc, #132]	; (8009130 <__swbuf_r+0x98>)
 80090ac:	429c      	cmp	r4, r3
 80090ae:	d12b      	bne.n	8009108 <__swbuf_r+0x70>
 80090b0:	686c      	ldr	r4, [r5, #4]
 80090b2:	69a3      	ldr	r3, [r4, #24]
 80090b4:	60a3      	str	r3, [r4, #8]
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	071a      	lsls	r2, r3, #28
 80090ba:	d52f      	bpl.n	800911c <__swbuf_r+0x84>
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	b36b      	cbz	r3, 800911c <__swbuf_r+0x84>
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	6820      	ldr	r0, [r4, #0]
 80090c4:	1ac0      	subs	r0, r0, r3
 80090c6:	6963      	ldr	r3, [r4, #20]
 80090c8:	b2f6      	uxtb	r6, r6
 80090ca:	4283      	cmp	r3, r0
 80090cc:	4637      	mov	r7, r6
 80090ce:	dc04      	bgt.n	80090da <__swbuf_r+0x42>
 80090d0:	4621      	mov	r1, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	f7fe f83a 	bl	800714c <_fflush_r>
 80090d8:	bb30      	cbnz	r0, 8009128 <__swbuf_r+0x90>
 80090da:	68a3      	ldr	r3, [r4, #8]
 80090dc:	3b01      	subs	r3, #1
 80090de:	60a3      	str	r3, [r4, #8]
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	6022      	str	r2, [r4, #0]
 80090e6:	701e      	strb	r6, [r3, #0]
 80090e8:	6963      	ldr	r3, [r4, #20]
 80090ea:	3001      	adds	r0, #1
 80090ec:	4283      	cmp	r3, r0
 80090ee:	d004      	beq.n	80090fa <__swbuf_r+0x62>
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	07db      	lsls	r3, r3, #31
 80090f4:	d506      	bpl.n	8009104 <__swbuf_r+0x6c>
 80090f6:	2e0a      	cmp	r6, #10
 80090f8:	d104      	bne.n	8009104 <__swbuf_r+0x6c>
 80090fa:	4621      	mov	r1, r4
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7fe f825 	bl	800714c <_fflush_r>
 8009102:	b988      	cbnz	r0, 8009128 <__swbuf_r+0x90>
 8009104:	4638      	mov	r0, r7
 8009106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009108:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <__swbuf_r+0x9c>)
 800910a:	429c      	cmp	r4, r3
 800910c:	d101      	bne.n	8009112 <__swbuf_r+0x7a>
 800910e:	68ac      	ldr	r4, [r5, #8]
 8009110:	e7cf      	b.n	80090b2 <__swbuf_r+0x1a>
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <__swbuf_r+0xa0>)
 8009114:	429c      	cmp	r4, r3
 8009116:	bf08      	it	eq
 8009118:	68ec      	ldreq	r4, [r5, #12]
 800911a:	e7ca      	b.n	80090b2 <__swbuf_r+0x1a>
 800911c:	4621      	mov	r1, r4
 800911e:	4628      	mov	r0, r5
 8009120:	f000 f80c 	bl	800913c <__swsetup_r>
 8009124:	2800      	cmp	r0, #0
 8009126:	d0cb      	beq.n	80090c0 <__swbuf_r+0x28>
 8009128:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800912c:	e7ea      	b.n	8009104 <__swbuf_r+0x6c>
 800912e:	bf00      	nop
 8009130:	08009578 	.word	0x08009578
 8009134:	08009598 	.word	0x08009598
 8009138:	08009558 	.word	0x08009558

0800913c <__swsetup_r>:
 800913c:	4b32      	ldr	r3, [pc, #200]	; (8009208 <__swsetup_r+0xcc>)
 800913e:	b570      	push	{r4, r5, r6, lr}
 8009140:	681d      	ldr	r5, [r3, #0]
 8009142:	4606      	mov	r6, r0
 8009144:	460c      	mov	r4, r1
 8009146:	b125      	cbz	r5, 8009152 <__swsetup_r+0x16>
 8009148:	69ab      	ldr	r3, [r5, #24]
 800914a:	b913      	cbnz	r3, 8009152 <__swsetup_r+0x16>
 800914c:	4628      	mov	r0, r5
 800914e:	f7fe f8a3 	bl	8007298 <__sinit>
 8009152:	4b2e      	ldr	r3, [pc, #184]	; (800920c <__swsetup_r+0xd0>)
 8009154:	429c      	cmp	r4, r3
 8009156:	d10f      	bne.n	8009178 <__swsetup_r+0x3c>
 8009158:	686c      	ldr	r4, [r5, #4]
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009160:	0719      	lsls	r1, r3, #28
 8009162:	d42c      	bmi.n	80091be <__swsetup_r+0x82>
 8009164:	06dd      	lsls	r5, r3, #27
 8009166:	d411      	bmi.n	800918c <__swsetup_r+0x50>
 8009168:	2309      	movs	r3, #9
 800916a:	6033      	str	r3, [r6, #0]
 800916c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009176:	e03e      	b.n	80091f6 <__swsetup_r+0xba>
 8009178:	4b25      	ldr	r3, [pc, #148]	; (8009210 <__swsetup_r+0xd4>)
 800917a:	429c      	cmp	r4, r3
 800917c:	d101      	bne.n	8009182 <__swsetup_r+0x46>
 800917e:	68ac      	ldr	r4, [r5, #8]
 8009180:	e7eb      	b.n	800915a <__swsetup_r+0x1e>
 8009182:	4b24      	ldr	r3, [pc, #144]	; (8009214 <__swsetup_r+0xd8>)
 8009184:	429c      	cmp	r4, r3
 8009186:	bf08      	it	eq
 8009188:	68ec      	ldreq	r4, [r5, #12]
 800918a:	e7e6      	b.n	800915a <__swsetup_r+0x1e>
 800918c:	0758      	lsls	r0, r3, #29
 800918e:	d512      	bpl.n	80091b6 <__swsetup_r+0x7a>
 8009190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009192:	b141      	cbz	r1, 80091a6 <__swsetup_r+0x6a>
 8009194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009198:	4299      	cmp	r1, r3
 800919a:	d002      	beq.n	80091a2 <__swsetup_r+0x66>
 800919c:	4630      	mov	r0, r6
 800919e:	f7fe f973 	bl	8007488 <_free_r>
 80091a2:	2300      	movs	r3, #0
 80091a4:	6363      	str	r3, [r4, #52]	; 0x34
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	2300      	movs	r3, #0
 80091b0:	6063      	str	r3, [r4, #4]
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f043 0308 	orr.w	r3, r3, #8
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	6923      	ldr	r3, [r4, #16]
 80091c0:	b94b      	cbnz	r3, 80091d6 <__swsetup_r+0x9a>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091cc:	d003      	beq.n	80091d6 <__swsetup_r+0x9a>
 80091ce:	4621      	mov	r1, r4
 80091d0:	4630      	mov	r0, r6
 80091d2:	f000 f847 	bl	8009264 <__smakebuf_r>
 80091d6:	89a0      	ldrh	r0, [r4, #12]
 80091d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091dc:	f010 0301 	ands.w	r3, r0, #1
 80091e0:	d00a      	beq.n	80091f8 <__swsetup_r+0xbc>
 80091e2:	2300      	movs	r3, #0
 80091e4:	60a3      	str	r3, [r4, #8]
 80091e6:	6963      	ldr	r3, [r4, #20]
 80091e8:	425b      	negs	r3, r3
 80091ea:	61a3      	str	r3, [r4, #24]
 80091ec:	6923      	ldr	r3, [r4, #16]
 80091ee:	b943      	cbnz	r3, 8009202 <__swsetup_r+0xc6>
 80091f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091f4:	d1ba      	bne.n	800916c <__swsetup_r+0x30>
 80091f6:	bd70      	pop	{r4, r5, r6, pc}
 80091f8:	0781      	lsls	r1, r0, #30
 80091fa:	bf58      	it	pl
 80091fc:	6963      	ldrpl	r3, [r4, #20]
 80091fe:	60a3      	str	r3, [r4, #8]
 8009200:	e7f4      	b.n	80091ec <__swsetup_r+0xb0>
 8009202:	2000      	movs	r0, #0
 8009204:	e7f7      	b.n	80091f6 <__swsetup_r+0xba>
 8009206:	bf00      	nop
 8009208:	20000018 	.word	0x20000018
 800920c:	08009578 	.word	0x08009578
 8009210:	08009598 	.word	0x08009598
 8009214:	08009558 	.word	0x08009558

08009218 <__swhatbuf_r>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	460e      	mov	r6, r1
 800921c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009220:	2900      	cmp	r1, #0
 8009222:	b096      	sub	sp, #88	; 0x58
 8009224:	4614      	mov	r4, r2
 8009226:	461d      	mov	r5, r3
 8009228:	da08      	bge.n	800923c <__swhatbuf_r+0x24>
 800922a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	602a      	str	r2, [r5, #0]
 8009232:	061a      	lsls	r2, r3, #24
 8009234:	d410      	bmi.n	8009258 <__swhatbuf_r+0x40>
 8009236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800923a:	e00e      	b.n	800925a <__swhatbuf_r+0x42>
 800923c:	466a      	mov	r2, sp
 800923e:	f000 f881 	bl	8009344 <_fstat_r>
 8009242:	2800      	cmp	r0, #0
 8009244:	dbf1      	blt.n	800922a <__swhatbuf_r+0x12>
 8009246:	9a01      	ldr	r2, [sp, #4]
 8009248:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800924c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009250:	425a      	negs	r2, r3
 8009252:	415a      	adcs	r2, r3
 8009254:	602a      	str	r2, [r5, #0]
 8009256:	e7ee      	b.n	8009236 <__swhatbuf_r+0x1e>
 8009258:	2340      	movs	r3, #64	; 0x40
 800925a:	2000      	movs	r0, #0
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	b016      	add	sp, #88	; 0x58
 8009260:	bd70      	pop	{r4, r5, r6, pc}
	...

08009264 <__smakebuf_r>:
 8009264:	898b      	ldrh	r3, [r1, #12]
 8009266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009268:	079d      	lsls	r5, r3, #30
 800926a:	4606      	mov	r6, r0
 800926c:	460c      	mov	r4, r1
 800926e:	d507      	bpl.n	8009280 <__smakebuf_r+0x1c>
 8009270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	2301      	movs	r3, #1
 800927a:	6163      	str	r3, [r4, #20]
 800927c:	b002      	add	sp, #8
 800927e:	bd70      	pop	{r4, r5, r6, pc}
 8009280:	ab01      	add	r3, sp, #4
 8009282:	466a      	mov	r2, sp
 8009284:	f7ff ffc8 	bl	8009218 <__swhatbuf_r>
 8009288:	9900      	ldr	r1, [sp, #0]
 800928a:	4605      	mov	r5, r0
 800928c:	4630      	mov	r0, r6
 800928e:	f7fe f967 	bl	8007560 <_malloc_r>
 8009292:	b948      	cbnz	r0, 80092a8 <__smakebuf_r+0x44>
 8009294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009298:	059a      	lsls	r2, r3, #22
 800929a:	d4ef      	bmi.n	800927c <__smakebuf_r+0x18>
 800929c:	f023 0303 	bic.w	r3, r3, #3
 80092a0:	f043 0302 	orr.w	r3, r3, #2
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	e7e3      	b.n	8009270 <__smakebuf_r+0xc>
 80092a8:	4b0d      	ldr	r3, [pc, #52]	; (80092e0 <__smakebuf_r+0x7c>)
 80092aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	6020      	str	r0, [r4, #0]
 80092b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	6163      	str	r3, [r4, #20]
 80092ba:	9b01      	ldr	r3, [sp, #4]
 80092bc:	6120      	str	r0, [r4, #16]
 80092be:	b15b      	cbz	r3, 80092d8 <__smakebuf_r+0x74>
 80092c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092c4:	4630      	mov	r0, r6
 80092c6:	f000 f84f 	bl	8009368 <_isatty_r>
 80092ca:	b128      	cbz	r0, 80092d8 <__smakebuf_r+0x74>
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	f023 0303 	bic.w	r3, r3, #3
 80092d2:	f043 0301 	orr.w	r3, r3, #1
 80092d6:	81a3      	strh	r3, [r4, #12]
 80092d8:	89a0      	ldrh	r0, [r4, #12]
 80092da:	4305      	orrs	r5, r0
 80092dc:	81a5      	strh	r5, [r4, #12]
 80092de:	e7cd      	b.n	800927c <__smakebuf_r+0x18>
 80092e0:	08007231 	.word	0x08007231

080092e4 <_realloc_r>:
 80092e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e8:	4680      	mov	r8, r0
 80092ea:	4614      	mov	r4, r2
 80092ec:	460e      	mov	r6, r1
 80092ee:	b921      	cbnz	r1, 80092fa <_realloc_r+0x16>
 80092f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	4611      	mov	r1, r2
 80092f6:	f7fe b933 	b.w	8007560 <_malloc_r>
 80092fa:	b92a      	cbnz	r2, 8009308 <_realloc_r+0x24>
 80092fc:	f7fe f8c4 	bl	8007488 <_free_r>
 8009300:	4625      	mov	r5, r4
 8009302:	4628      	mov	r0, r5
 8009304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009308:	f000 f83e 	bl	8009388 <_malloc_usable_size_r>
 800930c:	4284      	cmp	r4, r0
 800930e:	4607      	mov	r7, r0
 8009310:	d802      	bhi.n	8009318 <_realloc_r+0x34>
 8009312:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009316:	d812      	bhi.n	800933e <_realloc_r+0x5a>
 8009318:	4621      	mov	r1, r4
 800931a:	4640      	mov	r0, r8
 800931c:	f7fe f920 	bl	8007560 <_malloc_r>
 8009320:	4605      	mov	r5, r0
 8009322:	2800      	cmp	r0, #0
 8009324:	d0ed      	beq.n	8009302 <_realloc_r+0x1e>
 8009326:	42bc      	cmp	r4, r7
 8009328:	4622      	mov	r2, r4
 800932a:	4631      	mov	r1, r6
 800932c:	bf28      	it	cs
 800932e:	463a      	movcs	r2, r7
 8009330:	f7fe f893 	bl	800745a <memcpy>
 8009334:	4631      	mov	r1, r6
 8009336:	4640      	mov	r0, r8
 8009338:	f7fe f8a6 	bl	8007488 <_free_r>
 800933c:	e7e1      	b.n	8009302 <_realloc_r+0x1e>
 800933e:	4635      	mov	r5, r6
 8009340:	e7df      	b.n	8009302 <_realloc_r+0x1e>
	...

08009344 <_fstat_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d07      	ldr	r5, [pc, #28]	; (8009364 <_fstat_r+0x20>)
 8009348:	2300      	movs	r3, #0
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	4611      	mov	r1, r2
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	f7fd fcec 	bl	8006d2e <_fstat>
 8009356:	1c43      	adds	r3, r0, #1
 8009358:	d102      	bne.n	8009360 <_fstat_r+0x1c>
 800935a:	682b      	ldr	r3, [r5, #0]
 800935c:	b103      	cbz	r3, 8009360 <_fstat_r+0x1c>
 800935e:	6023      	str	r3, [r4, #0]
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	bf00      	nop
 8009364:	20004c78 	.word	0x20004c78

08009368 <_isatty_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4d06      	ldr	r5, [pc, #24]	; (8009384 <_isatty_r+0x1c>)
 800936c:	2300      	movs	r3, #0
 800936e:	4604      	mov	r4, r0
 8009370:	4608      	mov	r0, r1
 8009372:	602b      	str	r3, [r5, #0]
 8009374:	f7fd fe42 	bl	8006ffc <_isatty>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_isatty_r+0x1a>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_isatty_r+0x1a>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20004c78 	.word	0x20004c78

08009388 <_malloc_usable_size_r>:
 8009388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800938c:	1f18      	subs	r0, r3, #4
 800938e:	2b00      	cmp	r3, #0
 8009390:	bfbc      	itt	lt
 8009392:	580b      	ldrlt	r3, [r1, r0]
 8009394:	18c0      	addlt	r0, r0, r3
 8009396:	4770      	bx	lr

08009398 <_init>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	bf00      	nop
 800939c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939e:	bc08      	pop	{r3}
 80093a0:	469e      	mov	lr, r3
 80093a2:	4770      	bx	lr

080093a4 <_fini>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	bf00      	nop
 80093a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093aa:	bc08      	pop	{r3}
 80093ac:	469e      	mov	lr, r3
 80093ae:	4770      	bx	lr
