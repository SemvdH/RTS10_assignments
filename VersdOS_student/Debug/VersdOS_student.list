
VersdOS_student.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000880  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a18  08000a18  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a18  08000a18  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000a18  08000a18  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a18  08000a18  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a18  08000a18  00010a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a1c  08000a1c  00010a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000064  08000a84  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08000a84  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c18  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000468  00000000  00000000  00020cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000100  00000000  00000000  00021118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00021218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e809  00000000  00000000  000212d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001000  00000000  00000000  0002fad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053002  00000000  00000000  00030ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00083adb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000468  00000000  00000000  00083b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000a00 	.word	0x08000a00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08000a00 	.word	0x08000a00

080001d8 <pushRegistersToCurrentPSP>:
        .global returnToPSP
        .global returnToMSP
       // .global SVC_Handler
		
pushRegistersToCurrentPSP:
		MRS 	r0	, psp			//Move PSP to register R0 (the function argument)
 80001d8:	f3ef 8009 	mrs	r0, PSP
		STMDB 	r0!	, {r4-r11}		//Store multiple registers decrement address before each access,
 80001dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
									//when done write back last used address to %0 (new SP location)
		MSR 	psp	, r0			//Move register %0 to psp to update to the new SP, output to scratch
 80001e0:	f380 8809 	msr	PSP, r0
		MOV		PC	, LR			//return by moving link-register to program counter
 80001e4:	46f7      	mov	pc, lr

080001e6 <popRegistersFromCurrentPSP>:

popRegistersFromCurrentPSP:
		MRS 	R0	, psp			//Move PSP to register R0
 80001e6:	f3ef 8009 	mrs	r0, PSP
		LDMIA 	R0!	, {r4-r11}		//Load multiple registers increment address after each access,
 80001ea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
									//when done write back last used address to R0 (new SP location)
		MSR 	psp	, R0			//Move register R0 to psp to update to the new SP, output to scratch
 80001ee:	f380 8809 	msr	PSP, r0
		MOV		PC	, LR			//return by moving link-register to program counter
 80001f2:	46f7      	mov	pc, lr

080001f4 <readPSP>:

readPSP:
		MRS 	R0 , psp			//move psp to r0
 80001f4:	f3ef 8009 	mrs	r0, PSP
		MOV		PC	, LR			//return by moving link-register to program counter
 80001f8:	46f7      	mov	pc, lr

080001fa <writePSP>:

writePSP:
    	MSR 	psp	, R0			//Move r0 to psp.
 80001fa:	f380 8809 	msr	PSP, r0
    	ISB							//flush pipeline
 80001fe:	f3bf 8f6f 	isb	sy
		MOV		PC	, LR			//return by moving link-register to program counter
 8000202:	46f7      	mov	pc, lr

08000204 <returnToPSP>:

returnToPSP:
		ldr 	lr, =0xFFFFFFFD         //terug met process stack
 8000204:	f06f 0e02 	mvn.w	lr, #2
		bx		lr
 8000208:	4770      	bx	lr

0800020a <returnToMSP>:

returnToMSP:
		ldr 	lr, =0xFFFFFFF9         //terug met process stack
 800020a:	f06f 0e06 	mvn.w	lr, #6
		bx		lr
 800020e:	4770      	bx	lr

08000210 <idleTask>:
task * currentTask;
task * taskToExecute;

// Idle task
void idleTask(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	while (1)
	{
		__asm(" wfi"); // Sleep until next SysTick
 8000214:	bf30      	wfi
 8000216:	e7fd      	b.n	8000214 <idleTask+0x4>

08000218 <addTaskToListAtIndex>:
}



void addTaskToListAtIndex(void (*function)(void), uint32_t stackSize, int8_t priority, size_t pos)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	4613      	mov	r3, r2
 8000226:	71fb      	strb	r3, [r7, #7]
	task *taskToAdd = &taskList[pos];
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	011b      	lsls	r3, r3, #4
 800022c:	4a63      	ldr	r2, [pc, #396]	; (80003bc <addTaskToListAtIndex+0x1a4>)
 800022e:	4413      	add	r3, r2
 8000230:	617b      	str	r3, [r7, #20]

	taskToAdd->function = function;
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	68fa      	ldr	r2, [r7, #12]
 8000236:	609a      	str	r2, [r3, #8]
	// Allocate memory... do we wanna use malloc or our own implementation ;-) ?
	taskToAdd->stack = (int *)malloc(stackSize)+stackSize;
 8000238:	68b8      	ldr	r0, [r7, #8]
 800023a:	f000 fb19 	bl	8000870 <malloc>
 800023e:	4603      	mov	r3, r0
 8000240:	461a      	mov	r2, r3
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	441a      	add	r2, r3
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	601a      	str	r2, [r3, #0]

	/*
	 * For debugging purposes we initialize the stack with
	 * values that we can recognize.
	 */
	*(--(taskToAdd->stack)) 	= 0x01000000;					//XSPR Thumb bit set
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	1f1a      	subs	r2, r3, #4
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800025e:	601a      	str	r2, [r3, #0]
//	*(--(taskToAdd->stack)) 	= 0x00000000;					//FAULTMASK
//	*(--(taskToAdd->stack)) 	= 0x00000000;					//PRIMASK
//	*(--(taskToAdd->stack)) 	= 0x01000000;					//EPSR
//	*(--(taskToAdd->stack)) 	= 0x00000000;					//IPSR
//	*(--(taskToAdd->stack)) 	= 0x00000000;					//APSR
	*(--(taskToAdd->stack)) 	= 0x01000000;					//program status register
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	1f1a      	subs	r2, r3, #4
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000272:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= (int)taskToAdd->function; 	//set PC to function pointer, cast as int to silence the compiler
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	6899      	ldr	r1, [r3, #8]
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1f1a      	subs	r2, r3, #4
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	460a      	mov	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0xFFFFFFFD; 					//LR, return with process stack (PSP)
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	1f1a      	subs	r2, r3, #4
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f06f 0202 	mvn.w	r2, #2
 800029c:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0x0000000C;					//R12	Initial values used for debugging purposes
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1f1a      	subs	r2, r3, #4
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	220c      	movs	r2, #12
 80002ae:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0x00000003;					//R3
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	1f1a      	subs	r2, r3, #4
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2203      	movs	r2, #3
 80002c0:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0x00000002;					//R2
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	1f1a      	subs	r2, r3, #4
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2202      	movs	r2, #2
 80002d2:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0x00000001;					//R1
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	1f1a      	subs	r2, r3, #4
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2201      	movs	r2, #1
 80002e4:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0x00000000;					//R0
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	1f1a      	subs	r2, r3, #4
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]

	if(pos!=IDLE_TASK)
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	2b04      	cmp	r3, #4
 80002fc:	d04b      	beq.n	8000396 <addTaskToListAtIndex+0x17e>
	{
		*(--(taskToAdd->stack)) 	= 0x0000000B;					//R11
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	1f1a      	subs	r2, r3, #4
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	220b      	movs	r2, #11
 800030e:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x0000000A;					//R10
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	1f1a      	subs	r2, r3, #4
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	220a      	movs	r2, #10
 8000320:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000009;					//R9
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	1f1a      	subs	r2, r3, #4
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2209      	movs	r2, #9
 8000332:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000008;					//R8
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	1f1a      	subs	r2, r3, #4
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2208      	movs	r2, #8
 8000344:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000007;					//R7
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	1f1a      	subs	r2, r3, #4
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2207      	movs	r2, #7
 8000356:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000006;					//R6
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	1f1a      	subs	r2, r3, #4
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2206      	movs	r2, #6
 8000368:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000005;					//R5
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	1f1a      	subs	r2, r3, #4
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2205      	movs	r2, #5
 800037a:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000004;					//R4
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	1f1a      	subs	r2, r3, #4
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2204      	movs	r2, #4
 800038c:	601a      	str	r2, [r3, #0]
		// Initialize the task properties
		taskToAdd->state 		= READY;
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	2202      	movs	r2, #2
 8000392:	731a      	strb	r2, [r3, #12]
 8000394:	e00a      	b.n	80003ac <addTaskToListAtIndex+0x194>
	}else{
		taskToAdd->state 		= RUNNING;
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2201      	movs	r2, #1
 800039a:	731a      	strb	r2, [r3, #12]
		currentTask = taskToAdd;
 800039c:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <addTaskToListAtIndex+0x1a8>)
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	6013      	str	r3, [r2, #0]
		// Update the CPU PSP with our new stack pointer
		writePSP(taskToAdd->stack);
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ff27 	bl	80001fa <writePSP>
	}

	taskToAdd->priority 	= priority;
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	79fa      	ldrb	r2, [r7, #7]
 80003b0:	735a      	strb	r2, [r3, #13]
}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000080 	.word	0x20000080
 80003c0:	200000d0 	.word	0x200000d0

080003c4 <addTaskToList>:
 * fills the stack up so that the context switch will
 * successfully pop these registers and start running
 * at the correct address when returning from the SysTick ISR
 */
void addTaskToList(void (*function)(void), uint32_t stackSize, int8_t priority)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	4613      	mov	r3, r2
 80003d0:	71fb      	strb	r3, [r7, #7]
	size_t i = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
	// Simply find the next empty slot
	// Loops when no more slots are available
	while(taskList[i].state != UNUSED)
 80003d6:	e006      	b.n	80003e6 <addTaskToList+0x22>
	{
		//increment i and roll back at the limit
		i++;
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	3301      	adds	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
		i &= TASK_MASK;
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	f003 0303 	and.w	r3, r3, #3
 80003e4:	617b      	str	r3, [r7, #20]
	while(taskList[i].state != UNUSED)
 80003e6:	4a09      	ldr	r2, [pc, #36]	; (800040c <addTaskToList+0x48>)
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	011b      	lsls	r3, r3, #4
 80003ec:	4413      	add	r3, r2
 80003ee:	330c      	adds	r3, #12
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1f0      	bne.n	80003d8 <addTaskToList+0x14>
	}
	addTaskToListAtIndex(function, stackSize, priority, i);
 80003f6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	68b9      	ldr	r1, [r7, #8]
 80003fe:	68f8      	ldr	r0, [r7, #12]
 8000400:	f7ff ff0a 	bl	8000218 <addTaskToListAtIndex>
}
 8000404:	bf00      	nop
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000080 	.word	0x20000080

08000410 <startVersdOS>:

void startVersdOS(uint16_t sysTickPeriodIn_ms) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	80fb      	strh	r3, [r7, #6]
	// Configure SysTick of 1 ms
	SysTick->LOAD = sysTickPeriodIn_ms * CLOCK_FREQ_IN_KHz - 1;
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	4a13      	ldr	r2, [pc, #76]	; (800046c <startVersdOS+0x5c>)
 800041e:	fb02 f303 	mul.w	r3, r2, r3
 8000422:	1e5a      	subs	r2, r3, #1
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <startVersdOS+0x60>)
 8000426:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <startVersdOS+0x60>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk //Clock source selection = Processor clock (AHB)
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <startVersdOS+0x60>)
 8000430:	2207      	movs	r2, #7
 8000432:	601a      	str	r2, [r3, #0]
					| SysTick_CTRL_TICKINT_Msk //Counting down to zero to asserts the SysTick exception request
					| SysTick_CTRL_ENABLE_Msk; //Counter enable

	//set systick and pendsv interrupt priority to lowest.
	//svc will be highest.
	SCB->SHP[2] |= 0xFF<<24;
 8000434:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <startVersdOS+0x64>)
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <startVersdOS+0x64>)
 8000438:	7e92      	ldrb	r2, [r2, #26]
 800043a:	b2d2      	uxtb	r2, r2
 800043c:	769a      	strb	r2, [r3, #26]
	SCB->SHP[2]  |= 0xFF<<16;
 800043e:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <startVersdOS+0x64>)
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <startVersdOS+0x64>)
 8000442:	7e92      	ldrb	r2, [r2, #26]
 8000444:	b2d2      	uxtb	r2, r2
 8000446:	769a      	strb	r2, [r3, #26]

	// Create Idle task
	addTaskToListAtIndex(idleTask, 128, -1, IDLE_TASK);
 8000448:	2304      	movs	r3, #4
 800044a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	4809      	ldr	r0, [pc, #36]	; (8000478 <startVersdOS+0x68>)
 8000452:	f7ff fee1 	bl	8000218 <addTaskToListAtIndex>
 8000456:	2301      	movs	r3, #1
 8000458:	60fb      	str	r3, [r7, #12]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	f383 8814 	msr	CONTROL, r3
}
 8000460:	bf00      	nop

	__set_CONTROL(1 << CONTROL_nPRIV_Pos); // enter unpriviliged mode

	__asm(" wfi"); // Sleep until next SysTick
 8000462:	bf30      	wfi
}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	000186a0 	.word	0x000186a0
 8000470:	e000e010 	.word	0xe000e010
 8000474:	e000ed00 	.word	0xe000ed00
 8000478:	08000211 	.word	0x08000211

0800047c <schedule>:

// currentTask is running now, return next task to run
task * schedule()
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
	task* tempTaskPtr = currentTask;
 8000482:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <schedule+0x6c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	60fb      	str	r3, [r7, #12]
	task *idleTaskPtr = &taskList[IDLE_TASK];
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <schedule+0x70>)
 800048a:	607b      	str	r3, [r7, #4]

	if (tempTaskPtr->state == RUNNING) {
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	7b1b      	ldrb	r3, [r3, #12]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d102      	bne.n	800049a <schedule+0x1e>
		tempTaskPtr->state = READY;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	2202      	movs	r2, #2
 8000498:	731a      	strb	r2, [r3, #12]
	}

	int teller=0;
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]

	//Find next ready, non idle task.
	do
	{
		tempTaskPtr++;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	3310      	adds	r3, #16
 80004a2:	60fb      	str	r3, [r7, #12]

		if( (tempTaskPtr-1) == idleTaskPtr || tempTaskPtr == idleTaskPtr)
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3b10      	subs	r3, #16
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d003      	beq.n	80004b6 <schedule+0x3a>
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	429a      	cmp	r2, r3
 80004b4:	d101      	bne.n	80004ba <schedule+0x3e>
		{
			//since idle task is the last in the list, we've reached the end
			//and need to continue at the beginning
			tempTaskPtr = &taskList[0];
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <schedule+0x74>)
 80004b8:	60fb      	str	r3, [r7, #12]
		}
	}while(tempTaskPtr->state != READY && teller++ <= MAX_TASKS);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	7b1b      	ldrb	r3, [r3, #12]
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d004      	beq.n	80004cc <schedule+0x50>
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	1c5a      	adds	r2, r3, #1
 80004c6:	60ba      	str	r2, [r7, #8]
 80004c8:	2b04      	cmp	r3, #4
 80004ca:	dde8      	ble.n	800049e <schedule+0x22>

	//if no task was found
	if(tempTaskPtr->state != READY)
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	7b1b      	ldrb	r3, [r3, #12]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d001      	beq.n	80004d8 <schedule+0x5c>
	{
		//idle task
		tempTaskPtr = idleTaskPtr;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
	}

	return tempTaskPtr;
 80004d8:	68fb      	ldr	r3, [r7, #12]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	200000d0 	.word	0x200000d0
 80004ec:	200000c0 	.word	0x200000c0
 80004f0:	20000080 	.word	0x20000080

080004f4 <SysTick_Handler>:
/*
 * Interrupt routine for the Systick timer
 * simply calls the scheduler
 * */
void SysTick_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
	SysTick_flag = true;
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <SysTick_Handler+0x84>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < MAX_TASKS; i++)
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	e026      	b.n	8000554 <SysTick_Handler+0x60>
	{
		if (taskList[i].state == WAITING)
 8000506:	4a1d      	ldr	r2, [pc, #116]	; (800057c <SysTick_Handler+0x88>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	4413      	add	r3, r2
 800050e:	330c      	adds	r3, #12
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b03      	cmp	r3, #3
 8000514:	d11b      	bne.n	800054e <SysTick_Handler+0x5a>
		{
			taskList[i].counter--;
 8000516:	4a19      	ldr	r2, [pc, #100]	; (800057c <SysTick_Handler+0x88>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	4413      	add	r3, r2
 800051e:	3304      	adds	r3, #4
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	1e5a      	subs	r2, r3, #1
 8000524:	4915      	ldr	r1, [pc, #84]	; (800057c <SysTick_Handler+0x88>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	440b      	add	r3, r1
 800052c:	3304      	adds	r3, #4
 800052e:	601a      	str	r2, [r3, #0]
			if (taskList[i].counter == 0) {
 8000530:	4a12      	ldr	r2, [pc, #72]	; (800057c <SysTick_Handler+0x88>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	4413      	add	r3, r2
 8000538:	3304      	adds	r3, #4
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d106      	bne.n	800054e <SysTick_Handler+0x5a>
				taskList[i].state = READY;
 8000540:	4a0e      	ldr	r2, [pc, #56]	; (800057c <SysTick_Handler+0x88>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	011b      	lsls	r3, r3, #4
 8000546:	4413      	add	r3, r2
 8000548:	330c      	adds	r3, #12
 800054a:	2202      	movs	r2, #2
 800054c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3301      	adds	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b03      	cmp	r3, #3
 8000558:	ddd5      	ble.n	8000506 <SysTick_Handler+0x12>
			}
		}
	}

	//select the next task
	taskToExecute = schedule();
 800055a:	f7ff ff8f 	bl	800047c <schedule>
 800055e:	4603      	mov	r3, r0
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <SysTick_Handler+0x8c>)
 8000562:	6013      	str	r3, [r2, #0]
	//request context switch
	SCB->ICSR |= (1<<28);
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <SysTick_Handler+0x90>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <SysTick_Handler+0x90>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6053      	str	r3, [r2, #4]
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200000d8 	.word	0x200000d8
 800057c:	20000080 	.word	0x20000080
 8000580:	200000d4 	.word	0x200000d4
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <PendSV_Handler>:

__attribute__((naked)) // No function entry and exit code
void PendSV_Handler(void)
{
 8000588:	2400      	movs	r4, #0
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800058a:	f384 8814 	msr	CONTROL, r4
}
 800058e:	bf00      	nop
	__set_CONTROL(0); // enter priviliged mode
	//Push {R4-R11} context to PSP
	pushRegistersToCurrentPSP();
 8000590:	f7ff fe22 	bl	80001d8 <pushRegistersToCurrentPSP>
	//Save the new stack pointer after the push
	currentTask->stack = readPSP();
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <PendSV_Handler+0x40>)
 8000596:	681c      	ldr	r4, [r3, #0]
 8000598:	f7ff fe2c 	bl	80001f4 <readPSP>
 800059c:	4603      	mov	r3, r0
 800059e:	6023      	str	r3, [r4, #0]

	currentTask = taskToExecute;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <PendSV_Handler+0x44>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <PendSV_Handler+0x40>)
 80005a6:	6013      	str	r3, [r2, #0]

	//Load the new stack pointer from (new) currentTask
	writePSP(currentTask->stack);
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <PendSV_Handler+0x40>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fe23 	bl	80001fa <writePSP>

	//Pop {R4-R11} context from PSP
	popRegistersFromCurrentPSP();
 80005b4:	f7ff fe17 	bl	80001e6 <popRegistersFromCurrentPSP>
 80005b8:	2401      	movs	r4, #1
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80005ba:	f384 8814 	msr	CONTROL, r4
}
 80005be:	bf00      	nop

	__set_CONTROL(1 << CONTROL_nPRIV_Pos); // enter unpriviliged mode
	returnToPSP();
 80005c0:	f7ff fe20 	bl	8000204 <returnToPSP>
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	200000d0 	.word	0x200000d0
 80005cc:	200000d4 	.word	0x200000d4

080005d0 <SVC_Handler>:

/* The most simple SVC implementation
 */

void SVC_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	taskToExecute = schedule();
 80005d4:	f7ff ff52 	bl	800047c <schedule>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <SVC_Handler+0x20>)
 80005dc:	6013      	str	r3, [r2, #0]
	SCB->ICSR |= (1<<28);
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <SVC_Handler+0x24>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <SVC_Handler+0x24>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	6053      	str	r3, [r2, #4]
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000d4 	.word	0x200000d4
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <taskYield>:

//Call Super Visor
void taskYield(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	asm("	svc #1");
 80005fc:	df01      	svc	1

}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <requestDelay>:

void requestDelay(uint32_t ticks)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	currentTask->counter = ticks;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <requestDelay+0x24>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	605a      	str	r2, [r3, #4]
	currentTask->state = WAITING;
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <requestDelay+0x24>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2203      	movs	r2, #3
 800061e:	731a      	strb	r2, [r3, #12]
	taskYield();
 8000620:	f7ff ffea 	bl	80005f8 <taskYield>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000d0 	.word	0x200000d0

08000630 <delay_nonblocking>:
		SysTick_flag = false;
		ticks--;
	}
}

void delay_nonblocking (unsigned int ticks) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

	// ask os to not be scheduled for the amount of ticks (use counter)
	requestDelay(ticks);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ffe5 	bl	8000608 <requestDelay>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <toggleGreen>:

void toggleGreen(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	while(1) {
    	GPIOD->ODR ^= 1 << GREEN;
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <toggleGreen+0x18>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <toggleGreen+0x18>)
 8000652:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000656:	6153      	str	r3, [r2, #20]
    	delay_nonblocking(100);
 8000658:	2064      	movs	r0, #100	; 0x64
 800065a:	f7ff ffe9 	bl	8000630 <delay_nonblocking>
    	GPIOD->ODR ^= 1 << GREEN;
 800065e:	e7f5      	b.n	800064c <toggleGreen+0x4>
 8000660:	40020c00 	.word	0x40020c00

08000664 <toggleOrange>:
	}
}

void toggleOrange(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	while(1) {
    	GPIOD->ODR ^= 1 << ORANGE;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <toggleOrange+0x18>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	4a03      	ldr	r2, [pc, #12]	; (800067c <toggleOrange+0x18>)
 800066e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000672:	6153      	str	r3, [r2, #20]
    	delay_nonblocking(200);
 8000674:	20c8      	movs	r0, #200	; 0xc8
 8000676:	f7ff ffdb 	bl	8000630 <delay_nonblocking>
    	GPIOD->ODR ^= 1 << ORANGE;
 800067a:	e7f5      	b.n	8000668 <toggleOrange+0x4>
 800067c:	40020c00 	.word	0x40020c00

08000680 <toggleRed>:
	}
}

void toggleRed(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	while (1) {
    	GPIOD->ODR ^= 1 << RED;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <toggleRed+0x1c>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <toggleRed+0x1c>)
 800068a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800068e:	6153      	str	r3, [r2, #20]
    	delay_nonblocking(400);
 8000690:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000694:	f7ff ffcc 	bl	8000630 <delay_nonblocking>
    	GPIOD->ODR ^= 1 << RED;
 8000698:	e7f4      	b.n	8000684 <toggleRed+0x4>
 800069a:	bf00      	nop
 800069c:	40020c00 	.word	0x40020c00

080006a0 <toggleBlue>:
	}
}

void toggleBlue(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	while(1) {
    	GPIOD->ODR ^= 1 << BLUE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <toggleBlue+0x20>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <toggleBlue+0x20>)
 80006aa:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80006ae:	6153      	str	r3, [r2, #20]
    	SysTick->LOAD = 2 * CLOCK_FREQ_IN_KHz - 1;
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <toggleBlue+0x24>)
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <toggleBlue+0x28>)
 80006b4:	605a      	str	r2, [r3, #4]
    	delay_nonblocking(800);
 80006b6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80006ba:	f7ff ffb9 	bl	8000630 <delay_nonblocking>
    	GPIOD->ODR ^= 1 << BLUE;
 80006be:	e7f1      	b.n	80006a4 <toggleBlue+0x4>
 80006c0:	40020c00 	.word	0x40020c00
 80006c4:	e000e010 	.word	0xe000e010
 80006c8:	00030d3f 	.word	0x00030d3f

080006cc <main>:
	}
}

int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	// Use HSE (8 MHz)
	// Enable HSE
	RCC->CR |= RCC_CR_HSEON;
 80006d0:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <main+0xe8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a37      	ldr	r2, [pc, #220]	; (80007b4 <main+0xe8>)
 80006d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006da:	6013      	str	r3, [r2, #0]
	// Wait until HSE is stable
	while ((RCC->CR & RCC_CR_HSERDY) == 0);
 80006dc:	bf00      	nop
 80006de:	4b35      	ldr	r3, [pc, #212]	; (80007b4 <main+0xe8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0f9      	beq.n	80006de <main+0x12>

	// Power interface clock enable
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006ea:	4b32      	ldr	r3, [pc, #200]	; (80007b4 <main+0xe8>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	4a31      	ldr	r2, [pc, #196]	; (80007b4 <main+0xe8>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	6413      	str	r3, [r2, #64]	; 0x40
	// Regulator voltage scaling output selection Scale 1 mode <= 100 MHz
	PWR->CR |= PWR_CR_VOS;
 80006f6:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <main+0xec>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a2f      	ldr	r2, [pc, #188]	; (80007b8 <main+0xec>)
 80006fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000700:	6013      	str	r3, [r2, #0]
	// Use 3 wait states when reading Flash at 100 MHz.
	FLASH->ACR = FLASH_ACR_LATENCY_3WS;
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <main+0xf0>)
 8000704:	2203      	movs	r2, #3
 8000706:	601a      	str	r2, [r3, #0]
	// Wait until 3 wait states are used
	while ((FLASH->ACR & FLASH_ACR_LATENCY_3WS) == 0);
 8000708:	bf00      	nop
 800070a:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <main+0xf0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f003 0303 	and.w	r3, r3, #3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f9      	beq.n	800070a <main+0x3e>
	// Enable flash prefetch buffer, instruction and data cache
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN;
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <main+0xf0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a28      	ldr	r2, [pc, #160]	; (80007bc <main+0xf0>)
 800071c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000720:	6013      	str	r3, [r2, #0]

	// Use PLL to generate 100 MHz clock
	// PLL output = 8 / M * N / P: M = 4, N = 100, P = 2 to generate 100 MHz
	RCC->PLLCFGR = 0x20000000
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <main+0xe8>)
 8000724:	4a26      	ldr	r2, [pc, #152]	; (80007c0 <main+0xf4>)
 8000726:	605a      	str	r2, [r3, #4]
		| RCC_PLLCFGR_PLLSRC_HSE
		| (0 << RCC_PLLCFGR_PLLP_Pos)
		| (100 << RCC_PLLCFGR_PLLN_Pos)
		| (4 << RCC_PLLCFGR_PLLM_Pos);
	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <main+0xe8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <main+0xe8>)
 800072e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000732:	6013      	str	r3, [r2, #0]
	// Wait until PLL is locked
	while ((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000734:	bf00      	nop
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <main+0xe8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f9      	beq.n	8000736 <main+0x6a>
	// Select PLL as the system clock. AHB clock divided by 2.
	RCC->CFGR |= RCC_CFGR_SW_PLL | RCC_CFGR_PPRE1_DIV2;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <main+0xe8>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <main+0xe8>)
 8000748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6093      	str	r3, [r2, #8]
	// Wait until PLL used as the system clock
	while ((RCC->CFGR & RCC_CFGR_SWS_PLL) == 0);
 8000752:	bf00      	nop
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <main+0xe8>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 0308 	and.w	r3, r3, #8
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0f9      	beq.n	8000754 <main+0x88>
	// Disable HSI
	RCC->CR &= ~RCC_CR_HSION;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <main+0xe8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <main+0xe8>)
 8000766:	f023 0301 	bic.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

	// GPIO Port D Clock Enable
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <main+0xe8>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <main+0xe8>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	6313      	str	r3, [r2, #48]	; 0x30
	// GPIO Port D led pins Push/Pull Output
	GPIOD->MODER |= 1 << 2 * GREEN | 1 << 2 * ORANGE | 1 << 2 * RED | 1 << 2 * BLUE;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <main+0xf8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <main+0xf8>)
 800077e:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000782:	6013      	str	r3, [r2, #0]


    // Create tasks. Provide fpointer, stacksize, and priority:
	addTaskToList(toggleGreen, 128, 2);
 8000784:	2202      	movs	r2, #2
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	480f      	ldr	r0, [pc, #60]	; (80007c8 <main+0xfc>)
 800078a:	f7ff fe1b 	bl	80003c4 <addTaskToList>
    addTaskToList(toggleOrange, 128, 2);
 800078e:	2202      	movs	r2, #2
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <main+0x100>)
 8000794:	f7ff fe16 	bl	80003c4 <addTaskToList>
    addTaskToList(toggleRed, 128, 2);
 8000798:	2202      	movs	r2, #2
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <main+0x104>)
 800079e:	f7ff fe11 	bl	80003c4 <addTaskToList>
    addTaskToList(toggleBlue, 128, 2);
 80007a2:	2202      	movs	r2, #2
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <main+0x108>)
 80007a8:	f7ff fe0c 	bl	80003c4 <addTaskToList>

	// Start VersdOS with 1 ms sysTick
	startVersdOS(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff fe2f 	bl	8000410 <startVersdOS>

	while(1);
 80007b2:	e7fe      	b.n	80007b2 <main+0xe6>
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000
 80007bc:	40023c00 	.word	0x40023c00
 80007c0:	20401904 	.word	0x20401904
 80007c4:	40020c00 	.word	0x40020c00
 80007c8:	08000649 	.word	0x08000649
 80007cc:	08000665 	.word	0x08000665
 80007d0:	08000681 	.word	0x08000681
 80007d4:	080006a1 	.word	0x080006a1

080007d8 <Reset_Handler>:
 80007d8:	f8df d030 	ldr.w	sp, [pc, #48]	; 800080c <LoopFillZerobss+0xe>
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <LoopFillZerobss+0x12>)
 80007de:	490d      	ldr	r1, [pc, #52]	; (8000814 <LoopFillZerobss+0x16>)
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <LoopFillZerobss+0x1a>)
 80007e2:	2300      	movs	r3, #0
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:
 80007e6:	58d4      	ldr	r4, [r2, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:
 80007ec:	18c4      	adds	r4, r0, r3
 80007ee:	428c      	cmp	r4, r1
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopFillZerobss+0x1e>)
 80007f4:	4c0a      	ldr	r4, [pc, #40]	; (8000820 <LoopFillZerobss+0x22>)
 80007f6:	2300      	movs	r3, #0
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:
 80007fe:	42a2      	cmp	r2, r4
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>
 8000802:	f000 f811 	bl	8000828 <__libc_init_array>
 8000806:	f7ff ff61 	bl	80006cc <main>
 800080a:	4770      	bx	lr
 800080c:	20020000 	.word	0x20020000
 8000810:	20000000 	.word	0x20000000
 8000814:	20000064 	.word	0x20000064
 8000818:	08000a20 	.word	0x08000a20
 800081c:	20000064 	.word	0x20000064
 8000820:	200000f0 	.word	0x200000f0

08000824 <ADC_IRQHandler>:
 8000824:	e7fe      	b.n	8000824 <ADC_IRQHandler>
	...

08000828 <__libc_init_array>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	4d0d      	ldr	r5, [pc, #52]	; (8000860 <__libc_init_array+0x38>)
 800082c:	4c0d      	ldr	r4, [pc, #52]	; (8000864 <__libc_init_array+0x3c>)
 800082e:	1b64      	subs	r4, r4, r5
 8000830:	10a4      	asrs	r4, r4, #2
 8000832:	2600      	movs	r6, #0
 8000834:	42a6      	cmp	r6, r4
 8000836:	d109      	bne.n	800084c <__libc_init_array+0x24>
 8000838:	4d0b      	ldr	r5, [pc, #44]	; (8000868 <__libc_init_array+0x40>)
 800083a:	4c0c      	ldr	r4, [pc, #48]	; (800086c <__libc_init_array+0x44>)
 800083c:	f000 f8e0 	bl	8000a00 <_init>
 8000840:	1b64      	subs	r4, r4, r5
 8000842:	10a4      	asrs	r4, r4, #2
 8000844:	2600      	movs	r6, #0
 8000846:	42a6      	cmp	r6, r4
 8000848:	d105      	bne.n	8000856 <__libc_init_array+0x2e>
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000850:	4798      	blx	r3
 8000852:	3601      	adds	r6, #1
 8000854:	e7ee      	b.n	8000834 <__libc_init_array+0xc>
 8000856:	f855 3b04 	ldr.w	r3, [r5], #4
 800085a:	4798      	blx	r3
 800085c:	3601      	adds	r6, #1
 800085e:	e7f2      	b.n	8000846 <__libc_init_array+0x1e>
 8000860:	08000a18 	.word	0x08000a18
 8000864:	08000a18 	.word	0x08000a18
 8000868:	08000a18 	.word	0x08000a18
 800086c:	08000a1c 	.word	0x08000a1c

08000870 <malloc>:
 8000870:	4b02      	ldr	r3, [pc, #8]	; (800087c <malloc+0xc>)
 8000872:	4601      	mov	r1, r0
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	f000 b823 	b.w	80008c0 <_malloc_r>
 800087a:	bf00      	nop
 800087c:	20000000 	.word	0x20000000

08000880 <sbrk_aligned>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	4e0e      	ldr	r6, [pc, #56]	; (80008bc <sbrk_aligned+0x3c>)
 8000884:	460c      	mov	r4, r1
 8000886:	6831      	ldr	r1, [r6, #0]
 8000888:	4605      	mov	r5, r0
 800088a:	b911      	cbnz	r1, 8000892 <sbrk_aligned+0x12>
 800088c:	f000 f88c 	bl	80009a8 <_sbrk_r>
 8000890:	6030      	str	r0, [r6, #0]
 8000892:	4621      	mov	r1, r4
 8000894:	4628      	mov	r0, r5
 8000896:	f000 f887 	bl	80009a8 <_sbrk_r>
 800089a:	1c43      	adds	r3, r0, #1
 800089c:	d00a      	beq.n	80008b4 <sbrk_aligned+0x34>
 800089e:	1cc4      	adds	r4, r0, #3
 80008a0:	f024 0403 	bic.w	r4, r4, #3
 80008a4:	42a0      	cmp	r0, r4
 80008a6:	d007      	beq.n	80008b8 <sbrk_aligned+0x38>
 80008a8:	1a21      	subs	r1, r4, r0
 80008aa:	4628      	mov	r0, r5
 80008ac:	f000 f87c 	bl	80009a8 <_sbrk_r>
 80008b0:	3001      	adds	r0, #1
 80008b2:	d101      	bne.n	80008b8 <sbrk_aligned+0x38>
 80008b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80008b8:	4620      	mov	r0, r4
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
 80008bc:	200000e0 	.word	0x200000e0

080008c0 <_malloc_r>:
 80008c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008c4:	1ccd      	adds	r5, r1, #3
 80008c6:	f025 0503 	bic.w	r5, r5, #3
 80008ca:	3508      	adds	r5, #8
 80008cc:	2d0c      	cmp	r5, #12
 80008ce:	bf38      	it	cc
 80008d0:	250c      	movcc	r5, #12
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	4607      	mov	r7, r0
 80008d6:	db01      	blt.n	80008dc <_malloc_r+0x1c>
 80008d8:	42a9      	cmp	r1, r5
 80008da:	d905      	bls.n	80008e8 <_malloc_r+0x28>
 80008dc:	230c      	movs	r3, #12
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	2600      	movs	r6, #0
 80008e2:	4630      	mov	r0, r6
 80008e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008e8:	4e2e      	ldr	r6, [pc, #184]	; (80009a4 <_malloc_r+0xe4>)
 80008ea:	f000 f86d 	bl	80009c8 <__malloc_lock>
 80008ee:	6833      	ldr	r3, [r6, #0]
 80008f0:	461c      	mov	r4, r3
 80008f2:	bb34      	cbnz	r4, 8000942 <_malloc_r+0x82>
 80008f4:	4629      	mov	r1, r5
 80008f6:	4638      	mov	r0, r7
 80008f8:	f7ff ffc2 	bl	8000880 <sbrk_aligned>
 80008fc:	1c43      	adds	r3, r0, #1
 80008fe:	4604      	mov	r4, r0
 8000900:	d14d      	bne.n	800099e <_malloc_r+0xde>
 8000902:	6834      	ldr	r4, [r6, #0]
 8000904:	4626      	mov	r6, r4
 8000906:	2e00      	cmp	r6, #0
 8000908:	d140      	bne.n	800098c <_malloc_r+0xcc>
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	4631      	mov	r1, r6
 800090e:	4638      	mov	r0, r7
 8000910:	eb04 0803 	add.w	r8, r4, r3
 8000914:	f000 f848 	bl	80009a8 <_sbrk_r>
 8000918:	4580      	cmp	r8, r0
 800091a:	d13a      	bne.n	8000992 <_malloc_r+0xd2>
 800091c:	6821      	ldr	r1, [r4, #0]
 800091e:	3503      	adds	r5, #3
 8000920:	1a6d      	subs	r5, r5, r1
 8000922:	f025 0503 	bic.w	r5, r5, #3
 8000926:	3508      	adds	r5, #8
 8000928:	2d0c      	cmp	r5, #12
 800092a:	bf38      	it	cc
 800092c:	250c      	movcc	r5, #12
 800092e:	4629      	mov	r1, r5
 8000930:	4638      	mov	r0, r7
 8000932:	f7ff ffa5 	bl	8000880 <sbrk_aligned>
 8000936:	3001      	adds	r0, #1
 8000938:	d02b      	beq.n	8000992 <_malloc_r+0xd2>
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	442b      	add	r3, r5
 800093e:	6023      	str	r3, [r4, #0]
 8000940:	e00e      	b.n	8000960 <_malloc_r+0xa0>
 8000942:	6822      	ldr	r2, [r4, #0]
 8000944:	1b52      	subs	r2, r2, r5
 8000946:	d41e      	bmi.n	8000986 <_malloc_r+0xc6>
 8000948:	2a0b      	cmp	r2, #11
 800094a:	d916      	bls.n	800097a <_malloc_r+0xba>
 800094c:	1961      	adds	r1, r4, r5
 800094e:	42a3      	cmp	r3, r4
 8000950:	6025      	str	r5, [r4, #0]
 8000952:	bf18      	it	ne
 8000954:	6059      	strne	r1, [r3, #4]
 8000956:	6863      	ldr	r3, [r4, #4]
 8000958:	bf08      	it	eq
 800095a:	6031      	streq	r1, [r6, #0]
 800095c:	5162      	str	r2, [r4, r5]
 800095e:	604b      	str	r3, [r1, #4]
 8000960:	4638      	mov	r0, r7
 8000962:	f104 060b 	add.w	r6, r4, #11
 8000966:	f000 f835 	bl	80009d4 <__malloc_unlock>
 800096a:	f026 0607 	bic.w	r6, r6, #7
 800096e:	1d23      	adds	r3, r4, #4
 8000970:	1af2      	subs	r2, r6, r3
 8000972:	d0b6      	beq.n	80008e2 <_malloc_r+0x22>
 8000974:	1b9b      	subs	r3, r3, r6
 8000976:	50a3      	str	r3, [r4, r2]
 8000978:	e7b3      	b.n	80008e2 <_malloc_r+0x22>
 800097a:	6862      	ldr	r2, [r4, #4]
 800097c:	42a3      	cmp	r3, r4
 800097e:	bf0c      	ite	eq
 8000980:	6032      	streq	r2, [r6, #0]
 8000982:	605a      	strne	r2, [r3, #4]
 8000984:	e7ec      	b.n	8000960 <_malloc_r+0xa0>
 8000986:	4623      	mov	r3, r4
 8000988:	6864      	ldr	r4, [r4, #4]
 800098a:	e7b2      	b.n	80008f2 <_malloc_r+0x32>
 800098c:	4634      	mov	r4, r6
 800098e:	6876      	ldr	r6, [r6, #4]
 8000990:	e7b9      	b.n	8000906 <_malloc_r+0x46>
 8000992:	230c      	movs	r3, #12
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4638      	mov	r0, r7
 8000998:	f000 f81c 	bl	80009d4 <__malloc_unlock>
 800099c:	e7a1      	b.n	80008e2 <_malloc_r+0x22>
 800099e:	6025      	str	r5, [r4, #0]
 80009a0:	e7de      	b.n	8000960 <_malloc_r+0xa0>
 80009a2:	bf00      	nop
 80009a4:	200000dc 	.word	0x200000dc

080009a8 <_sbrk_r>:
 80009a8:	b538      	push	{r3, r4, r5, lr}
 80009aa:	4d06      	ldr	r5, [pc, #24]	; (80009c4 <_sbrk_r+0x1c>)
 80009ac:	2300      	movs	r3, #0
 80009ae:	4604      	mov	r4, r0
 80009b0:	4608      	mov	r0, r1
 80009b2:	602b      	str	r3, [r5, #0]
 80009b4:	f000 f816 	bl	80009e4 <_sbrk>
 80009b8:	1c43      	adds	r3, r0, #1
 80009ba:	d102      	bne.n	80009c2 <_sbrk_r+0x1a>
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	b103      	cbz	r3, 80009c2 <_sbrk_r+0x1a>
 80009c0:	6023      	str	r3, [r4, #0]
 80009c2:	bd38      	pop	{r3, r4, r5, pc}
 80009c4:	200000e4 	.word	0x200000e4

080009c8 <__malloc_lock>:
 80009c8:	4801      	ldr	r0, [pc, #4]	; (80009d0 <__malloc_lock+0x8>)
 80009ca:	f000 b809 	b.w	80009e0 <__retarget_lock_acquire_recursive>
 80009ce:	bf00      	nop
 80009d0:	200000e8 	.word	0x200000e8

080009d4 <__malloc_unlock>:
 80009d4:	4801      	ldr	r0, [pc, #4]	; (80009dc <__malloc_unlock+0x8>)
 80009d6:	f000 b804 	b.w	80009e2 <__retarget_lock_release_recursive>
 80009da:	bf00      	nop
 80009dc:	200000e8 	.word	0x200000e8

080009e0 <__retarget_lock_acquire_recursive>:
 80009e0:	4770      	bx	lr

080009e2 <__retarget_lock_release_recursive>:
 80009e2:	4770      	bx	lr

080009e4 <_sbrk>:
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <_sbrk+0x14>)
 80009e6:	6811      	ldr	r1, [r2, #0]
 80009e8:	4603      	mov	r3, r0
 80009ea:	b909      	cbnz	r1, 80009f0 <_sbrk+0xc>
 80009ec:	4903      	ldr	r1, [pc, #12]	; (80009fc <_sbrk+0x18>)
 80009ee:	6011      	str	r1, [r2, #0]
 80009f0:	6810      	ldr	r0, [r2, #0]
 80009f2:	4403      	add	r3, r0
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	4770      	bx	lr
 80009f8:	200000ec 	.word	0x200000ec
 80009fc:	200000f0 	.word	0x200000f0

08000a00 <_init>:
 8000a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a02:	bf00      	nop
 8000a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a06:	bc08      	pop	{r3}
 8000a08:	469e      	mov	lr, r3
 8000a0a:	4770      	bx	lr

08000a0c <_fini>:
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	bf00      	nop
 8000a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a12:	bc08      	pop	{r3}
 8000a14:	469e      	mov	lr, r3
 8000a16:	4770      	bx	lr
