
VersdOS_student.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000850  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009e8  080009e8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009e8  080009e8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080009e8  080009e8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009e8  080009e8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009e8  080009e8  000109e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009ec  080009ec  000109ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080009f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000064  08000a54  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08000a54  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bad  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d4  00000000  00000000  00020c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000100  00000000  00000000  00021018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00021118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e809  00000000  00000000  000211d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000faa  00000000  00000000  0002f9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00052faa  00000000  00000000  00030983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008392d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000468  00000000  00000000  00083980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080009d0 	.word	0x080009d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	080009d0 	.word	0x080009d0

080001d8 <pushRegistersToCurrentPSP>:
        .global returnToPSP
        .global returnToMSP
       // .global SVC_Handler
		
pushRegistersToCurrentPSP:
		MRS 	r0	, psp			//Move PSP to register R0 (the function argument)
 80001d8:	f3ef 8009 	mrs	r0, PSP
		STMDB 	r0!	, {r4-r11}		//Store multiple registers decrement address before each access,
 80001dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
									//when done write back last used address to %0 (new SP location)
		MSR 	psp	, r0			//Move register %0 to psp to update to the new SP, output to scratch
 80001e0:	f380 8809 	msr	PSP, r0
		MOV		PC	, LR			//return by moving link-register to program counter
 80001e4:	46f7      	mov	pc, lr

080001e6 <popRegistersFromCurrentPSP>:

popRegistersFromCurrentPSP:
		MRS 	R0	, psp			//Move PSP to register R0
 80001e6:	f3ef 8009 	mrs	r0, PSP
		LDMIA 	R0!	, {r4-r11}		//Load multiple registers increment address after each access,
 80001ea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
									//when done write back last used address to R0 (new SP location)
		MSR 	psp	, R0			//Move register R0 to psp to update to the new SP, output to scratch
 80001ee:	f380 8809 	msr	PSP, r0
		MOV		PC	, LR			//return by moving link-register to program counter
 80001f2:	46f7      	mov	pc, lr

080001f4 <readPSP>:

readPSP:
		MRS 	R0 , psp			//move psp to r0
 80001f4:	f3ef 8009 	mrs	r0, PSP
		MOV		PC	, LR			//return by moving link-register to program counter
 80001f8:	46f7      	mov	pc, lr

080001fa <writePSP>:

writePSP:
    	MSR 	psp	, R0			//Move r0 to psp.
 80001fa:	f380 8809 	msr	PSP, r0
    	ISB							//flush pipeline
 80001fe:	f3bf 8f6f 	isb	sy
		MOV		PC	, LR			//return by moving link-register to program counter
 8000202:	46f7      	mov	pc, lr

08000204 <returnToPSP>:

returnToPSP:
		ldr 	lr, =0xFFFFFFFD         //terug met process stack
 8000204:	f06f 0e02 	mvn.w	lr, #2
		bx		lr
 8000208:	4770      	bx	lr

0800020a <returnToMSP>:

returnToMSP:
		ldr 	lr, =0xFFFFFFF9         //terug met process stack
 800020a:	f06f 0e06 	mvn.w	lr, #6
		bx		lr
 800020e:	4770      	bx	lr

08000210 <idleTask>:
task * currentTask;
task * taskToExecute;

// Idle task
void idleTask(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	while (1)
	{
		__asm(" wfi"); // Sleep until next SysTick
 8000214:	bf30      	wfi
 8000216:	e7fd      	b.n	8000214 <idleTask+0x4>

08000218 <addTaskToListAtIndex>:
}



void addTaskToListAtIndex(void (*function)(void), uint32_t stackSize, int8_t priority, size_t pos)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	4613      	mov	r3, r2
 8000226:	71fb      	strb	r3, [r7, #7]
	task *taskToAdd = &taskList[pos];
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	011b      	lsls	r3, r3, #4
 800022c:	4a5e      	ldr	r2, [pc, #376]	; (80003a8 <addTaskToListAtIndex+0x190>)
 800022e:	4413      	add	r3, r2
 8000230:	617b      	str	r3, [r7, #20]

	taskToAdd->function = function;
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	68fa      	ldr	r2, [r7, #12]
 8000236:	609a      	str	r2, [r3, #8]
	// Allocate memory... do we wanna use malloc or our own implementation ;-) ?
	taskToAdd->stack = (int *)malloc(stackSize)+stackSize;
 8000238:	68b8      	ldr	r0, [r7, #8]
 800023a:	f000 fb01 	bl	8000840 <malloc>
 800023e:	4603      	mov	r3, r0
 8000240:	461a      	mov	r2, r3
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	441a      	add	r2, r3
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	601a      	str	r2, [r3, #0]

	/*
	 * For debugging purposes we initialize the stack with
	 * values that we can recognize.
	 */
	*(--(taskToAdd->stack)) 	= 0x01000000;					//XSPR Thumb bit set
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	1f1a      	subs	r2, r3, #4
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800025e:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= (int)taskToAdd->function; 	//set PC to function pointer, cast as int to silence the compiler
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	6899      	ldr	r1, [r3, #8]
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	1f1a      	subs	r2, r3, #4
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	460a      	mov	r2, r1
 8000274:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0xFFFFFFFD; 					//LR, return with process stack (PSP)
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	1f1a      	subs	r2, r3, #4
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f06f 0202 	mvn.w	r2, #2
 8000288:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0x0000000C;					//R12	Initial values used for debugging purposes
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	1f1a      	subs	r2, r3, #4
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	220c      	movs	r2, #12
 800029a:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0x00000003;					//R3
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	1f1a      	subs	r2, r3, #4
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2203      	movs	r2, #3
 80002ac:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0x00000002;					//R2
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	1f1a      	subs	r2, r3, #4
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2202      	movs	r2, #2
 80002be:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0x00000001;					//R1
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	1f1a      	subs	r2, r3, #4
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2201      	movs	r2, #1
 80002d0:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) 	= 0x00000000;					//R0
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	1f1a      	subs	r2, r3, #4
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]

	if(pos!=IDLE_TASK)
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	2b04      	cmp	r3, #4
 80002e8:	d04b      	beq.n	8000382 <addTaskToListAtIndex+0x16a>
	{
		*(--(taskToAdd->stack)) 	= 0x0000000B;					//R11
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	1f1a      	subs	r2, r3, #4
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	220b      	movs	r2, #11
 80002fa:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x0000000A;					//R10
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	1f1a      	subs	r2, r3, #4
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	220a      	movs	r2, #10
 800030c:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000009;					//R9
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	1f1a      	subs	r2, r3, #4
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2209      	movs	r2, #9
 800031e:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000008;					//R8
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	1f1a      	subs	r2, r3, #4
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2208      	movs	r2, #8
 8000330:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000007;					//R7
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	1f1a      	subs	r2, r3, #4
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2207      	movs	r2, #7
 8000342:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000006;					//R6
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	1f1a      	subs	r2, r3, #4
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2206      	movs	r2, #6
 8000354:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000005;					//R5
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1f1a      	subs	r2, r3, #4
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2205      	movs	r2, #5
 8000366:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) 	= 0x00000004;					//R4
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	1f1a      	subs	r2, r3, #4
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2204      	movs	r2, #4
 8000378:	601a      	str	r2, [r3, #0]
		// Initialize the task properties
		taskToAdd->state 		= READY;
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	2202      	movs	r2, #2
 800037e:	731a      	strb	r2, [r3, #12]
 8000380:	e00a      	b.n	8000398 <addTaskToListAtIndex+0x180>
	}else{
		taskToAdd->state 		= RUNNING;
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	2201      	movs	r2, #1
 8000386:	731a      	strb	r2, [r3, #12]
		currentTask = taskToAdd;
 8000388:	4a08      	ldr	r2, [pc, #32]	; (80003ac <addTaskToListAtIndex+0x194>)
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	6013      	str	r3, [r2, #0]
		// Update the CPU PSP with our new stack pointer
		writePSP(taskToAdd->stack);
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff31 	bl	80001fa <writePSP>
	}

	taskToAdd->priority 	= priority;
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	79fa      	ldrb	r2, [r7, #7]
 800039c:	735a      	strb	r2, [r3, #13]
}
 800039e:	bf00      	nop
 80003a0:	3718      	adds	r7, #24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000080 	.word	0x20000080
 80003ac:	200000d0 	.word	0x200000d0

080003b0 <addTaskToList>:
 * fills the stack up so that the context switch will
 * successfully pop these registers and start running
 * at the correct address when returning from the SysTick ISR
 */
void addTaskToList(void (*function)(void), uint32_t stackSize, int8_t priority)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	4613      	mov	r3, r2
 80003bc:	71fb      	strb	r3, [r7, #7]
	size_t i = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
	// Simply find the next empty slot
	// Loops when no more slots are available
	while(taskList[i].state != UNUSED)
 80003c2:	e006      	b.n	80003d2 <addTaskToList+0x22>
	{
		//increment i and roll back at the limit
		i++;
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3301      	adds	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
		i &= TASK_MASK;
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	f003 0303 	and.w	r3, r3, #3
 80003d0:	617b      	str	r3, [r7, #20]
	while(taskList[i].state != UNUSED)
 80003d2:	4a09      	ldr	r2, [pc, #36]	; (80003f8 <addTaskToList+0x48>)
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	011b      	lsls	r3, r3, #4
 80003d8:	4413      	add	r3, r2
 80003da:	330c      	adds	r3, #12
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f0      	bne.n	80003c4 <addTaskToList+0x14>
	}
	addTaskToListAtIndex(function, stackSize, priority, i);
 80003e2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	68f8      	ldr	r0, [r7, #12]
 80003ec:	f7ff ff14 	bl	8000218 <addTaskToListAtIndex>
}
 80003f0:	bf00      	nop
 80003f2:	3718      	adds	r7, #24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000080 	.word	0x20000080

080003fc <startVersdOS>:

void startVersdOS(uint16_t sysTickPeriodIn_ms) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	80fb      	strh	r3, [r7, #6]
	// Configure SysTick of 1 ms
	SysTick->LOAD = sysTickPeriodIn_ms * CLOCK_FREQ_IN_KHz - 1;
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	4a10      	ldr	r2, [pc, #64]	; (800044c <startVersdOS+0x50>)
 800040a:	fb02 f303 	mul.w	r3, r2, r3
 800040e:	1e5a      	subs	r2, r3, #1
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <startVersdOS+0x54>)
 8000412:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000414:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <startVersdOS+0x54>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk //Clock source selection = Processor clock (AHB)
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <startVersdOS+0x54>)
 800041c:	2207      	movs	r2, #7
 800041e:	601a      	str	r2, [r3, #0]
					| SysTick_CTRL_TICKINT_Msk //Counting down to zero to asserts the SysTick exception request
					| SysTick_CTRL_ENABLE_Msk; //Counter enable

	//set systick and pendsv interrupt priority to lowest.
	//svc will be highest.
	SCB->SHP[2] |= 0xFF<<24;
 8000420:	4a0c      	ldr	r2, [pc, #48]	; (8000454 <startVersdOS+0x58>)
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <startVersdOS+0x58>)
 8000424:	7e92      	ldrb	r2, [r2, #26]
 8000426:	b2d2      	uxtb	r2, r2
 8000428:	769a      	strb	r2, [r3, #26]
	SCB->SHP[2]  |= 0xFF<<16;
 800042a:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <startVersdOS+0x58>)
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <startVersdOS+0x58>)
 800042e:	7e92      	ldrb	r2, [r2, #26]
 8000430:	b2d2      	uxtb	r2, r2
 8000432:	769a      	strb	r2, [r3, #26]

	// Create Idle task
	addTaskToListAtIndex(idleTask, 128, -1, IDLE_TASK);
 8000434:	2304      	movs	r3, #4
 8000436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800043a:	2180      	movs	r1, #128	; 0x80
 800043c:	4806      	ldr	r0, [pc, #24]	; (8000458 <startVersdOS+0x5c>)
 800043e:	f7ff feeb 	bl	8000218 <addTaskToListAtIndex>

	__asm(" wfi"); // Sleep until next SysTick
 8000442:	bf30      	wfi
}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	000186a0 	.word	0x000186a0
 8000450:	e000e010 	.word	0xe000e010
 8000454:	e000ed00 	.word	0xe000ed00
 8000458:	08000211 	.word	0x08000211

0800045c <schedule>:

// currentTask is running now, return next task to run
task * schedule()
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
	task* tempTaskPtr = currentTask;
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <schedule+0x6c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	60fb      	str	r3, [r7, #12]
	task *idleTaskPtr = &taskList[IDLE_TASK];
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <schedule+0x70>)
 800046a:	607b      	str	r3, [r7, #4]

	if (tempTaskPtr->state == RUNNING) {
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	7b1b      	ldrb	r3, [r3, #12]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d102      	bne.n	800047a <schedule+0x1e>
		tempTaskPtr->state = READY;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2202      	movs	r2, #2
 8000478:	731a      	strb	r2, [r3, #12]
	}

	int teller=0;
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]

	//Find next ready, non idle task.
	do
	{
		tempTaskPtr++;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	3310      	adds	r3, #16
 8000482:	60fb      	str	r3, [r7, #12]

		if( (tempTaskPtr-1) == idleTaskPtr || tempTaskPtr == idleTaskPtr)
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3b10      	subs	r3, #16
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	429a      	cmp	r2, r3
 800048c:	d003      	beq.n	8000496 <schedule+0x3a>
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	429a      	cmp	r2, r3
 8000494:	d101      	bne.n	800049a <schedule+0x3e>
		{
			//since idle task is the last in the list, we've reached the end
			//and need to continue at the beginning
			tempTaskPtr = &taskList[0];
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <schedule+0x74>)
 8000498:	60fb      	str	r3, [r7, #12]
		}
	}while(tempTaskPtr->state != READY && teller++ <= MAX_TASKS);
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	7b1b      	ldrb	r3, [r3, #12]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d004      	beq.n	80004ac <schedule+0x50>
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	1c5a      	adds	r2, r3, #1
 80004a6:	60ba      	str	r2, [r7, #8]
 80004a8:	2b04      	cmp	r3, #4
 80004aa:	dde8      	ble.n	800047e <schedule+0x22>

	//if no task was found
	if(tempTaskPtr->state != READY)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	7b1b      	ldrb	r3, [r3, #12]
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	d001      	beq.n	80004b8 <schedule+0x5c>
	{
		//idle task
		tempTaskPtr = idleTaskPtr;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	60fb      	str	r3, [r7, #12]
	}

	return tempTaskPtr;
 80004b8:	68fb      	ldr	r3, [r7, #12]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	200000d0 	.word	0x200000d0
 80004cc:	200000c0 	.word	0x200000c0
 80004d0:	20000080 	.word	0x20000080

080004d4 <SysTick_Handler>:
/*
 * Interrupt routine for the Systick timer
 * simply calls the scheduler
 * */
void SysTick_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
	SysTick_flag = true;
 80004da:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <SysTick_Handler+0x84>)
 80004dc:	2201      	movs	r2, #1
 80004de:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < MAX_TASKS; i++)
 80004e0:	2300      	movs	r3, #0
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	e026      	b.n	8000534 <SysTick_Handler+0x60>
	{
		if (taskList[i].state == WAITING)
 80004e6:	4a1d      	ldr	r2, [pc, #116]	; (800055c <SysTick_Handler+0x88>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	011b      	lsls	r3, r3, #4
 80004ec:	4413      	add	r3, r2
 80004ee:	330c      	adds	r3, #12
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b03      	cmp	r3, #3
 80004f4:	d11b      	bne.n	800052e <SysTick_Handler+0x5a>
		{
			taskList[i].counter--;
 80004f6:	4a19      	ldr	r2, [pc, #100]	; (800055c <SysTick_Handler+0x88>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	4413      	add	r3, r2
 80004fe:	3304      	adds	r3, #4
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	1e5a      	subs	r2, r3, #1
 8000504:	4915      	ldr	r1, [pc, #84]	; (800055c <SysTick_Handler+0x88>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	440b      	add	r3, r1
 800050c:	3304      	adds	r3, #4
 800050e:	601a      	str	r2, [r3, #0]
			if (taskList[i].counter == 0) {
 8000510:	4a12      	ldr	r2, [pc, #72]	; (800055c <SysTick_Handler+0x88>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	4413      	add	r3, r2
 8000518:	3304      	adds	r3, #4
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d106      	bne.n	800052e <SysTick_Handler+0x5a>
				taskList[i].state = READY;
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <SysTick_Handler+0x88>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	4413      	add	r3, r2
 8000528:	330c      	adds	r3, #12
 800052a:	2202      	movs	r2, #2
 800052c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3301      	adds	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b03      	cmp	r3, #3
 8000538:	ddd5      	ble.n	80004e6 <SysTick_Handler+0x12>
			}
		}
	}
	//select the next task
	taskToExecute = schedule();
 800053a:	f7ff ff8f 	bl	800045c <schedule>
 800053e:	4603      	mov	r3, r0
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <SysTick_Handler+0x8c>)
 8000542:	6013      	str	r3, [r2, #0]
	//request context switch
	SCB->ICSR |= (1<<28);
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <SysTick_Handler+0x90>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4a06      	ldr	r2, [pc, #24]	; (8000564 <SysTick_Handler+0x90>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6053      	str	r3, [r2, #4]
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200000d8 	.word	0x200000d8
 800055c:	20000080 	.word	0x20000080
 8000560:	200000d4 	.word	0x200000d4
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <PendSV_Handler>:

__attribute__((naked)) // No function entry and exit code
void PendSV_Handler(void)
{
	//Push {R4-R11} context to PSP
	pushRegistersToCurrentPSP();
 8000568:	f7ff fe36 	bl	80001d8 <pushRegistersToCurrentPSP>
	//Save the new stack pointer after the push
	currentTask->stack = readPSP();
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <PendSV_Handler+0x30>)
 800056e:	681c      	ldr	r4, [r3, #0]
 8000570:	f7ff fe40 	bl	80001f4 <readPSP>
 8000574:	4603      	mov	r3, r0
 8000576:	6023      	str	r3, [r4, #0]

	currentTask = taskToExecute;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <PendSV_Handler+0x34>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <PendSV_Handler+0x30>)
 800057e:	6013      	str	r3, [r2, #0]

	//Load the new stack pointer from (new) currentTask
	writePSP(currentTask->stack);
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <PendSV_Handler+0x30>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fe37 	bl	80001fa <writePSP>

	//Pop {R4-R11} context from PSP
	popRegistersFromCurrentPSP();
 800058c:	f7ff fe2b 	bl	80001e6 <popRegistersFromCurrentPSP>

	returnToPSP();
 8000590:	f7ff fe38 	bl	8000204 <returnToPSP>
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	200000d0 	.word	0x200000d0
 800059c:	200000d4 	.word	0x200000d4

080005a0 <SVC_Handler>:

/* The most simple SVC implementation
 */

void SVC_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	taskToExecute = schedule();
 80005a4:	f7ff ff5a 	bl	800045c <schedule>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <SVC_Handler+0x20>)
 80005ac:	6013      	str	r3, [r2, #0]
	SCB->ICSR |= (1<<28);
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <SVC_Handler+0x24>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <SVC_Handler+0x24>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b8:	6053      	str	r3, [r2, #4]
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000d4 	.word	0x200000d4
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <taskYield>:

//Call Super Visor
void taskYield(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	asm("	svc #1");
 80005cc:	df01      	svc	1

}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <requestDelay>:

void requestDelay(uint32_t ticks)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	currentTask->counter = ticks;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <requestDelay+0x24>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	605a      	str	r2, [r3, #4]
	currentTask->state = WAITING;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <requestDelay+0x24>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2203      	movs	r2, #3
 80005ee:	731a      	strb	r2, [r3, #12]
	taskYield();
 80005f0:	f7ff ffea 	bl	80005c8 <taskYield>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000d0 	.word	0x200000d0

08000600 <delay_nonblocking>:
		SysTick_flag = false;
		ticks--;
	}
}

void delay_nonblocking (unsigned int ticks) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

	// ask os to not be scheduled for the amount of ticks (use counter)
	requestDelay(ticks);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ffe5 	bl	80005d8 <requestDelay>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <toggleGreen>:

void toggleGreen(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	while(1) {
    	GPIOD->ODR ^= 1 << GREEN;
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <toggleGreen+0x18>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4a03      	ldr	r2, [pc, #12]	; (8000630 <toggleGreen+0x18>)
 8000622:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000626:	6153      	str	r3, [r2, #20]
    	delay_nonblocking(100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f7ff ffe9 	bl	8000600 <delay_nonblocking>
    	GPIOD->ODR ^= 1 << GREEN;
 800062e:	e7f5      	b.n	800061c <toggleGreen+0x4>
 8000630:	40020c00 	.word	0x40020c00

08000634 <toggleOrange>:
	}
}

void toggleOrange(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	while(1) {
    	GPIOD->ODR ^= 1 << ORANGE;
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <toggleOrange+0x18>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <toggleOrange+0x18>)
 800063e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000642:	6153      	str	r3, [r2, #20]
    	delay_nonblocking(200);
 8000644:	20c8      	movs	r0, #200	; 0xc8
 8000646:	f7ff ffdb 	bl	8000600 <delay_nonblocking>
    	GPIOD->ODR ^= 1 << ORANGE;
 800064a:	e7f5      	b.n	8000638 <toggleOrange+0x4>
 800064c:	40020c00 	.word	0x40020c00

08000650 <toggleRed>:
	}
}

void toggleRed(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	while (1) {
    	GPIOD->ODR ^= 1 << RED;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <toggleRed+0x1c>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <toggleRed+0x1c>)
 800065a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800065e:	6153      	str	r3, [r2, #20]
    	delay_nonblocking(400);
 8000660:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000664:	f7ff ffcc 	bl	8000600 <delay_nonblocking>
    	GPIOD->ODR ^= 1 << RED;
 8000668:	e7f4      	b.n	8000654 <toggleRed+0x4>
 800066a:	bf00      	nop
 800066c:	40020c00 	.word	0x40020c00

08000670 <toggleBlue>:
	}
}

void toggleBlue(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	while(1) {
    	GPIOD->ODR ^= 1 << BLUE;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <toggleBlue+0x20>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a05      	ldr	r2, [pc, #20]	; (8000690 <toggleBlue+0x20>)
 800067a:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800067e:	6153      	str	r3, [r2, #20]
    	SysTick->LOAD = 2 * CLOCK_FREQ_IN_KHz - 1;
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <toggleBlue+0x24>)
 8000682:	4a05      	ldr	r2, [pc, #20]	; (8000698 <toggleBlue+0x28>)
 8000684:	605a      	str	r2, [r3, #4]
    	delay_nonblocking(800);
 8000686:	f44f 7048 	mov.w	r0, #800	; 0x320
 800068a:	f7ff ffb9 	bl	8000600 <delay_nonblocking>
    	GPIOD->ODR ^= 1 << BLUE;
 800068e:	e7f1      	b.n	8000674 <toggleBlue+0x4>
 8000690:	40020c00 	.word	0x40020c00
 8000694:	e000e010 	.word	0xe000e010
 8000698:	00030d3f 	.word	0x00030d3f

0800069c <main>:
	}
}

int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	// Use HSE (8 MHz)
	// Enable HSE
	RCC->CR |= RCC_CR_HSEON;
 80006a0:	4b38      	ldr	r3, [pc, #224]	; (8000784 <main+0xe8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a37      	ldr	r2, [pc, #220]	; (8000784 <main+0xe8>)
 80006a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006aa:	6013      	str	r3, [r2, #0]
	// Wait until HSE is stable
	while ((RCC->CR & RCC_CR_HSERDY) == 0);
 80006ac:	bf00      	nop
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <main+0xe8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0f9      	beq.n	80006ae <main+0x12>

	// Power interface clock enable
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006ba:	4b32      	ldr	r3, [pc, #200]	; (8000784 <main+0xe8>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	4a31      	ldr	r2, [pc, #196]	; (8000784 <main+0xe8>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6413      	str	r3, [r2, #64]	; 0x40
	// Regulator voltage scaling output selection Scale 1 mode <= 100 MHz
	PWR->CR |= PWR_CR_VOS;
 80006c6:	4b30      	ldr	r3, [pc, #192]	; (8000788 <main+0xec>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a2f      	ldr	r2, [pc, #188]	; (8000788 <main+0xec>)
 80006cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d0:	6013      	str	r3, [r2, #0]
	// Use 3 wait states when reading Flash at 100 MHz.
	FLASH->ACR = FLASH_ACR_LATENCY_3WS;
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <main+0xf0>)
 80006d4:	2203      	movs	r2, #3
 80006d6:	601a      	str	r2, [r3, #0]
	// Wait until 3 wait states are used
	while ((FLASH->ACR & FLASH_ACR_LATENCY_3WS) == 0);
 80006d8:	bf00      	nop
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <main+0xf0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0303 	and.w	r3, r3, #3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f9      	beq.n	80006da <main+0x3e>
	// Enable flash prefetch buffer, instruction and data cache
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN;
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <main+0xf0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a28      	ldr	r2, [pc, #160]	; (800078c <main+0xf0>)
 80006ec:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80006f0:	6013      	str	r3, [r2, #0]

	// Use PLL to generate 100 MHz clock
	// PLL output = 8 / M * N / P: M = 4, N = 100, P = 2 to generate 100 MHz
	RCC->PLLCFGR = 0x20000000
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <main+0xe8>)
 80006f4:	4a26      	ldr	r2, [pc, #152]	; (8000790 <main+0xf4>)
 80006f6:	605a      	str	r2, [r3, #4]
		| RCC_PLLCFGR_PLLSRC_HSE
		| (0 << RCC_PLLCFGR_PLLP_Pos)
		| (100 << RCC_PLLCFGR_PLLN_Pos)
		| (4 << RCC_PLLCFGR_PLLM_Pos);
	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <main+0xe8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <main+0xe8>)
 80006fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000702:	6013      	str	r3, [r2, #0]
	// Wait until PLL is locked
	while ((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000704:	bf00      	nop
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <main+0xe8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f9      	beq.n	8000706 <main+0x6a>
	// Select PLL as the system clock. AHB clock divided by 2.
	RCC->CFGR |= RCC_CFGR_SW_PLL | RCC_CFGR_PPRE1_DIV2;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <main+0xe8>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <main+0xe8>)
 8000718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6093      	str	r3, [r2, #8]
	// Wait until PLL used as the system clock
	while ((RCC->CFGR & RCC_CFGR_SWS_PLL) == 0);
 8000722:	bf00      	nop
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <main+0xe8>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	f003 0308 	and.w	r3, r3, #8
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0f9      	beq.n	8000724 <main+0x88>
	// Disable HSI
	RCC->CR &= ~RCC_CR_HSION;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <main+0xe8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <main+0xe8>)
 8000736:	f023 0301 	bic.w	r3, r3, #1
 800073a:	6013      	str	r3, [r2, #0]

	// GPIO Port D Clock Enable
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <main+0xe8>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	4a10      	ldr	r2, [pc, #64]	; (8000784 <main+0xe8>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	6313      	str	r3, [r2, #48]	; 0x30
	// GPIO Port D led pins Push/Pull Output
	GPIOD->MODER |= 1 << 2 * GREEN | 1 << 2 * ORANGE | 1 << 2 * RED | 1 << 2 * BLUE;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <main+0xf8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a11      	ldr	r2, [pc, #68]	; (8000794 <main+0xf8>)
 800074e:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000752:	6013      	str	r3, [r2, #0]

    // Create tasks. Provide fpointer, stacksize, and priority:
	addTaskToList(toggleGreen, 128, 2);
 8000754:	2202      	movs	r2, #2
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	480f      	ldr	r0, [pc, #60]	; (8000798 <main+0xfc>)
 800075a:	f7ff fe29 	bl	80003b0 <addTaskToList>
    addTaskToList(toggleOrange, 128, 2);
 800075e:	2202      	movs	r2, #2
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	480e      	ldr	r0, [pc, #56]	; (800079c <main+0x100>)
 8000764:	f7ff fe24 	bl	80003b0 <addTaskToList>
    addTaskToList(toggleRed, 128, 2);
 8000768:	2202      	movs	r2, #2
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <main+0x104>)
 800076e:	f7ff fe1f 	bl	80003b0 <addTaskToList>
    addTaskToList(toggleBlue, 128, 2);
 8000772:	2202      	movs	r2, #2
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <main+0x108>)
 8000778:	f7ff fe1a 	bl	80003b0 <addTaskToList>

	// Start VersdOS with 1 ms sysTick
	startVersdOS(1);
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff fe3d 	bl	80003fc <startVersdOS>

	while(1);
 8000782:	e7fe      	b.n	8000782 <main+0xe6>
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000
 800078c:	40023c00 	.word	0x40023c00
 8000790:	20401904 	.word	0x20401904
 8000794:	40020c00 	.word	0x40020c00
 8000798:	08000619 	.word	0x08000619
 800079c:	08000635 	.word	0x08000635
 80007a0:	08000651 	.word	0x08000651
 80007a4:	08000671 	.word	0x08000671

080007a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007a8:	f8df d030 	ldr.w	sp, [pc, #48]	; 80007dc <LoopFillZerobss+0xe>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ae:	490d      	ldr	r1, [pc, #52]	; (80007e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007c4:	4c0a      	ldr	r4, [pc, #40]	; (80007f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call the clock system intitialization function.*/
//  bl  SystemInit // BroJZ: not needed for minimal configuration
/* Call static constructors */
    bl __libc_init_array
 80007d2:	f000 f811 	bl	80007f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007d6:	f7ff ff61 	bl	800069c <main>
  bx  lr    
 80007da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007e8:	080009f0 	.word	0x080009f0
  ldr r2, =_sbss
 80007ec:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007f0:	200000f0 	.word	0x200000f0

080007f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC_IRQHandler>
	...

080007f8 <__libc_init_array>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	4d0d      	ldr	r5, [pc, #52]	; (8000830 <__libc_init_array+0x38>)
 80007fc:	4c0d      	ldr	r4, [pc, #52]	; (8000834 <__libc_init_array+0x3c>)
 80007fe:	1b64      	subs	r4, r4, r5
 8000800:	10a4      	asrs	r4, r4, #2
 8000802:	2600      	movs	r6, #0
 8000804:	42a6      	cmp	r6, r4
 8000806:	d109      	bne.n	800081c <__libc_init_array+0x24>
 8000808:	4d0b      	ldr	r5, [pc, #44]	; (8000838 <__libc_init_array+0x40>)
 800080a:	4c0c      	ldr	r4, [pc, #48]	; (800083c <__libc_init_array+0x44>)
 800080c:	f000 f8e0 	bl	80009d0 <_init>
 8000810:	1b64      	subs	r4, r4, r5
 8000812:	10a4      	asrs	r4, r4, #2
 8000814:	2600      	movs	r6, #0
 8000816:	42a6      	cmp	r6, r4
 8000818:	d105      	bne.n	8000826 <__libc_init_array+0x2e>
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000820:	4798      	blx	r3
 8000822:	3601      	adds	r6, #1
 8000824:	e7ee      	b.n	8000804 <__libc_init_array+0xc>
 8000826:	f855 3b04 	ldr.w	r3, [r5], #4
 800082a:	4798      	blx	r3
 800082c:	3601      	adds	r6, #1
 800082e:	e7f2      	b.n	8000816 <__libc_init_array+0x1e>
 8000830:	080009e8 	.word	0x080009e8
 8000834:	080009e8 	.word	0x080009e8
 8000838:	080009e8 	.word	0x080009e8
 800083c:	080009ec 	.word	0x080009ec

08000840 <malloc>:
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <malloc+0xc>)
 8000842:	4601      	mov	r1, r0
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f000 b823 	b.w	8000890 <_malloc_r>
 800084a:	bf00      	nop
 800084c:	20000000 	.word	0x20000000

08000850 <sbrk_aligned>:
 8000850:	b570      	push	{r4, r5, r6, lr}
 8000852:	4e0e      	ldr	r6, [pc, #56]	; (800088c <sbrk_aligned+0x3c>)
 8000854:	460c      	mov	r4, r1
 8000856:	6831      	ldr	r1, [r6, #0]
 8000858:	4605      	mov	r5, r0
 800085a:	b911      	cbnz	r1, 8000862 <sbrk_aligned+0x12>
 800085c:	f000 f88c 	bl	8000978 <_sbrk_r>
 8000860:	6030      	str	r0, [r6, #0]
 8000862:	4621      	mov	r1, r4
 8000864:	4628      	mov	r0, r5
 8000866:	f000 f887 	bl	8000978 <_sbrk_r>
 800086a:	1c43      	adds	r3, r0, #1
 800086c:	d00a      	beq.n	8000884 <sbrk_aligned+0x34>
 800086e:	1cc4      	adds	r4, r0, #3
 8000870:	f024 0403 	bic.w	r4, r4, #3
 8000874:	42a0      	cmp	r0, r4
 8000876:	d007      	beq.n	8000888 <sbrk_aligned+0x38>
 8000878:	1a21      	subs	r1, r4, r0
 800087a:	4628      	mov	r0, r5
 800087c:	f000 f87c 	bl	8000978 <_sbrk_r>
 8000880:	3001      	adds	r0, #1
 8000882:	d101      	bne.n	8000888 <sbrk_aligned+0x38>
 8000884:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000888:	4620      	mov	r0, r4
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	200000e0 	.word	0x200000e0

08000890 <_malloc_r>:
 8000890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000894:	1ccd      	adds	r5, r1, #3
 8000896:	f025 0503 	bic.w	r5, r5, #3
 800089a:	3508      	adds	r5, #8
 800089c:	2d0c      	cmp	r5, #12
 800089e:	bf38      	it	cc
 80008a0:	250c      	movcc	r5, #12
 80008a2:	2d00      	cmp	r5, #0
 80008a4:	4607      	mov	r7, r0
 80008a6:	db01      	blt.n	80008ac <_malloc_r+0x1c>
 80008a8:	42a9      	cmp	r1, r5
 80008aa:	d905      	bls.n	80008b8 <_malloc_r+0x28>
 80008ac:	230c      	movs	r3, #12
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	2600      	movs	r6, #0
 80008b2:	4630      	mov	r0, r6
 80008b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008b8:	4e2e      	ldr	r6, [pc, #184]	; (8000974 <_malloc_r+0xe4>)
 80008ba:	f000 f86d 	bl	8000998 <__malloc_lock>
 80008be:	6833      	ldr	r3, [r6, #0]
 80008c0:	461c      	mov	r4, r3
 80008c2:	bb34      	cbnz	r4, 8000912 <_malloc_r+0x82>
 80008c4:	4629      	mov	r1, r5
 80008c6:	4638      	mov	r0, r7
 80008c8:	f7ff ffc2 	bl	8000850 <sbrk_aligned>
 80008cc:	1c43      	adds	r3, r0, #1
 80008ce:	4604      	mov	r4, r0
 80008d0:	d14d      	bne.n	800096e <_malloc_r+0xde>
 80008d2:	6834      	ldr	r4, [r6, #0]
 80008d4:	4626      	mov	r6, r4
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	d140      	bne.n	800095c <_malloc_r+0xcc>
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	4631      	mov	r1, r6
 80008de:	4638      	mov	r0, r7
 80008e0:	eb04 0803 	add.w	r8, r4, r3
 80008e4:	f000 f848 	bl	8000978 <_sbrk_r>
 80008e8:	4580      	cmp	r8, r0
 80008ea:	d13a      	bne.n	8000962 <_malloc_r+0xd2>
 80008ec:	6821      	ldr	r1, [r4, #0]
 80008ee:	3503      	adds	r5, #3
 80008f0:	1a6d      	subs	r5, r5, r1
 80008f2:	f025 0503 	bic.w	r5, r5, #3
 80008f6:	3508      	adds	r5, #8
 80008f8:	2d0c      	cmp	r5, #12
 80008fa:	bf38      	it	cc
 80008fc:	250c      	movcc	r5, #12
 80008fe:	4629      	mov	r1, r5
 8000900:	4638      	mov	r0, r7
 8000902:	f7ff ffa5 	bl	8000850 <sbrk_aligned>
 8000906:	3001      	adds	r0, #1
 8000908:	d02b      	beq.n	8000962 <_malloc_r+0xd2>
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	442b      	add	r3, r5
 800090e:	6023      	str	r3, [r4, #0]
 8000910:	e00e      	b.n	8000930 <_malloc_r+0xa0>
 8000912:	6822      	ldr	r2, [r4, #0]
 8000914:	1b52      	subs	r2, r2, r5
 8000916:	d41e      	bmi.n	8000956 <_malloc_r+0xc6>
 8000918:	2a0b      	cmp	r2, #11
 800091a:	d916      	bls.n	800094a <_malloc_r+0xba>
 800091c:	1961      	adds	r1, r4, r5
 800091e:	42a3      	cmp	r3, r4
 8000920:	6025      	str	r5, [r4, #0]
 8000922:	bf18      	it	ne
 8000924:	6059      	strne	r1, [r3, #4]
 8000926:	6863      	ldr	r3, [r4, #4]
 8000928:	bf08      	it	eq
 800092a:	6031      	streq	r1, [r6, #0]
 800092c:	5162      	str	r2, [r4, r5]
 800092e:	604b      	str	r3, [r1, #4]
 8000930:	4638      	mov	r0, r7
 8000932:	f104 060b 	add.w	r6, r4, #11
 8000936:	f000 f835 	bl	80009a4 <__malloc_unlock>
 800093a:	f026 0607 	bic.w	r6, r6, #7
 800093e:	1d23      	adds	r3, r4, #4
 8000940:	1af2      	subs	r2, r6, r3
 8000942:	d0b6      	beq.n	80008b2 <_malloc_r+0x22>
 8000944:	1b9b      	subs	r3, r3, r6
 8000946:	50a3      	str	r3, [r4, r2]
 8000948:	e7b3      	b.n	80008b2 <_malloc_r+0x22>
 800094a:	6862      	ldr	r2, [r4, #4]
 800094c:	42a3      	cmp	r3, r4
 800094e:	bf0c      	ite	eq
 8000950:	6032      	streq	r2, [r6, #0]
 8000952:	605a      	strne	r2, [r3, #4]
 8000954:	e7ec      	b.n	8000930 <_malloc_r+0xa0>
 8000956:	4623      	mov	r3, r4
 8000958:	6864      	ldr	r4, [r4, #4]
 800095a:	e7b2      	b.n	80008c2 <_malloc_r+0x32>
 800095c:	4634      	mov	r4, r6
 800095e:	6876      	ldr	r6, [r6, #4]
 8000960:	e7b9      	b.n	80008d6 <_malloc_r+0x46>
 8000962:	230c      	movs	r3, #12
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4638      	mov	r0, r7
 8000968:	f000 f81c 	bl	80009a4 <__malloc_unlock>
 800096c:	e7a1      	b.n	80008b2 <_malloc_r+0x22>
 800096e:	6025      	str	r5, [r4, #0]
 8000970:	e7de      	b.n	8000930 <_malloc_r+0xa0>
 8000972:	bf00      	nop
 8000974:	200000dc 	.word	0x200000dc

08000978 <_sbrk_r>:
 8000978:	b538      	push	{r3, r4, r5, lr}
 800097a:	4d06      	ldr	r5, [pc, #24]	; (8000994 <_sbrk_r+0x1c>)
 800097c:	2300      	movs	r3, #0
 800097e:	4604      	mov	r4, r0
 8000980:	4608      	mov	r0, r1
 8000982:	602b      	str	r3, [r5, #0]
 8000984:	f000 f816 	bl	80009b4 <_sbrk>
 8000988:	1c43      	adds	r3, r0, #1
 800098a:	d102      	bne.n	8000992 <_sbrk_r+0x1a>
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	b103      	cbz	r3, 8000992 <_sbrk_r+0x1a>
 8000990:	6023      	str	r3, [r4, #0]
 8000992:	bd38      	pop	{r3, r4, r5, pc}
 8000994:	200000e4 	.word	0x200000e4

08000998 <__malloc_lock>:
 8000998:	4801      	ldr	r0, [pc, #4]	; (80009a0 <__malloc_lock+0x8>)
 800099a:	f000 b809 	b.w	80009b0 <__retarget_lock_acquire_recursive>
 800099e:	bf00      	nop
 80009a0:	200000e8 	.word	0x200000e8

080009a4 <__malloc_unlock>:
 80009a4:	4801      	ldr	r0, [pc, #4]	; (80009ac <__malloc_unlock+0x8>)
 80009a6:	f000 b804 	b.w	80009b2 <__retarget_lock_release_recursive>
 80009aa:	bf00      	nop
 80009ac:	200000e8 	.word	0x200000e8

080009b0 <__retarget_lock_acquire_recursive>:
 80009b0:	4770      	bx	lr

080009b2 <__retarget_lock_release_recursive>:
 80009b2:	4770      	bx	lr

080009b4 <_sbrk>:
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <_sbrk+0x14>)
 80009b6:	6811      	ldr	r1, [r2, #0]
 80009b8:	4603      	mov	r3, r0
 80009ba:	b909      	cbnz	r1, 80009c0 <_sbrk+0xc>
 80009bc:	4903      	ldr	r1, [pc, #12]	; (80009cc <_sbrk+0x18>)
 80009be:	6011      	str	r1, [r2, #0]
 80009c0:	6810      	ldr	r0, [r2, #0]
 80009c2:	4403      	add	r3, r0
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	4770      	bx	lr
 80009c8:	200000ec 	.word	0x200000ec
 80009cc:	200000f0 	.word	0x200000f0

080009d0 <_init>:
 80009d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d2:	bf00      	nop
 80009d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d6:	bc08      	pop	{r3}
 80009d8:	469e      	mov	lr, r3
 80009da:	4770      	bx	lr

080009dc <_fini>:
 80009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009de:	bf00      	nop
 80009e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e2:	bc08      	pop	{r3}
 80009e4:	469e      	mov	lr, r3
 80009e6:	4770      	bx	lr
