
VersdOS_student.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a38  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bd0  08000bd0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bd0  08000bd0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000bd0  08000bd0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bd0  08000bd0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bd0  08000bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bd4  08000bd4  00010bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000064  08000c3c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08000c3c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cf6  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004e1  00000000  00000000  00020d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000108  00000000  00000000  00021270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c0  00000000  00000000  00021378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e809  00000000  00000000  00021438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000010b1  00000000  00000000  0002fc41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005305d  00000000  00000000  00030cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00083d4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000498  00000000  00000000  00083da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000bb8 	.word	0x08000bb8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08000bb8 	.word	0x08000bb8

080001d8 <pushRegistersToCurrentPSP>:
        .global returnToPSP
        .global returnToMSP
       // .global SVC_Handler
		
pushRegistersToCurrentPSP:
		MRS 	r0	, psp			//Move PSP to register R0 (the function argument)
 80001d8:	f3ef 8009 	mrs	r0, PSP
		STMDB 	r0!	, {r4-r11}		//Store multiple registers decrement address before each access,
 80001dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
									//when done write back last used address to %0 (new SP location)
		MSR 	psp	, r0			//Move register %0 to psp to update to the new SP, output to scratch
 80001e0:	f380 8809 	msr	PSP, r0
		MOV		PC	, LR			//return by moving link-register to program counter
 80001e4:	46f7      	mov	pc, lr

080001e6 <popRegistersFromCurrentPSP>:

popRegistersFromCurrentPSP:
		MRS 	R0	, psp			//Move PSP to register R0
 80001e6:	f3ef 8009 	mrs	r0, PSP
		LDMIA 	R0!	, {r4-r11}		//Load multiple registers increment address after each access,
 80001ea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
									//when done write back last used address to R0 (new SP location)
		MSR 	psp	, R0			//Move register R0 to psp to update to the new SP, output to scratch
 80001ee:	f380 8809 	msr	PSP, r0
		MOV		PC	, LR			//return by moving link-register to program counter
 80001f2:	46f7      	mov	pc, lr

080001f4 <readPSP>:

readPSP:
		MRS 	R0 , psp			//move psp to r0
 80001f4:	f3ef 8009 	mrs	r0, PSP
		MOV		PC	, LR			//return by moving link-register to program counter
 80001f8:	46f7      	mov	pc, lr

080001fa <writePSP>:

writePSP:
    	MSR 	psp	, R0			//Move r0 to psp.
 80001fa:	f380 8809 	msr	PSP, r0
    	ISB							//flush pipeline
 80001fe:	f3bf 8f6f 	isb	sy
		MOV		PC	, LR			//return by moving link-register to program counter
 8000202:	46f7      	mov	pc, lr

08000204 <returnToPSP>:

returnToPSP:
		ldr 	lr, =0xFFFFFFFD         //terug met process stack
 8000204:	f06f 0e02 	mvn.w	lr, #2
		bx		lr
 8000208:	4770      	bx	lr

0800020a <returnToMSP>:

returnToMSP:
		ldr 	lr, =0xFFFFFFF9         //terug met process stack
 800020a:	f06f 0e06 	mvn.w	lr, #6
		bx		lr
 800020e:	4770      	bx	lr

08000210 <idleTask>:
task *taskToExecute;

void taskYield(void);

// Idle task
void idleTask(void) {
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	while (1) {
		__asm(" wfi");
 8000214:	bf30      	wfi
 8000216:	e7fd      	b.n	8000214 <idleTask+0x4>

08000218 <addTaskToListAtIndex>:
		// Sleep until next SysTick
	}
}

void addTaskToListAtIndex(void (*function)(void), uint32_t stackSize,
		int8_t priority, size_t pos, uint32_t systick_ticks) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	4613      	mov	r3, r2
 8000226:	71fb      	strb	r3, [r7, #7]
	task *taskToAdd = &taskList[pos];
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	4613      	mov	r3, r2
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	4413      	add	r3, r2
 8000230:	00db      	lsls	r3, r3, #3
 8000232:	4a66      	ldr	r2, [pc, #408]	; (80003cc <addTaskToListAtIndex+0x1b4>)
 8000234:	4413      	add	r3, r2
 8000236:	617b      	str	r3, [r7, #20]

	taskToAdd->function = function;
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	609a      	str	r2, [r3, #8]
	// Allocate memory... do we wanna use malloc or our own implementation ;-) ?
	taskToAdd->stack = (int*) malloc(stackSize) + stackSize;
 800023e:	68b8      	ldr	r0, [r7, #8]
 8000240:	f000 fbf2 	bl	8000a28 <malloc>
 8000244:	4603      	mov	r3, r0
 8000246:	461a      	mov	r2, r3
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	441a      	add	r2, r3
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	601a      	str	r2, [r3, #0]

	/*
	 * For debugging purposes we initialize the stack with
	 * values that we can recognize.
	 */
	*(--(taskToAdd->stack)) = 0x01000000;					//XSPR Thumb bit set
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	1f1a      	subs	r2, r3, #4
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000264:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) = 0x01000000;			//program status register
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	1f1a      	subs	r2, r3, #4
 800026c:	697b      	ldr	r3, [r7, #20]
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000278:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) = (int) taskToAdd->function; //set PC to function pointer, cast as int to silence the compiler
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	6899      	ldr	r1, [r3, #8]
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	1f1a      	subs	r2, r3, #4
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	460a      	mov	r2, r1
 800028e:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) = 0xFFFFFFFD; //LR, return with process stack (PSP)
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	1f1a      	subs	r2, r3, #4
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f06f 0202 	mvn.w	r2, #2
 80002a2:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) = 0x0000000C; //R12	Initial values used for debugging purposes
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	1f1a      	subs	r2, r3, #4
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	220c      	movs	r2, #12
 80002b4:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) = 0x00000003;					//R3
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	1f1a      	subs	r2, r3, #4
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2203      	movs	r2, #3
 80002c6:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) = 0x00000002;					//R2
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	1f1a      	subs	r2, r3, #4
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2202      	movs	r2, #2
 80002d8:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) = 0x00000001;					//R1
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	1f1a      	subs	r2, r3, #4
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
	*(--(taskToAdd->stack)) = 0x00000000;					//R0
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	1f1a      	subs	r2, r3, #4
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]

	if (pos != IDLE_TASK) {
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	2b04      	cmp	r3, #4
 8000302:	d04b      	beq.n	800039c <addTaskToListAtIndex+0x184>
		*(--(taskToAdd->stack)) = 0x0000000B;					//R11
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	1f1a      	subs	r2, r3, #4
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	220b      	movs	r2, #11
 8000314:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) = 0x0000000A;					//R10
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	1f1a      	subs	r2, r3, #4
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	220a      	movs	r2, #10
 8000326:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) = 0x00000009;					//R9
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	1f1a      	subs	r2, r3, #4
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2209      	movs	r2, #9
 8000338:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) = 0x00000008;					//R8
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	1f1a      	subs	r2, r3, #4
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2208      	movs	r2, #8
 800034a:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) = 0x00000007;					//R7
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	1f1a      	subs	r2, r3, #4
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2207      	movs	r2, #7
 800035c:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) = 0x00000006;					//R6
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	1f1a      	subs	r2, r3, #4
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2206      	movs	r2, #6
 800036e:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) = 0x00000005;					//R5
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	1f1a      	subs	r2, r3, #4
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2205      	movs	r2, #5
 8000380:	601a      	str	r2, [r3, #0]
		*(--(taskToAdd->stack)) = 0x00000004;					//R4
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	1f1a      	subs	r2, r3, #4
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2204      	movs	r2, #4
 8000392:	601a      	str	r2, [r3, #0]
		// Initialize the task properties
		taskToAdd->state = READY;
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	2202      	movs	r2, #2
 8000398:	731a      	strb	r2, [r3, #12]
 800039a:	e00a      	b.n	80003b2 <addTaskToListAtIndex+0x19a>
	} else {
		taskToAdd->state = RUNNING;
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	2201      	movs	r2, #1
 80003a0:	731a      	strb	r2, [r3, #12]
		currentTask = taskToAdd;
 80003a2:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <addTaskToListAtIndex+0x1b8>)
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	6013      	str	r3, [r2, #0]
		// Update the CPU PSP with our new stack pointer
		writePSP(taskToAdd->stack);
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ff24 	bl	80001fa <writePSP>
	}

	taskToAdd->priority = priority;
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	79fa      	ldrb	r2, [r7, #7]
 80003b6:	735a      	strb	r2, [r3, #13]
	taskToAdd->systick_period = systick_ticks;
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	6a3a      	ldr	r2, [r7, #32]
 80003bc:	611a      	str	r2, [r3, #16]
	taskToAdd->systick_counter = systick_ticks;
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	6a3a      	ldr	r2, [r7, #32]
 80003c2:	615a      	str	r2, [r3, #20]
}
 80003c4:	bf00      	nop
 80003c6:	3718      	adds	r7, #24
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000080 	.word	0x20000080
 80003d0:	200000f8 	.word	0x200000f8

080003d4 <addTaskToList>:
 * fills the stack up so that the context switch will
 * successfully pop these registers and start running
 * at the correct address when returning from the SysTick ISR
 */
void addTaskToList(void (*function)(void), uint32_t stackSize, int8_t priority,
		uint32_t systick_ticks) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af02      	add	r7, sp, #8
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	4613      	mov	r3, r2
 80003e2:	71fb      	strb	r3, [r7, #7]
	size_t i = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]
	// Simply find the next empty slot
	// Loops when no more slots are available
	while (taskList[i].state != UNUSED) {
 80003e8:	e006      	b.n	80003f8 <addTaskToList+0x24>
		//increment i and roll back at the limit
		i++;
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	3301      	adds	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
		i &= TASK_MASK;
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	f003 0303 	and.w	r3, r3, #3
 80003f6:	617b      	str	r3, [r7, #20]
	while (taskList[i].state != UNUSED) {
 80003f8:	490b      	ldr	r1, [pc, #44]	; (8000428 <addTaskToList+0x54>)
 80003fa:	697a      	ldr	r2, [r7, #20]
 80003fc:	4613      	mov	r3, r2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4413      	add	r3, r2
 8000402:	00db      	lsls	r3, r3, #3
 8000404:	440b      	add	r3, r1
 8000406:	330c      	adds	r3, #12
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d1ed      	bne.n	80003ea <addTaskToList+0x16>
	}
	addTaskToListAtIndex(function, stackSize, priority, i, systick_ticks);
 800040e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	68b9      	ldr	r1, [r7, #8]
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	f7ff fefc 	bl	8000218 <addTaskToListAtIndex>
}
 8000420:	bf00      	nop
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000080 	.word	0x20000080

0800042c <startVersdOS>:

void startVersdOS(uint16_t sysTickPeriodIn_ms) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af02      	add	r7, sp, #8
 8000432:	4603      	mov	r3, r0
 8000434:	80fb      	strh	r3, [r7, #6]
	// Configure SysTick of 1 ms
	SysTick->LOAD = sysTickPeriodIn_ms * CLOCK_FREQ_IN_KHz - 1;
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	4a14      	ldr	r2, [pc, #80]	; (800048c <startVersdOS+0x60>)
 800043a:	fb02 f303 	mul.w	r3, r2, r3
 800043e:	1e5a      	subs	r2, r3, #1
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <startVersdOS+0x64>)
 8000442:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <startVersdOS+0x64>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk //Clock source selection = Processor clock (AHB)
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <startVersdOS+0x64>)
 800044c:	2207      	movs	r2, #7
 800044e:	601a      	str	r2, [r3, #0]
	| SysTick_CTRL_TICKINT_Msk //Counting down to zero to asserts the SysTick exception request
			| SysTick_CTRL_ENABLE_Msk; //Counter enable

	//set systick and pendsv interrupt priority to lowest.
	//svc will be highest.
	SCB->SHP[2] |= 0xFF << 24;
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <startVersdOS+0x68>)
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <startVersdOS+0x68>)
 8000454:	7e92      	ldrb	r2, [r2, #26]
 8000456:	b2d2      	uxtb	r2, r2
 8000458:	769a      	strb	r2, [r3, #26]
	SCB->SHP[2] |= 0xFF << 16;
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <startVersdOS+0x68>)
 800045c:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <startVersdOS+0x68>)
 800045e:	7e92      	ldrb	r2, [r2, #26]
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	769a      	strb	r2, [r3, #26]

	// Create Idle task
	addTaskToListAtIndex(idleTask, 128, -1, IDLE_TASK, 0);
 8000464:	2300      	movs	r3, #0
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	2304      	movs	r3, #4
 800046a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	4809      	ldr	r0, [pc, #36]	; (8000498 <startVersdOS+0x6c>)
 8000472:	f7ff fed1 	bl	8000218 <addTaskToListAtIndex>
 8000476:	2301      	movs	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	f383 8814 	msr	CONTROL, r3
}
 8000480:	bf00      	nop

	__set_CONTROL(1 << CONTROL_nPRIV_Pos); // enter unpriviliged mode

	__asm(" wfi");
 8000482:	bf30      	wfi
	// Sleep until next SysTick
}
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	000186a0 	.word	0x000186a0
 8000490:	e000e010 	.word	0xe000e010
 8000494:	e000ed00 	.word	0xe000ed00
 8000498:	08000211 	.word	0x08000211

0800049c <schedule>:

// currentTask is running now, return next task to run
task* schedule() {
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
	task *tempTaskPtr = currentTask;
 80004a2:	4b19      	ldr	r3, [pc, #100]	; (8000508 <schedule+0x6c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	60fb      	str	r3, [r7, #12]
	task *idleTaskPtr = &taskList[IDLE_TASK];
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <schedule+0x70>)
 80004aa:	607b      	str	r3, [r7, #4]

	if (tempTaskPtr->state == RUNNING) {
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	7b1b      	ldrb	r3, [r3, #12]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d102      	bne.n	80004ba <schedule+0x1e>
		tempTaskPtr->state = READY;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	2202      	movs	r2, #2
 80004b8:	731a      	strb	r2, [r3, #12]
	}

	int teller = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]

	//Find next ready, non idle task.
	do {
		tempTaskPtr++;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3318      	adds	r3, #24
 80004c2:	60fb      	str	r3, [r7, #12]

		if ((tempTaskPtr - 1) == idleTaskPtr || tempTaskPtr == idleTaskPtr) {
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3b18      	subs	r3, #24
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d003      	beq.n	80004d6 <schedule+0x3a>
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d101      	bne.n	80004da <schedule+0x3e>
			//since idle task is the last in the list, we've reached the end
			//and need to continue at the beginning
			tempTaskPtr = &taskList[0];
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <schedule+0x74>)
 80004d8:	60fb      	str	r3, [r7, #12]
		}
	} while (tempTaskPtr->state != READY && teller++ <= MAX_TASKS);
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	7b1b      	ldrb	r3, [r3, #12]
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d004      	beq.n	80004ec <schedule+0x50>
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	1c5a      	adds	r2, r3, #1
 80004e6:	60ba      	str	r2, [r7, #8]
 80004e8:	2b04      	cmp	r3, #4
 80004ea:	dde8      	ble.n	80004be <schedule+0x22>

	//if no task was found
	if (tempTaskPtr->state != READY) {
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	7b1b      	ldrb	r3, [r3, #12]
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	d001      	beq.n	80004f8 <schedule+0x5c>
		//idle task
		tempTaskPtr = idleTaskPtr;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	60fb      	str	r3, [r7, #12]
	}

	return tempTaskPtr;
 80004f8:	68fb      	ldr	r3, [r7, #12]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	200000f8 	.word	0x200000f8
 800050c:	200000e0 	.word	0x200000e0
 8000510:	20000080 	.word	0x20000080

08000514 <SysTick_Handler>:

/*
 * Interrupt routine for the Systick timer
 * simply calls the scheduler
 * */
void SysTick_Handler(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	SysTick_flag = true;
 800051a:	4b55      	ldr	r3, [pc, #340]	; (8000670 <SysTick_Handler+0x15c>)
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++) {
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	e09a      	b.n	800065c <SysTick_Handler+0x148>

		if (taskList[i].priority > currentTask->priority) {
 8000526:	4953      	ldr	r1, [pc, #332]	; (8000674 <SysTick_Handler+0x160>)
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4613      	mov	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	4413      	add	r3, r2
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	440b      	add	r3, r1
 8000534:	330d      	adds	r3, #13
 8000536:	f993 2000 	ldrsb.w	r2, [r3]
 800053a:	4b4f      	ldr	r3, [pc, #316]	; (8000678 <SysTick_Handler+0x164>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8000542:	429a      	cmp	r2, r3
 8000544:	dd7c      	ble.n	8000640 <SysTick_Handler+0x12c>
			if (taskList[i].state == READY) {
 8000546:	494b      	ldr	r1, [pc, #300]	; (8000674 <SysTick_Handler+0x160>)
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4613      	mov	r3, r2
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	4413      	add	r3, r2
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	440b      	add	r3, r1
 8000554:	330c      	adds	r3, #12
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d13e      	bne.n	80005da <SysTick_Handler+0xc6>
				currentTask->state = WAITING;
 800055c:	4b46      	ldr	r3, [pc, #280]	; (8000678 <SysTick_Handler+0x164>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2203      	movs	r2, #3
 8000562:	731a      	strb	r2, [r3, #12]
//			}else if (taskList[i].state == RUNNING) {
				taskList[i].systick_counter--;
 8000564:	4943      	ldr	r1, [pc, #268]	; (8000674 <SysTick_Handler+0x160>)
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	4613      	mov	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	4413      	add	r3, r2
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	440b      	add	r3, r1
 8000572:	3314      	adds	r3, #20
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	1e59      	subs	r1, r3, #1
 8000578:	483e      	ldr	r0, [pc, #248]	; (8000674 <SysTick_Handler+0x160>)
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	4613      	mov	r3, r2
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	4413      	add	r3, r2
 8000582:	00db      	lsls	r3, r3, #3
 8000584:	4403      	add	r3, r0
 8000586:	3314      	adds	r3, #20
 8000588:	6019      	str	r1, [r3, #0]
				if (taskList[i].systick_counter == 0) {
 800058a:	493a      	ldr	r1, [pc, #232]	; (8000674 <SysTick_Handler+0x160>)
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	440b      	add	r3, r1
 8000598:	3314      	adds	r3, #20
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d14f      	bne.n	8000640 <SysTick_Handler+0x12c>
					taskList[i].systick_counter = taskList[i].systick_period;
 80005a0:	4934      	ldr	r1, [pc, #208]	; (8000674 <SysTick_Handler+0x160>)
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	4613      	mov	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	4413      	add	r3, r2
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	440b      	add	r3, r1
 80005ae:	3310      	adds	r3, #16
 80005b0:	6819      	ldr	r1, [r3, #0]
 80005b2:	4830      	ldr	r0, [pc, #192]	; (8000674 <SysTick_Handler+0x160>)
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	4613      	mov	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	4413      	add	r3, r2
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	4403      	add	r3, r0
 80005c0:	3314      	adds	r3, #20
 80005c2:	6019      	str	r1, [r3, #0]
					taskList[i].state = WAITING;
 80005c4:	492b      	ldr	r1, [pc, #172]	; (8000674 <SysTick_Handler+0x160>)
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	440b      	add	r3, r1
 80005d2:	330c      	adds	r3, #12
 80005d4:	2203      	movs	r2, #3
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	e032      	b.n	8000640 <SysTick_Handler+0x12c>
				}
//			}

			} else if (taskList[i].state == WAITING) {
 80005da:	4926      	ldr	r1, [pc, #152]	; (8000674 <SysTick_Handler+0x160>)
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4613      	mov	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	4413      	add	r3, r2
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	440b      	add	r3, r1
 80005e8:	330c      	adds	r3, #12
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d127      	bne.n	8000640 <SysTick_Handler+0x12c>
				taskList[i].counter--;
 80005f0:	4920      	ldr	r1, [pc, #128]	; (8000674 <SysTick_Handler+0x160>)
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	440b      	add	r3, r1
 80005fe:	3304      	adds	r3, #4
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1e59      	subs	r1, r3, #1
 8000604:	481b      	ldr	r0, [pc, #108]	; (8000674 <SysTick_Handler+0x160>)
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4613      	mov	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	4413      	add	r3, r2
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	4403      	add	r3, r0
 8000612:	3304      	adds	r3, #4
 8000614:	6019      	str	r1, [r3, #0]
				if (taskList[i].counter == 0) {
 8000616:	4917      	ldr	r1, [pc, #92]	; (8000674 <SysTick_Handler+0x160>)
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4613      	mov	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	00db      	lsls	r3, r3, #3
 8000622:	440b      	add	r3, r1
 8000624:	3304      	adds	r3, #4
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d109      	bne.n	8000640 <SysTick_Handler+0x12c>
					taskList[i].state = READY;
 800062c:	4911      	ldr	r1, [pc, #68]	; (8000674 <SysTick_Handler+0x160>)
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	4613      	mov	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	4413      	add	r3, r2
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	440b      	add	r3, r1
 800063a:	330c      	adds	r3, #12
 800063c:	2202      	movs	r2, #2
 800063e:	701a      	strb	r2, [r3, #0]
			}

		}

//select the next task
		taskToExecute = schedule();
 8000640:	f7ff ff2c 	bl	800049c <schedule>
 8000644:	4603      	mov	r3, r0
 8000646:	4a0d      	ldr	r2, [pc, #52]	; (800067c <SysTick_Handler+0x168>)
 8000648:	6013      	str	r3, [r2, #0]
//request context switch
		SCB->ICSR |= (1 << 28);
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <SysTick_Handler+0x16c>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <SysTick_Handler+0x16c>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < MAX_TASKS; i++) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3301      	adds	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b03      	cmp	r3, #3
 8000660:	f77f af61 	ble.w	8000526 <SysTick_Handler+0x12>

	}
}
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000100 	.word	0x20000100
 8000674:	20000080 	.word	0x20000080
 8000678:	200000f8 	.word	0x200000f8
 800067c:	200000fc 	.word	0x200000fc
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <PendSV_Handler>:

__attribute__((naked)) // No function entry and exit code
void PendSV_Handler(void) {
 8000684:	2400      	movs	r4, #0
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000686:	f384 8814 	msr	CONTROL, r4
}
 800068a:	bf00      	nop
	__set_CONTROL(0); // enter priviliged mode
//Push {R4-R11} context to PSP
	pushRegistersToCurrentPSP();
 800068c:	f7ff fda4 	bl	80001d8 <pushRegistersToCurrentPSP>
//Save the new stack pointer after the push
	currentTask->stack = readPSP();
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <PendSV_Handler+0x40>)
 8000692:	681c      	ldr	r4, [r3, #0]
 8000694:	f7ff fdae 	bl	80001f4 <readPSP>
 8000698:	4603      	mov	r3, r0
 800069a:	6023      	str	r3, [r4, #0]

	currentTask = taskToExecute;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <PendSV_Handler+0x44>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <PendSV_Handler+0x40>)
 80006a2:	6013      	str	r3, [r2, #0]

//Load the new stack pointer from (new) currentTask
	writePSP(currentTask->stack);
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <PendSV_Handler+0x40>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fda5 	bl	80001fa <writePSP>

//Pop {R4-R11} context from PSP
	popRegistersFromCurrentPSP();
 80006b0:	f7ff fd99 	bl	80001e6 <popRegistersFromCurrentPSP>
 80006b4:	2401      	movs	r4, #1
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006b6:	f384 8814 	msr	CONTROL, r4
}
 80006ba:	bf00      	nop

	__set_CONTROL(1 << CONTROL_nPRIV_Pos); // enter unpriviliged mode
	returnToPSP();
 80006bc:	f7ff fda2 	bl	8000204 <returnToPSP>
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	200000f8 	.word	0x200000f8
 80006c8:	200000fc 	.word	0x200000fc

080006cc <SVC_Handler>:

/* The most simple SVC implementation
 */

void SVC_Handler(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80006d2:	f3ef 8309 	mrs	r3, PSP
 80006d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80006d8:	68fb      	ldr	r3, [r7, #12]
	uint32_t *psp = (uint32_t*) __get_PSP(); // get psp and cast to 32 bit int
 80006da:	61fb      	str	r3, [r7, #28]

	uint16_t *pc = (uint16_t*) *(psp + 6); // 16 bit instruction, get psp with offset of 6
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	3318      	adds	r3, #24
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	61bb      	str	r3, [r7, #24]
	uint16_t pcInstruction = *(pc - 1); // get instruction, -1 because 16 bit instruction
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80006ea:	82fb      	strh	r3, [r7, #22]

	if ((pcInstruction & 1) == 1) { // svc call was 1
 80006ec:	8afb      	ldrh	r3, [r7, #22]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d00b      	beq.n	800070e <SVC_Handler+0x42>
		taskToExecute = schedule();
 80006f6:	f7ff fed1 	bl	800049c <schedule>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a14      	ldr	r2, [pc, #80]	; (8000750 <SVC_Handler+0x84>)
 80006fe:	6013      	str	r3, [r2, #0]
		SCB->ICSR |= (1 << 28);
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <SVC_Handler+0x88>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	4a13      	ldr	r2, [pc, #76]	; (8000754 <SVC_Handler+0x88>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6053      	str	r3, [r2, #4]
 800070c:	e01c      	b.n	8000748 <SVC_Handler+0x7c>

	} else { // svc call was 2
// change systick value
// use task stack R0 to find parameter
		uint32_t r0 = *(psp + 0); // r0 has an offset of 0
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	613b      	str	r3, [r7, #16]
		if (r0 < 1 || r0 > 10) {
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d015      	beq.n	8000746 <SVC_Handler+0x7a>
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	2b0a      	cmp	r3, #10
 800071e:	d812      	bhi.n	8000746 <SVC_Handler+0x7a>
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f383 8814 	msr	CONTROL, r3
}
 800072a:	bf00      	nop
			return;
		} else {

			__set_CONTROL(0); // enter priviliged mode
			SysTick->LOAD = r0 * CLOCK_FREQ_IN_KHz - 1;
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <SVC_Handler+0x8c>)
 8000730:	fb02 f303 	mul.w	r3, r2, r3
 8000734:	4a09      	ldr	r2, [pc, #36]	; (800075c <SVC_Handler+0x90>)
 8000736:	3b01      	subs	r3, #1
 8000738:	6053      	str	r3, [r2, #4]
 800073a:	2301      	movs	r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	f383 8814 	msr	CONTROL, r3
}
 8000744:	e000      	b.n	8000748 <SVC_Handler+0x7c>
			return;
 8000746:	bf00      	nop
			__set_CONTROL(1 << CONTROL_nPRIV_Pos); // enter unpriviliged mode
		}
	}
}
 8000748:	3720      	adds	r7, #32
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000fc 	.word	0x200000fc
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	000186a0 	.word	0x000186a0
 800075c:	e000e010 	.word	0xe000e010

08000760 <taskYield>:

//Call Super Visor
void taskYield(void) {
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	asm("	svc #1");
 8000764:	df01      	svc	1

}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <requestDelay>:

void requestDelay(uint32_t ticks) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	currentTask->counter = ticks;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <requestDelay+0x24>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	605a      	str	r2, [r3, #4]
	currentTask->state = WAITING;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <requestDelay+0x24>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2203      	movs	r2, #3
 8000786:	731a      	strb	r2, [r3, #12]
	taskYield();
 8000788:	f7ff ffea 	bl	8000760 <taskYield>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000f8 	.word	0x200000f8

08000798 <blocking_delay>:

/*------------------------------------DEMO---------------------------------------*/
// blocking delay function
// keep the CPU busy for at least ticks SysTicks
void blocking_delay(unsigned int ticks)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	while (ticks != 0) {
 80007a0:	e00d      	b.n	80007be <blocking_delay+0x26>
		extern bool SysTick_flag;
		while (SysTick_flag == false); // busy wait
 80007a2:	bf00      	nop
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <blocking_delay+0x3c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f083 0301 	eor.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f8      	bne.n	80007a4 <blocking_delay+0xc>
		SysTick_flag = false;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <blocking_delay+0x3c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
		ticks--;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
	while (ticks != 0) {
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1ee      	bne.n	80007a2 <blocking_delay+0xa>
	}
}
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000100 	.word	0x20000100

080007d8 <delay_nonblocking>:

void delay_nonblocking (unsigned int ticks) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

	// ask os to not be scheduled for the amount of ticks (use counter)
	requestDelay(ticks);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ffc5 	bl	8000770 <requestDelay>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <toggleGreen>:

void toggleGreen(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	while(1) {
		blocking_delay(20);
 80007f4:	2014      	movs	r0, #20
 80007f6:	f7ff ffcf 	bl	8000798 <blocking_delay>
    	GPIOD->ODR ^= 1 << GREEN;
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <toggleGreen+0x20>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a04      	ldr	r2, [pc, #16]	; (8000810 <toggleGreen+0x20>)
 8000800:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000804:	6153      	str	r3, [r2, #20]
    	delay_nonblocking(1000);
 8000806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080a:	f7ff ffe5 	bl	80007d8 <delay_nonblocking>
		blocking_delay(20);
 800080e:	e7f1      	b.n	80007f4 <toggleGreen+0x4>
 8000810:	40020c00 	.word	0x40020c00

08000814 <toggleOrange>:
	}
}

void toggleOrange(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	while(1) {
    	GPIOD->ODR ^= 1 << ORANGE;
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <toggleOrange+0x1c>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <toggleOrange+0x1c>)
 800081e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000822:	6153      	str	r3, [r2, #20]
    	delay_nonblocking(700);
 8000824:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000828:	f7ff ffd6 	bl	80007d8 <delay_nonblocking>
    	GPIOD->ODR ^= 1 << ORANGE;
 800082c:	e7f4      	b.n	8000818 <toggleOrange+0x4>
 800082e:	bf00      	nop
 8000830:	40020c00 	.word	0x40020c00

08000834 <toggleRed>:
	}
}

void toggleRed(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	while (1) {
    	GPIOD->ODR ^= 1 << RED;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <toggleRed+0x1c>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <toggleRed+0x1c>)
 800083e:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000842:	6153      	str	r3, [r2, #20]
    	delay_nonblocking(400);
 8000844:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000848:	f7ff ffc6 	bl	80007d8 <delay_nonblocking>
    	GPIOD->ODR ^= 1 << RED;
 800084c:	e7f4      	b.n	8000838 <toggleRed+0x4>
 800084e:	bf00      	nop
 8000850:	40020c00 	.word	0x40020c00

08000854 <toggleBlue>:
	}
}

void toggleBlue(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	while(1) {
		blocking_delay(100);
 8000858:	2064      	movs	r0, #100	; 0x64
 800085a:	f7ff ff9d 	bl	8000798 <blocking_delay>
    	GPIOD->ODR ^= 1 << BLUE;
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <toggleBlue+0x20>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <toggleBlue+0x20>)
 8000864:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000868:	6153      	str	r3, [r2, #20]
    	delay_nonblocking(80);
 800086a:	2050      	movs	r0, #80	; 0x50
 800086c:	f7ff ffb4 	bl	80007d8 <delay_nonblocking>
		blocking_delay(100);
 8000870:	e7f2      	b.n	8000858 <toggleBlue+0x4>
 8000872:	bf00      	nop
 8000874:	40020c00 	.word	0x40020c00

08000878 <main>:
	}
}

int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	// Use HSE (8 MHz)
	// Enable HSE
	RCC->CR |= RCC_CR_HSEON;
 800087c:	4b3b      	ldr	r3, [pc, #236]	; (800096c <main+0xf4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a3a      	ldr	r2, [pc, #232]	; (800096c <main+0xf4>)
 8000882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000886:	6013      	str	r3, [r2, #0]
	// Wait until HSE is stable
	while ((RCC->CR & RCC_CR_HSERDY) == 0);
 8000888:	bf00      	nop
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <main+0xf4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0f9      	beq.n	800088a <main+0x12>

	// Power interface clock enable
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000896:	4b35      	ldr	r3, [pc, #212]	; (800096c <main+0xf4>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a34      	ldr	r2, [pc, #208]	; (800096c <main+0xf4>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
	// Regulator voltage scaling output selection Scale 1 mode <= 100 MHz
	PWR->CR |= PWR_CR_VOS;
 80008a2:	4b33      	ldr	r3, [pc, #204]	; (8000970 <main+0xf8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a32      	ldr	r2, [pc, #200]	; (8000970 <main+0xf8>)
 80008a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ac:	6013      	str	r3, [r2, #0]
	// Use 3 wait states when reading Flash at 100 MHz.
	FLASH->ACR = FLASH_ACR_LATENCY_3WS;
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <main+0xfc>)
 80008b0:	2203      	movs	r2, #3
 80008b2:	601a      	str	r2, [r3, #0]
	// Wait until 3 wait states are used
	while ((FLASH->ACR & FLASH_ACR_LATENCY_3WS) == 0);
 80008b4:	bf00      	nop
 80008b6:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <main+0xfc>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 0303 	and.w	r3, r3, #3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f9      	beq.n	80008b6 <main+0x3e>
	// Enable flash prefetch buffer, instruction and data cache
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN;
 80008c2:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <main+0xfc>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a2b      	ldr	r2, [pc, #172]	; (8000974 <main+0xfc>)
 80008c8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80008cc:	6013      	str	r3, [r2, #0]

	// Use PLL to generate 100 MHz clock
	// PLL output = 8 / M * N / P: M = 4, N = 100, P = 2 to generate 100 MHz
	RCC->PLLCFGR = 0x20000000
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <main+0xf4>)
 80008d0:	4a29      	ldr	r2, [pc, #164]	; (8000978 <main+0x100>)
 80008d2:	605a      	str	r2, [r3, #4]
		| RCC_PLLCFGR_PLLSRC_HSE
		| (0 << RCC_PLLCFGR_PLLP_Pos)
		| (100 << RCC_PLLCFGR_PLLN_Pos)
		| (4 << RCC_PLLCFGR_PLLM_Pos);
	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <main+0xf4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a24      	ldr	r2, [pc, #144]	; (800096c <main+0xf4>)
 80008da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008de:	6013      	str	r3, [r2, #0]
	// Wait until PLL is locked
	while ((RCC->CR & RCC_CR_PLLRDY) == 0);
 80008e0:	bf00      	nop
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <main+0xf4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0f9      	beq.n	80008e2 <main+0x6a>
	// Select PLL as the system clock. AHB clock divided by 2.
	RCC->CFGR |= RCC_CFGR_SW_PLL | RCC_CFGR_PPRE1_DIV2;
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <main+0xf4>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	4a1e      	ldr	r2, [pc, #120]	; (800096c <main+0xf4>)
 80008f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6093      	str	r3, [r2, #8]
	// Wait until PLL used as the system clock
	while ((RCC->CFGR & RCC_CFGR_SWS_PLL) == 0);
 80008fe:	bf00      	nop
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <main+0xf4>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f003 0308 	and.w	r3, r3, #8
 8000908:	2b00      	cmp	r3, #0
 800090a:	d0f9      	beq.n	8000900 <main+0x88>
	// Disable HSI
	RCC->CR &= ~RCC_CR_HSION;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <main+0xf4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a16      	ldr	r2, [pc, #88]	; (800096c <main+0xf4>)
 8000912:	f023 0301 	bic.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]

	// GPIO Port D Clock Enable
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <main+0xf4>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4a13      	ldr	r2, [pc, #76]	; (800096c <main+0xf4>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6313      	str	r3, [r2, #48]	; 0x30
	// GPIO Port D led pins Push/Pull Output
	GPIOD->MODER |= 1 << 2 * GREEN | 1 << 2 * ORANGE | 1 << 2 * RED | 1 << 2 * BLUE;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <main+0x104>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a14      	ldr	r2, [pc, #80]	; (800097c <main+0x104>)
 800092a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800092e:	6013      	str	r3, [r2, #0]


    // Create tasks. Provide fpointer, stacksize, and priority:
	addTaskToList(toggleGreen, 128, 3,500);
 8000930:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000934:	2203      	movs	r2, #3
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <main+0x108>)
 800093a:	f7ff fd4b 	bl	80003d4 <addTaskToList>
    addTaskToList(toggleOrange, 128, 2,100);
 800093e:	2364      	movs	r3, #100	; 0x64
 8000940:	2202      	movs	r2, #2
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	480f      	ldr	r0, [pc, #60]	; (8000984 <main+0x10c>)
 8000946:	f7ff fd45 	bl	80003d4 <addTaskToList>
    addTaskToList(toggleRed, 128, 2,200);
 800094a:	23c8      	movs	r3, #200	; 0xc8
 800094c:	2202      	movs	r2, #2
 800094e:	2180      	movs	r1, #128	; 0x80
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <main+0x110>)
 8000952:	f7ff fd3f 	bl	80003d4 <addTaskToList>
    addTaskToList(toggleBlue, 128, 3,600);
 8000956:	f44f 7316 	mov.w	r3, #600	; 0x258
 800095a:	2203      	movs	r2, #3
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <main+0x114>)
 8000960:	f7ff fd38 	bl	80003d4 <addTaskToList>

	// Start VersdOS with 1 ms sysTick
	startVersdOS(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fd61 	bl	800042c <startVersdOS>

	while(1);
 800096a:	e7fe      	b.n	800096a <main+0xf2>
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000
 8000974:	40023c00 	.word	0x40023c00
 8000978:	20401904 	.word	0x20401904
 800097c:	40020c00 	.word	0x40020c00
 8000980:	080007f1 	.word	0x080007f1
 8000984:	08000815 	.word	0x08000815
 8000988:	08000835 	.word	0x08000835
 800098c:	08000855 	.word	0x08000855

08000990 <Reset_Handler>:
 8000990:	f8df d030 	ldr.w	sp, [pc, #48]	; 80009c4 <LoopFillZerobss+0xe>
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <LoopFillZerobss+0x12>)
 8000996:	490d      	ldr	r1, [pc, #52]	; (80009cc <LoopFillZerobss+0x16>)
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <LoopFillZerobss+0x1a>)
 800099a:	2300      	movs	r3, #0
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:
 800099e:	58d4      	ldr	r4, [r2, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:
 80009a4:	18c4      	adds	r4, r0, r3
 80009a6:	428c      	cmp	r4, r1
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <LoopFillZerobss+0x1e>)
 80009ac:	4c0a      	ldr	r4, [pc, #40]	; (80009d8 <LoopFillZerobss+0x22>)
 80009ae:	2300      	movs	r3, #0
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:
 80009b6:	42a2      	cmp	r2, r4
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>
 80009ba:	f000 f811 	bl	80009e0 <__libc_init_array>
 80009be:	f7ff ff5b 	bl	8000878 <main>
 80009c2:	4770      	bx	lr
 80009c4:	20020000 	.word	0x20020000
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000064 	.word	0x20000064
 80009d0:	08000bd8 	.word	0x08000bd8
 80009d4:	20000064 	.word	0x20000064
 80009d8:	20000118 	.word	0x20000118

080009dc <ADC_IRQHandler>:
 80009dc:	e7fe      	b.n	80009dc <ADC_IRQHandler>
	...

080009e0 <__libc_init_array>:
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	4d0d      	ldr	r5, [pc, #52]	; (8000a18 <__libc_init_array+0x38>)
 80009e4:	4c0d      	ldr	r4, [pc, #52]	; (8000a1c <__libc_init_array+0x3c>)
 80009e6:	1b64      	subs	r4, r4, r5
 80009e8:	10a4      	asrs	r4, r4, #2
 80009ea:	2600      	movs	r6, #0
 80009ec:	42a6      	cmp	r6, r4
 80009ee:	d109      	bne.n	8000a04 <__libc_init_array+0x24>
 80009f0:	4d0b      	ldr	r5, [pc, #44]	; (8000a20 <__libc_init_array+0x40>)
 80009f2:	4c0c      	ldr	r4, [pc, #48]	; (8000a24 <__libc_init_array+0x44>)
 80009f4:	f000 f8e0 	bl	8000bb8 <_init>
 80009f8:	1b64      	subs	r4, r4, r5
 80009fa:	10a4      	asrs	r4, r4, #2
 80009fc:	2600      	movs	r6, #0
 80009fe:	42a6      	cmp	r6, r4
 8000a00:	d105      	bne.n	8000a0e <__libc_init_array+0x2e>
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
 8000a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a08:	4798      	blx	r3
 8000a0a:	3601      	adds	r6, #1
 8000a0c:	e7ee      	b.n	80009ec <__libc_init_array+0xc>
 8000a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a12:	4798      	blx	r3
 8000a14:	3601      	adds	r6, #1
 8000a16:	e7f2      	b.n	80009fe <__libc_init_array+0x1e>
 8000a18:	08000bd0 	.word	0x08000bd0
 8000a1c:	08000bd0 	.word	0x08000bd0
 8000a20:	08000bd0 	.word	0x08000bd0
 8000a24:	08000bd4 	.word	0x08000bd4

08000a28 <malloc>:
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <malloc+0xc>)
 8000a2a:	4601      	mov	r1, r0
 8000a2c:	6818      	ldr	r0, [r3, #0]
 8000a2e:	f000 b823 	b.w	8000a78 <_malloc_r>
 8000a32:	bf00      	nop
 8000a34:	20000000 	.word	0x20000000

08000a38 <sbrk_aligned>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	4e0e      	ldr	r6, [pc, #56]	; (8000a74 <sbrk_aligned+0x3c>)
 8000a3c:	460c      	mov	r4, r1
 8000a3e:	6831      	ldr	r1, [r6, #0]
 8000a40:	4605      	mov	r5, r0
 8000a42:	b911      	cbnz	r1, 8000a4a <sbrk_aligned+0x12>
 8000a44:	f000 f88c 	bl	8000b60 <_sbrk_r>
 8000a48:	6030      	str	r0, [r6, #0]
 8000a4a:	4621      	mov	r1, r4
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	f000 f887 	bl	8000b60 <_sbrk_r>
 8000a52:	1c43      	adds	r3, r0, #1
 8000a54:	d00a      	beq.n	8000a6c <sbrk_aligned+0x34>
 8000a56:	1cc4      	adds	r4, r0, #3
 8000a58:	f024 0403 	bic.w	r4, r4, #3
 8000a5c:	42a0      	cmp	r0, r4
 8000a5e:	d007      	beq.n	8000a70 <sbrk_aligned+0x38>
 8000a60:	1a21      	subs	r1, r4, r0
 8000a62:	4628      	mov	r0, r5
 8000a64:	f000 f87c 	bl	8000b60 <_sbrk_r>
 8000a68:	3001      	adds	r0, #1
 8000a6a:	d101      	bne.n	8000a70 <sbrk_aligned+0x38>
 8000a6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a70:	4620      	mov	r0, r4
 8000a72:	bd70      	pop	{r4, r5, r6, pc}
 8000a74:	20000108 	.word	0x20000108

08000a78 <_malloc_r>:
 8000a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a7c:	1ccd      	adds	r5, r1, #3
 8000a7e:	f025 0503 	bic.w	r5, r5, #3
 8000a82:	3508      	adds	r5, #8
 8000a84:	2d0c      	cmp	r5, #12
 8000a86:	bf38      	it	cc
 8000a88:	250c      	movcc	r5, #12
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	4607      	mov	r7, r0
 8000a8e:	db01      	blt.n	8000a94 <_malloc_r+0x1c>
 8000a90:	42a9      	cmp	r1, r5
 8000a92:	d905      	bls.n	8000aa0 <_malloc_r+0x28>
 8000a94:	230c      	movs	r3, #12
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	2600      	movs	r6, #0
 8000a9a:	4630      	mov	r0, r6
 8000a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000aa0:	4e2e      	ldr	r6, [pc, #184]	; (8000b5c <_malloc_r+0xe4>)
 8000aa2:	f000 f86d 	bl	8000b80 <__malloc_lock>
 8000aa6:	6833      	ldr	r3, [r6, #0]
 8000aa8:	461c      	mov	r4, r3
 8000aaa:	bb34      	cbnz	r4, 8000afa <_malloc_r+0x82>
 8000aac:	4629      	mov	r1, r5
 8000aae:	4638      	mov	r0, r7
 8000ab0:	f7ff ffc2 	bl	8000a38 <sbrk_aligned>
 8000ab4:	1c43      	adds	r3, r0, #1
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	d14d      	bne.n	8000b56 <_malloc_r+0xde>
 8000aba:	6834      	ldr	r4, [r6, #0]
 8000abc:	4626      	mov	r6, r4
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d140      	bne.n	8000b44 <_malloc_r+0xcc>
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	4638      	mov	r0, r7
 8000ac8:	eb04 0803 	add.w	r8, r4, r3
 8000acc:	f000 f848 	bl	8000b60 <_sbrk_r>
 8000ad0:	4580      	cmp	r8, r0
 8000ad2:	d13a      	bne.n	8000b4a <_malloc_r+0xd2>
 8000ad4:	6821      	ldr	r1, [r4, #0]
 8000ad6:	3503      	adds	r5, #3
 8000ad8:	1a6d      	subs	r5, r5, r1
 8000ada:	f025 0503 	bic.w	r5, r5, #3
 8000ade:	3508      	adds	r5, #8
 8000ae0:	2d0c      	cmp	r5, #12
 8000ae2:	bf38      	it	cc
 8000ae4:	250c      	movcc	r5, #12
 8000ae6:	4629      	mov	r1, r5
 8000ae8:	4638      	mov	r0, r7
 8000aea:	f7ff ffa5 	bl	8000a38 <sbrk_aligned>
 8000aee:	3001      	adds	r0, #1
 8000af0:	d02b      	beq.n	8000b4a <_malloc_r+0xd2>
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	442b      	add	r3, r5
 8000af6:	6023      	str	r3, [r4, #0]
 8000af8:	e00e      	b.n	8000b18 <_malloc_r+0xa0>
 8000afa:	6822      	ldr	r2, [r4, #0]
 8000afc:	1b52      	subs	r2, r2, r5
 8000afe:	d41e      	bmi.n	8000b3e <_malloc_r+0xc6>
 8000b00:	2a0b      	cmp	r2, #11
 8000b02:	d916      	bls.n	8000b32 <_malloc_r+0xba>
 8000b04:	1961      	adds	r1, r4, r5
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	6025      	str	r5, [r4, #0]
 8000b0a:	bf18      	it	ne
 8000b0c:	6059      	strne	r1, [r3, #4]
 8000b0e:	6863      	ldr	r3, [r4, #4]
 8000b10:	bf08      	it	eq
 8000b12:	6031      	streq	r1, [r6, #0]
 8000b14:	5162      	str	r2, [r4, r5]
 8000b16:	604b      	str	r3, [r1, #4]
 8000b18:	4638      	mov	r0, r7
 8000b1a:	f104 060b 	add.w	r6, r4, #11
 8000b1e:	f000 f835 	bl	8000b8c <__malloc_unlock>
 8000b22:	f026 0607 	bic.w	r6, r6, #7
 8000b26:	1d23      	adds	r3, r4, #4
 8000b28:	1af2      	subs	r2, r6, r3
 8000b2a:	d0b6      	beq.n	8000a9a <_malloc_r+0x22>
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	50a3      	str	r3, [r4, r2]
 8000b30:	e7b3      	b.n	8000a9a <_malloc_r+0x22>
 8000b32:	6862      	ldr	r2, [r4, #4]
 8000b34:	42a3      	cmp	r3, r4
 8000b36:	bf0c      	ite	eq
 8000b38:	6032      	streq	r2, [r6, #0]
 8000b3a:	605a      	strne	r2, [r3, #4]
 8000b3c:	e7ec      	b.n	8000b18 <_malloc_r+0xa0>
 8000b3e:	4623      	mov	r3, r4
 8000b40:	6864      	ldr	r4, [r4, #4]
 8000b42:	e7b2      	b.n	8000aaa <_malloc_r+0x32>
 8000b44:	4634      	mov	r4, r6
 8000b46:	6876      	ldr	r6, [r6, #4]
 8000b48:	e7b9      	b.n	8000abe <_malloc_r+0x46>
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4638      	mov	r0, r7
 8000b50:	f000 f81c 	bl	8000b8c <__malloc_unlock>
 8000b54:	e7a1      	b.n	8000a9a <_malloc_r+0x22>
 8000b56:	6025      	str	r5, [r4, #0]
 8000b58:	e7de      	b.n	8000b18 <_malloc_r+0xa0>
 8000b5a:	bf00      	nop
 8000b5c:	20000104 	.word	0x20000104

08000b60 <_sbrk_r>:
 8000b60:	b538      	push	{r3, r4, r5, lr}
 8000b62:	4d06      	ldr	r5, [pc, #24]	; (8000b7c <_sbrk_r+0x1c>)
 8000b64:	2300      	movs	r3, #0
 8000b66:	4604      	mov	r4, r0
 8000b68:	4608      	mov	r0, r1
 8000b6a:	602b      	str	r3, [r5, #0]
 8000b6c:	f000 f816 	bl	8000b9c <_sbrk>
 8000b70:	1c43      	adds	r3, r0, #1
 8000b72:	d102      	bne.n	8000b7a <_sbrk_r+0x1a>
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	b103      	cbz	r3, 8000b7a <_sbrk_r+0x1a>
 8000b78:	6023      	str	r3, [r4, #0]
 8000b7a:	bd38      	pop	{r3, r4, r5, pc}
 8000b7c:	2000010c 	.word	0x2000010c

08000b80 <__malloc_lock>:
 8000b80:	4801      	ldr	r0, [pc, #4]	; (8000b88 <__malloc_lock+0x8>)
 8000b82:	f000 b809 	b.w	8000b98 <__retarget_lock_acquire_recursive>
 8000b86:	bf00      	nop
 8000b88:	20000110 	.word	0x20000110

08000b8c <__malloc_unlock>:
 8000b8c:	4801      	ldr	r0, [pc, #4]	; (8000b94 <__malloc_unlock+0x8>)
 8000b8e:	f000 b804 	b.w	8000b9a <__retarget_lock_release_recursive>
 8000b92:	bf00      	nop
 8000b94:	20000110 	.word	0x20000110

08000b98 <__retarget_lock_acquire_recursive>:
 8000b98:	4770      	bx	lr

08000b9a <__retarget_lock_release_recursive>:
 8000b9a:	4770      	bx	lr

08000b9c <_sbrk>:
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <_sbrk+0x14>)
 8000b9e:	6811      	ldr	r1, [r2, #0]
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b909      	cbnz	r1, 8000ba8 <_sbrk+0xc>
 8000ba4:	4903      	ldr	r1, [pc, #12]	; (8000bb4 <_sbrk+0x18>)
 8000ba6:	6011      	str	r1, [r2, #0]
 8000ba8:	6810      	ldr	r0, [r2, #0]
 8000baa:	4403      	add	r3, r0
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	4770      	bx	lr
 8000bb0:	20000114 	.word	0x20000114
 8000bb4:	20000118 	.word	0x20000118

08000bb8 <_init>:
 8000bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bba:	bf00      	nop
 8000bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bbe:	bc08      	pop	{r3}
 8000bc0:	469e      	mov	lr, r3
 8000bc2:	4770      	bx	lr

08000bc4 <_fini>:
 8000bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc6:	bf00      	nop
 8000bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bca:	bc08      	pop	{r3}
 8000bcc:	469e      	mov	lr, r3
 8000bce:	4770      	bx	lr
