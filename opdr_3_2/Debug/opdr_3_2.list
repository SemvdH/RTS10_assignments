
opdr_3_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000160  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  4 .ARM          00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f8  080002f8  000102f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000300  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000300  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003bc  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000ca  00000000  00000000  000106ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000107b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00010800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc4e  00000000  00000000  00010830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000054a  00000000  00000000  0001e47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fad9  00000000  00000000  0001e9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006e4a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000054  00000000  00000000  0006e4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080002e0 	.word	0x080002e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080002e0 	.word	0x080002e0

080001d8 <main>:
#include <stdint.h>
#include <stm32f4xx.h>

int main(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	// check systick source and set value to blink every 0.5s
	if (SysTick->CTRL & SysTick_CTRL_CLKSOURCE_Msk) {
 80001dc:	4b15      	ldr	r3, [pc, #84]	; (8000234 <main+0x5c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f003 0304 	and.w	r3, r3, #4
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d003      	beq.n	80001f0 <main+0x18>
		SysTick->LOAD = 8000000;
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <main+0x5c>)
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <main+0x60>)
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	e002      	b.n	80001f6 <main+0x1e>
	} else {
		SysTick->LOAD = 1000000;
 80001f0:	4b10      	ldr	r3, [pc, #64]	; (8000234 <main+0x5c>)
 80001f2:	4a12      	ldr	r2, [pc, #72]	; (800023c <main+0x64>)
 80001f4:	605a      	str	r2, [r3, #4]
	}

	// enable systick
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <main+0x5c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <main+0x5c>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	6013      	str	r3, [r2, #0]


	// GPIO Port D Clock Enable
	RCC->AHB1ENR = RCC_AHB1ENR_GPIODEN;
 8000202:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <main+0x68>)
 8000204:	2208      	movs	r2, #8
 8000206:	631a      	str	r2, [r3, #48]	; 0x30
	// GPIO Port D Pin 15 down to 12 Push/Pull Output
	GPIOD->MODER = GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0 | GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0;
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <main+0x6c>)
 800020a:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
 800020e:	601a      	str	r2, [r3, #0]
	// Set green and red LEDs
	GPIOD->ODR = GPIO_ODR_ODR_14 | GPIO_ODR_ODR_12;
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <main+0x6c>)
 8000212:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000216:	615a      	str	r2, [r3, #20]


	while (1)
	{
		// Wait a moment
		while (( SysTick->CTRL & (1 << 16) ) == 0) ;
 8000218:	bf00      	nop
 800021a:	4b06      	ldr	r3, [pc, #24]	; (8000234 <main+0x5c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000222:	2b00      	cmp	r3, #0
 8000224:	d0f9      	beq.n	800021a <main+0x42>
		// Flip all LEDs
		GPIOD->ODR ^= GPIO_ODR_ODR_15 | GPIO_ODR_ODR_14 | GPIO_ODR_ODR_13 | GPIO_ODR_ODR_12;
 8000226:	4b07      	ldr	r3, [pc, #28]	; (8000244 <main+0x6c>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a06      	ldr	r2, [pc, #24]	; (8000244 <main+0x6c>)
 800022c:	f483 4370 	eor.w	r3, r3, #61440	; 0xf000
 8000230:	6153      	str	r3, [r2, #20]
		while (( SysTick->CTRL & (1 << 16) ) == 0) ;
 8000232:	e7f1      	b.n	8000218 <main+0x40>
 8000234:	e000e010 	.word	0xe000e010
 8000238:	007a1200 	.word	0x007a1200
 800023c:	000f4240 	.word	0x000f4240
 8000240:	40023800 	.word	0x40023800
 8000244:	40020c00 	.word	0x40020c00

08000248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000248:	f8df d030 	ldr.w	sp, [pc, #48]	; 800027c <LoopFillZerobss+0xe>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800024e:	490d      	ldr	r1, [pc, #52]	; (8000284 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000250:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000264:	4c0a      	ldr	r4, [pc, #40]	; (8000290 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call the clock system intitialization function.*/
//  bl  SystemInit // BroJZ: not needed for minimal configuration
/* Call static constructors */
    bl __libc_init_array
 8000272:	f000 f811 	bl	8000298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000276:	f7ff ffaf 	bl	80001d8 <main>
  bx  lr    
 800027a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800027c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000288:	08000300 	.word	0x08000300
  ldr r2, =_sbss
 800028c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000290:	2000001c 	.word	0x2000001c

08000294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC_IRQHandler>
	...

08000298 <__libc_init_array>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	4d0d      	ldr	r5, [pc, #52]	; (80002d0 <__libc_init_array+0x38>)
 800029c:	4c0d      	ldr	r4, [pc, #52]	; (80002d4 <__libc_init_array+0x3c>)
 800029e:	1b64      	subs	r4, r4, r5
 80002a0:	10a4      	asrs	r4, r4, #2
 80002a2:	2600      	movs	r6, #0
 80002a4:	42a6      	cmp	r6, r4
 80002a6:	d109      	bne.n	80002bc <__libc_init_array+0x24>
 80002a8:	4d0b      	ldr	r5, [pc, #44]	; (80002d8 <__libc_init_array+0x40>)
 80002aa:	4c0c      	ldr	r4, [pc, #48]	; (80002dc <__libc_init_array+0x44>)
 80002ac:	f000 f818 	bl	80002e0 <_init>
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	10a4      	asrs	r4, r4, #2
 80002b4:	2600      	movs	r6, #0
 80002b6:	42a6      	cmp	r6, r4
 80002b8:	d105      	bne.n	80002c6 <__libc_init_array+0x2e>
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c0:	4798      	blx	r3
 80002c2:	3601      	adds	r6, #1
 80002c4:	e7ee      	b.n	80002a4 <__libc_init_array+0xc>
 80002c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ca:	4798      	blx	r3
 80002cc:	3601      	adds	r6, #1
 80002ce:	e7f2      	b.n	80002b6 <__libc_init_array+0x1e>
 80002d0:	080002f8 	.word	0x080002f8
 80002d4:	080002f8 	.word	0x080002f8
 80002d8:	080002f8 	.word	0x080002f8
 80002dc:	080002fc 	.word	0x080002fc

080002e0 <_init>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr

080002ec <_fini>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr
