
opdr_3_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f0  080003f8  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f0  080003f0  000103f8  2**0
                  CONTENTS
  4 .ARM          00000000  080003f0  080003f0  000103f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f0  080003f8  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  080003f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003f8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000093e  00000000  00000000  00010428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001b7  00000000  00000000  00010d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00010f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e9c4  00000000  00000000  00010fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007d0  00000000  00000000  0001f98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053f6b  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000740c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c4  00000000  00000000  00074118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003d8 	.word	0x080003d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003d8 	.word	0x080003d8

080001d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	6039      	str	r1, [r7, #0]
 80001e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	db0a      	blt.n	8000202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	490c      	ldr	r1, [pc, #48]	; (8000224 <__NVIC_SetPriority+0x4c>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	0112      	lsls	r2, r2, #4
 80001f8:	b2d2      	uxtb	r2, r2
 80001fa:	440b      	add	r3, r1
 80001fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000200:	e00a      	b.n	8000218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	b2da      	uxtb	r2, r3
 8000206:	4908      	ldr	r1, [pc, #32]	; (8000228 <__NVIC_SetPriority+0x50>)
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f003 030f 	and.w	r3, r3, #15
 800020e:	3b04      	subs	r3, #4
 8000210:	0112      	lsls	r2, r2, #4
 8000212:	b2d2      	uxtb	r2, r2
 8000214:	440b      	add	r3, r1
 8000216:	761a      	strb	r2, [r3, #24]
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	e000e100 	.word	0xe000e100
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3b01      	subs	r3, #1
 8000238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800023c:	d301      	bcc.n	8000242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800023e:	2301      	movs	r3, #1
 8000240:	e00f      	b.n	8000262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <SysTick_Config+0x40>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3b01      	subs	r3, #1
 8000248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800024a:	210f      	movs	r1, #15
 800024c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000250:	f7ff ffc2 	bl	80001d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <SysTick_Config+0x40>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <SysTick_Config+0x40>)
 800025c:	2207      	movs	r2, #7
 800025e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000260:	2300      	movs	r3, #0
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	e000e010 	.word	0xe000e010

08000270 <SysTick_Handler>:

// amount of half seconds have passed
int ticks = 0;

// interrupt handler
void SysTick_Handler() {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	// increase amount of half seconds bassed
	ticks++;
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <SysTick_Handler+0x18>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	3301      	adds	r3, #1
 800027a:	4a03      	ldr	r2, [pc, #12]	; (8000288 <SysTick_Handler+0x18>)
 800027c:	6013      	str	r3, [r2, #0]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	20000020 	.word	0x20000020

0800028c <main>:

int main(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	// enable systick and interrupts
	SysTick_Config(8000000); // interrupt every 0.5s
 8000290:	4826      	ldr	r0, [pc, #152]	; (800032c <main+0xa0>)
 8000292:	f7ff ffcb 	bl	800022c <SysTick_Config>

	// GPIO Port D Clock Enable
	RCC->AHB1ENR = RCC_AHB1ENR_GPIODEN;
 8000296:	4b26      	ldr	r3, [pc, #152]	; (8000330 <main+0xa4>)
 8000298:	2208      	movs	r2, #8
 800029a:	631a      	str	r2, [r3, #48]	; 0x30
	// GPIO Port D Pin 15 down to 12 Push/Pull Output
	GPIOD->MODER = GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0
 800029c:	4b25      	ldr	r3, [pc, #148]	; (8000334 <main+0xa8>)
 800029e:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
 80002a2:	601a      	str	r2, [r3, #0]
			| GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0;
	// Set green and red LEDs
	GPIOD->ODR = GPIO_ODR_ODR_14 | GPIO_ODR_ODR_12;
 80002a4:	4b23      	ldr	r3, [pc, #140]	; (8000334 <main+0xa8>)
 80002a6:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80002aa:	615a      	str	r2, [r3, #20]

	// Do forever:
	while (1) {
		// Wait a moment
		__WFI();
 80002ac:	bf30      	wfi

		switch (light) {
 80002ae:	4b22      	ldr	r3, [pc, #136]	; (8000338 <main+0xac>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	d024      	beq.n	8000300 <main+0x74>
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	dcf8      	bgt.n	80002ac <main+0x20>
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d002      	beq.n	80002c4 <main+0x38>
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d00f      	beq.n	80002e2 <main+0x56>
 80002c2:	e031      	b.n	8000328 <main+0x9c>
		case RED:
			GPIOD->ODR = GPIO_ODR_ODR_14;
 80002c4:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <main+0xa8>)
 80002c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ca:	615a      	str	r2, [r3, #20]
			if (ticks > 10) {
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <main+0xb0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b0a      	cmp	r3, #10
 80002d2:	dd24      	ble.n	800031e <main+0x92>
				ticks = 0;
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <main+0xb0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
				light = ORANGE;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <main+0xac>)
 80002dc:	2201      	movs	r2, #1
 80002de:	701a      	strb	r2, [r3, #0]
			}

			break;
 80002e0:	e01d      	b.n	800031e <main+0x92>
		case ORANGE:
			GPIOD->ODR = GPIO_ODR_ODR_13;
 80002e2:	4b14      	ldr	r3, [pc, #80]	; (8000334 <main+0xa8>)
 80002e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002e8:	615a      	str	r2, [r3, #20]
			if (ticks > 2) {
 80002ea:	4b14      	ldr	r3, [pc, #80]	; (800033c <main+0xb0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	dd17      	ble.n	8000322 <main+0x96>
				ticks = 0;
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <main+0xb0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
				light = GREEN;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <main+0xac>)
 80002fa:	2202      	movs	r2, #2
 80002fc:	701a      	strb	r2, [r3, #0]
			}

			break;
 80002fe:	e010      	b.n	8000322 <main+0x96>
		case GREEN:
			GPIOD->ODR = GPIO_ODR_ODR_12;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <main+0xa8>)
 8000302:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000306:	615a      	str	r2, [r3, #20]
			if (ticks > 8) {
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <main+0xb0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b08      	cmp	r3, #8
 800030e:	dd0a      	ble.n	8000326 <main+0x9a>
				ticks = 0;
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <main+0xb0>)
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
				light = RED;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <main+0xac>)
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800031c:	e003      	b.n	8000326 <main+0x9a>
			break;
 800031e:	bf00      	nop
 8000320:	e7c4      	b.n	80002ac <main+0x20>
			break;
 8000322:	bf00      	nop
 8000324:	e7c2      	b.n	80002ac <main+0x20>
			break;
 8000326:	bf00      	nop
		__WFI();
 8000328:	e7c0      	b.n	80002ac <main+0x20>
 800032a:	bf00      	nop
 800032c:	007a1200 	.word	0x007a1200
 8000330:	40023800 	.word	0x40023800
 8000334:	40020c00 	.word	0x40020c00
 8000338:	2000001c 	.word	0x2000001c
 800033c:	20000020 	.word	0x20000020

08000340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000340:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000374 <LoopFillZerobss+0xe>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <LoopFillZerobss+0x22>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call the clock system intitialization function.*/
//  bl  SystemInit // BroJZ: not needed for minimal configuration
/* Call static constructors */
    bl __libc_init_array
 800036a:	f000 f811 	bl	8000390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800036e:	f7ff ff8d 	bl	800028c <main>
  bx  lr    
 8000372:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000380:	080003f8 	.word	0x080003f8
  ldr r2, =_sbss
 8000384:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000388:	20000024 	.word	0x20000024

0800038c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC_IRQHandler>
	...

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	4d0d      	ldr	r5, [pc, #52]	; (80003c8 <__libc_init_array+0x38>)
 8000394:	4c0d      	ldr	r4, [pc, #52]	; (80003cc <__libc_init_array+0x3c>)
 8000396:	1b64      	subs	r4, r4, r5
 8000398:	10a4      	asrs	r4, r4, #2
 800039a:	2600      	movs	r6, #0
 800039c:	42a6      	cmp	r6, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	4d0b      	ldr	r5, [pc, #44]	; (80003d0 <__libc_init_array+0x40>)
 80003a2:	4c0c      	ldr	r4, [pc, #48]	; (80003d4 <__libc_init_array+0x44>)
 80003a4:	f000 f818 	bl	80003d8 <_init>
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	10a4      	asrs	r4, r4, #2
 80003ac:	2600      	movs	r6, #0
 80003ae:	42a6      	cmp	r6, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b8:	4798      	blx	r3
 80003ba:	3601      	adds	r6, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c2:	4798      	blx	r3
 80003c4:	3601      	adds	r6, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	080003f0 	.word	0x080003f0
 80003cc:	080003f0 	.word	0x080003f0
 80003d0:	080003f0 	.word	0x080003f0
 80003d4:	080003f4 	.word	0x080003f4

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
